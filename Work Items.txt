- Add Xml comments to public API surface...
- Implement Equatable<T>, using same approach as Cloneable<T>...
- Enhance Cloneable<T> to detect if a struct is a cloneable primative (all fields recursively are cloneable primatives)...
- Ensure thread safety in Cloneable<T>/Equatable<T>...
- Evaluate possible refactoring of Cloneable<T>/Equatable<T> to see if they could be simplified/generalized...
- Move to .NET 4.0
    * Replace thread safety in Cloneable<T>/Equatable<T> with Lazy<T>
- Refactor SimpleScanner to a class that inherits from abstract TextScanner<T>, where T is the Token type
    * Use regular expressions to build a Table Lexer
        ** Convert multiple regular expressions into a single recognizer state machine
- Create generic Reflection.Emit Visitor<T> implementation (similar to one used in RegularExpressionPipeline)...
- Add RelativePath extension methods to FileSystemInfo and IEnumerable<FileSystemInfo>...
- Add overridable OnEnlistment() method to EnlistmentScope class...
- Investigate how Monads could be encorporated in "PipelineEnumerable" concept
    * Perhaps change so that it is strictly functional composition (i.e. not require interface)
- Implement SmartFormat...
- Add support for Dependant Scopes (e.g. System.Transactions.Transaction.DependantClone(...))
- Change LookAheadValue from class to struct
- Create JSON LoggerContextSerializer
- Add ObjectDumper to Serialization namespace + create ObjectDumper LoggerContextSerializer
- Collapse all Func/Action Curry extension methods into a methods that takes in a delegate that dispatches to underlying delegate
- Scan types for Command-Query Seperation opportunities
- Enhance GetDelegate extension method to work with generic methods
- Make entire library localizable via Exodata