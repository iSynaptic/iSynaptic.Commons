<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".generated.cs" #>
<#@ include file="..\..\General.ttinclude" #>

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

using NUnit.Framework;

namespace iSynaptic.Commons
{
    public partial class FuncExtensionsTests
    {
		<# foreach(var i in Enumerable.Range(1, 16))
		{
			string nameSuffix = Delimit(Enumerable.Range(1, i), "", x => "T" + x.ToString());
			string typeArgs = Delimit(Enumerable.Range(1, i), ", ", x => "T" + x.ToString());
			string fixedTypes = Delimit(Enumerable.Range(1, i), ", ", x => "int");
			string args = Delimit(Enumerable.Range(1, i), ", ", x => "t" + x.ToString());
			string fixedArgs = Delimit(Enumerable.Range(1, i), ", ", x => x.ToString());
	    #>

		[Test]
        public void ToActionOf<#= nameSuffix #>()
        {
            int val = 0;

            Func<<#= fixedTypes #>, int> func = (<#= args #>) => { val = <#= Delimit(Enumerable.Range(1, i), " + ", x => "t" + x.ToString()) #>; return val; };
            var action = func.ToAction();

            action(<#= fixedArgs #>);

			int expected = <#= Delimit(Enumerable.Range(1, i), " + ", x => x.ToString()) #>;
            Assert.AreEqual(expected, val);
        }

		[Test]
		public void SynchronizeOf<#= nameSuffix #>()
		{
			int count = 0;
            Func<<#= fixedTypes #>, int> func = (<#= args #>) => { count++; Thread.Sleep(150); return count-- + <#= Delimit(Enumerable.Range(1, i), " + ", x => "t" + x.ToString()) #>;};
			func = func.Synchronize();

            var task1 = Task.Factory.StartNew(() => func(<#= fixedArgs #>));
            var task2 = Task.Factory.StartNew(() => func(<#= fixedArgs #>));

			int expected = 1 + <#= Delimit(Enumerable.Range(1, i), " + ", x => x.ToString()) #>;

			Assert.AreEqual(expected, task1.Result);
			Assert.AreEqual(expected, task2.Result);
		}

		[Test]
		public void MakeConditionalOf<#= nameSuffix #>()
		{
			<# string halvedFixedArgs = Delimit(Enumerable.Range(1, i), ", ", x => (x / 2).ToString()); #>

			Func<<#= fixedTypes #>, int> func = null;

            Assert.Throws<ArgumentNullException>(() => { func.MakeConditional((<#= args #>) => true); });

            func = (<#= args #>) => <#= Delimit(Enumerable.Range(1, i), " + ", x => "t" + x.ToString()) #>;
            Assert.Throws<ArgumentNullException>(() => { func.MakeConditional(null); });

			int expected = <#= Delimit(Enumerable.Range(1, i), " + ", x => x.ToString()) #>;

            var simpleConditionalFunc = func.MakeConditional((<#= args #>) => <#= Delimit(Enumerable.Range(1, i), " + ", x => "t" + x.ToString()) #> == expected);
            Assert.AreEqual(0, simpleConditionalFunc(<#= halvedFixedArgs #>));
            Assert.AreEqual(expected, simpleConditionalFunc(<#= fixedArgs #>));

            var withDefaultValueFunc = func.MakeConditional((<#= args #>) => <#= Delimit(Enumerable.Range(1, i), " + ", x => "t" + x.ToString()) #> == expected, -1);
            Assert.AreEqual(-1, withDefaultValueFunc(<#= halvedFixedArgs #>));
            Assert.AreEqual(expected, withDefaultValueFunc(<#= fixedArgs #>));

            var withFalseFunc = func.MakeConditional((<#= args #>) => <#= Delimit(Enumerable.Range(1, i), " + ", x => "t" + x.ToString()) #> == expected, (<#= args #>) => 42);
            Assert.AreEqual(42, withFalseFunc(<#= halvedFixedArgs #>));
            Assert.AreEqual(expected, withFalseFunc(<#= fixedArgs #>));
		}

		<# } #>
	}
}