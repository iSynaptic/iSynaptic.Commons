<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".generated.cs" #>
<#@ include file="..\..\General.ttinclude" #>

using System;
using System.Collections.Generic;
using NUnit.Framework;

namespace iSynaptic.Commons
{
    public partial class FuncExtensionsTests
    {
		<# foreach(var i in Enumerable.Range(1, 16))
		{
			string nameSuffix = Delimit(Enumerable.Range(1, i), "", x => "T" + x.ToString());
			string typeArgs = Delimit(Enumerable.Range(1, i), ", ", x => "T" + x.ToString());
			string fixedTypes = Delimit(Enumerable.Range(1, i), ", ", x => "int");
			string args = Delimit(Enumerable.Range(1, i), ", ", x => "t" + x.ToString());
			string fixedArgs = Delimit(Enumerable.Range(1, i), ", ", x => x.ToString());
	    #>

		[Test]
        public void ToActionOf<#= nameSuffix #>()
        {
            int val = 0;

            Func<<#= fixedTypes #>, int> func = (<#= args #>) => { val = <#= Delimit(Enumerable.Range(1, i), " + ", x => "t" + x.ToString()) #>; return val; };
            var action = func.ToAction();

            action(<#= fixedArgs #>);

			int expected = <#= Delimit(Enumerable.Range(1, i), " + ", x => x.ToString()) #>;
            Assert.AreEqual(expected, val);
        }

		<# } #>
	}
}