<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".generated.cs" #>
<#@ include file="..\..\General.ttinclude" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

using NUnit.Framework;

namespace iSynaptic.Commons
{
    public partial class FuncExtensionsTests
    {
		<# foreach(var i in Enumerable.Range(1, 7))
		{
			string nameSuffix = Delimit(Enumerable.Range(1, i), "", x => "T" + x.ToString());
			string typeArgs = Delimit(Enumerable.Range(1, i), ", ", x => "T" + x.ToString());
			string fixedTypes = Delimit(Enumerable.Range(1, i), ", ", x => "int");
			string args = Delimit(Enumerable.Range(1, i), ", ", x => "t" + x.ToString());
			string fixedArgs = Delimit(Enumerable.Range(1, i), ", ", x => x.ToString());
	    #>

		[Test]
		public void SynchronizeOf<#= nameSuffix #>_PreventsConcurrentAccess()
		{
			int count = 0;
            Func<<#= fixedTypes #>, int> func = (<#= args #>) => { count++; return count; };
			func = func.Synchronize((<#= args #>) => true);

            var random = new Random(DateTime.UtcNow.Second);
            int start = random.Next(10, 30);
            int end = random.Next(50, 100);

            Parallel.For(start, end, x => func(<#= fixedArgs #>));

            Assert.AreEqual(end - start, count);
		}

		[Test]
		public void SynchronizeOf<#= nameSuffix #>_UsesCorrectArguments()
		{
            Func<<#= fixedTypes #>, int> func = (<#= args #>) => <#= Delimit(Enumerable.Range(1, i), " + ", x => "t" + x.ToString()) #>;
			func = func.Synchronize();

			int expected = <#= Enumerable.Range(1, i).Sum().ToString() #>;
			
			Assert.AreEqual(expected, func(<#= fixedArgs #>));
		}

		[Test]
		public void MemoizeOf<#= nameSuffix #>()
		{
			Func<<#= fixedTypes #>, int> func = null;

			Assert.Throws<ArgumentNullException>(() => { func.Memoize(); });

			int count = 0;

			int firstExpected = <#= Delimit(Enumerable.Range(1, i), " + ", x => x.ToString()) #>;
			int secondExpected = <#= Delimit(Enumerable.Range(1, i), " + ", x => (x * 2).ToString()) #>;

            func = (<#= args #>) => { count++; return <#= Delimit(Enumerable.Range(1, i), " + ", x => "t" + x.ToString()) #>; };
			func = func.Memoize();

			Assert.AreEqual(firstExpected, func(<#= fixedArgs #>));
			Assert.AreEqual(firstExpected, func(<#= fixedArgs #>));
			Assert.AreEqual(firstExpected, func(<#= fixedArgs #>));

			<# string secondFixedArgs = Delimit(Enumerable.Range(1, i), ", ", x => (x * 2).ToString()); #>

			Assert.AreEqual(secondExpected, func(<#= secondFixedArgs #>));
			Assert.AreEqual(secondExpected, func(<#= secondFixedArgs #>));
			Assert.AreEqual(secondExpected, func(<#= secondFixedArgs #>));


			Assert.AreEqual(2, count);

		}

		<# } #>
	}
}