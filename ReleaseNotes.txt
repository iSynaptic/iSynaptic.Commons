======================================
RELEASE NOTES: iSynaptic.Commons
======================================


==== Version 0.2.0.0 ====

Released on: June xx, 2011

---- Notes -----

* This release reflects some collaboration with Brian Beckman and heavily
  modifies the Maybe<T>.
  
* Naming of Maybe<T> operators has been updated.  For example, the Select 
  operation that takes a Func<T, Maybe<TResult>> was always an alias of
  Bind.  It has been renamed to SelectMaybe. Additionally, SelectMany 
  (another alias of Bind) has also been implemented in order to support 
  LINQ comprehension syntax.  Unfortunately, the name SelectMany does not
  make sense symantically, since there is at most one value in a Maybe<T>
  and the name SelectMany is heavily influnced by LINQ and IEnumerabe<T>,
  the List monad.  As a result, Maybe<T>'s SelectMany has the EditorBrowsable
  attribute applied to it to obscure it from IntelliSense.

---- Features ----

* Express method on Maybe<T> allow the development of Maybe<T> operators
  that need full visibility into the Maybe<T> struct.  Express adds lazy
  evaluzation semantics and memoization.  All other operations that return
  a Maybe<T> are written either directly or indirectly using Express.

* Support for C# comprehension syntax is now supported for Maybe<T>.  Thanks
  to Brian Beckman for the implementation of SelectMany.

---- Breaking Changes ----

* Exceptions thrown when evaluating the result of a Maybe<T> will now
  bubble out.  This brings parity between Maybe<T> and IEnumerable<T>
  treatment of exceptions.  A CatchExceptions() operation has been
  implemented which will catch exceptions from up-stream Maybe<T>
  operations.

* Maybe.Return has been renamed to Maybe.Extract.  Since CoMonads have a
  "extract" operation that take a CoMonad and extracts a T, it made more
  sense to call this operation Extract.

* Maybe.Value has been renamed to Maybe.Return.  Since Monads have a "return"
  operation that takes a T and puts it into the Monad, it made more sense to
  call this operation Return.

* Many of the OnException overloads have been renamed to SuppressException.  This
  brings parity with the other OnXXX methods that only have side-effects and
  do not change the resulting value.