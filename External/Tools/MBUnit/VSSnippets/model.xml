<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippet Format="1.0.0">
    <Header>
        <Title>Model</Title>
        <Shortcut>model</Shortcut>
        <Description>Expansion snippet for a Model</Description>
        <SnippetTypes>
            <SnippetType>Expansion</SnippetType>
        </SnippetTypes>
    </Header>
    <Snippet>
        <Declarations>
            <Literal default="false">
                <ID>namespace</ID>
                <ToolTip>Model namespace</ToolTip>
            </Literal>            
            <Literal default="true">
                <ID>type</ID>
                <ToolTip>Modelled type</ToolTip>
                <Default>Put the modelled type here</Default>
            </Literal>
            <Literal default="true">
                <ID>basetype</ID>
                <ToolTip>Modelled Base Type</ToolTip>
                <Default>Object</Default>
            </Literal>
        </Declarations>
        <Code Language="csharp" Format="CData">
<![CDATA[
using System;
using TestFu;
using TestFu.Models;

namespace $namespace$
{
    /// <summary>
    /// A <see cref="IModel"/> implementation for the 
    /// <see cref="$type$"/> type.
    /// </summary>
    [Model(typeof($type$))]
    // [State("Put a state name here")]
    // [SubModel("Put a submodel name here")]
    public class $type$Model : $basetype$Model
    {
        #region Constructors
        /// <summary>
        /// Initializes a new <see cref="$name$Model"/> instance.
        /// </summary>
        public $type$Model()
        :base()
        {}
    
        /// <summary>
        /// Initializes a new <see cref="$name$Model"/> instance
        /// to model the <paramref name="modelledType"/> type.
        /// </summary>
        /// <param name="modelledType">
        /// Target <see cref="Type"/> of the model
        /// </param>
        public $type$Model(Type modelledType)
        :base(modelledType)
        {
            if (!typeof($type$).IsAssignableFrom(modelledType))
                throw new ArgumentException("$type$ is not assignable from "+modelledType.FullName,"modelledType");            
        }    
        #endregion
    
        #region Transitions
        [Transition]
        public void SampleTransition($type$ target)
        {
            throw new NotImplemented();
        }
     
        /// <summary>
        /// Gets the active <see cref="ITransition"/> instance for
        /// current <paramref name="target"/>.
        /// </summary>
        /// <param name="transitions">
        /// Collection of active <see cref="ITransition"/> names
        /// </param>
        /// <param name="target">
        /// Current tested instance
        /// </param>
        protected override void GetActiveTransitions(
            ITransitionNameCollection transitions,
            Object target
            )
        {
            base.GetActiveTransitions(transitions,target);
            $type$ current = ($type$)target;
    
            $end$
        }   
        #endregion
    }
}]]>
	</Code>
    </Snippet>
</CodeSnippet>