<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MbUnit.Framework</name>
    </assembly>
    <members>
        <member name="T:MbUnit.Framework.ArrayAssert">
            <summary>
            Array Assertion class
            </summary>
        </member>
        <member name="M:MbUnit.Framework.ArrayAssert.#ctor">
            <summary>
            A private constructor disallows any instances of this object. 
            </summary>
        </member>
        <member name="M:MbUnit.Framework.ArrayAssert.AreEqual(System.Boolean[],System.Boolean[])">
            <summary>
            Verifies that both array have the same dimension and elements.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
        </member>
        <member name="T:MbUnit.Framework.Assert">
            <summary>
            Assertion class
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='Assert']"/>
        </member>
        <member name="M:MbUnit.Framework.Assert.Equals(System.Object,System.Object)">
            <summary>
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:MbUnit.Framework.Assert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsNumericType(System.Object)">
            <summary>
            Checks the type of the object, returning true if
            the object is a numeric type.
            </summary>
            <param name="obj">The object to check</param>
            <returns>true if the object is a numeric type</returns>
        </member>
        <member name="M:MbUnit.Framework.Assert.ObjectsEqual(System.Object,System.Object)">
            <summary>
            Used to compare numeric types.  Comparisons between
            same types are fine (Int32 to Int32, or Int64 to Int64),
            but the Equals method fails across different types.
            This method was added to allow any numeric type to
            be handled correctly, by using <c>ToString</c> and
            comparing the result
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:MbUnit.Framework.Assert.#ctor">
            <summary>
            A private constructor disallows any instances of this object. 
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsTrue(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="format">
            The format of the message to display if the condition is false,
            containing zero or more format items. 
            </param>
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format. 
            </param>
            <remarks>
            <para>
            The error message is formatted using <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsTrue(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsFalse(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="format">
            The format of the message to display if the condition is false,
            containing zero or more format items. 
            </param>
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format. 
            </param>
            <remarks>
            <para>
            The error message is formatted using <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsFalse(System.Boolean)">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equals then an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message printed out upon failure</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double)">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equals then an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreEqual(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Verifies that two floats are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equals then an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is
            thrown.
            </summary>
            <param name="message">The message printed out upon failure</param>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreEqual(System.Single,System.Single,System.Single)">
            <summary>
            Verifies that two floats are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equals then an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that two decimals are equal. If 
            they are not equals then an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is
            thrown.
            </summary>
            <param name="message">The message printed out upon failure</param>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that two decimals are equal. If 
            they are not equals then an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="format">
            The format of the message to display if the assertion fails,
            containing zero or more format items. 
            </param>
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format. 
            </param>
            <remarks>
            <para>
            The error message is formatted using <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal)">
            <summary>
            Verifies that two decimals are equal. If 
            they are not equals then an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that two ints are equal. If 
            they are not equals then an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is
            thrown.
            </summary>
            <param name="message">The message printed out upon failure</param>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreEqual(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that two ints are equal. If 
            they are not equals then an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="format">
            The format of the message to display if the assertion fails,
            containing zero or more format items. 
            </param>
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format. 
            </param>
            <remarks>
            <para>
            The error message is formatted using <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreEqual(System.Int32,System.Int32)">
            <summary>
            Verifies that two ints are equal. If 
            they are not equals then an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value.  All
            non-numeric types are compared by using the <c>Equals</c> method.
            If they are not equal an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
            <param name="format">
            The format of the message to display if the assertion fails,
            containing zero or more format items. 
            </param>
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format. 
            </param>
            <remarks>
            <para>
            The error message is formatted using <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreEqual(System.Object,System.Object,System.String)">
            <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value.  All
            non-numeric types are compared by using the <c>Equals</c> method.
            If they are not equal an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display if objects are not equal</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreEqual(System.Object,System.Object)">
            <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value.  All
            non-numeric types are compared by using the <c>Equals</c> method.
            If they are not equal an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreValueEqual(System.Reflection.PropertyInfo,System.Object,System.Object,System.Object[])">
            <summary>
            Verifies that the value of the property described by <paramref name="pi"/> is the same
            in both ojects.
            </summary>
            <param name="pi">
            Property describing the value to test
            </param>
            <param name="expected">
            Reference object
            </param>
            <param name="actual">
            Actual object
            </param>
            <param name="indices">
            Index of the property.
            </param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Object[],System.Object[],System.String,System.Object[])">
            <summary>
            Asserts that two objects are not equal. If they are equal
            an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Object[],System.Object[],System.String)">
            <summary>
            Asserts that two objects are not equal. If they are equal
            an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the objects are the same</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Object[],System.Object[])">
            <summary>
            Asserts that two objects are not equal. If they are equal
            an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that two objects are not equal. If they are equal
            an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Object,System.Object,System.String)">
            <summary>
            Asserts that two objects are not equal. If they are equal
            an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the objects are the same</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Object,System.Object)">
            <summary>
            Asserts that two objects are not equal. If they are equal
            an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that two ints are not equal. If they are equal
            an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that two ints are not equal. If they are equal
            an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the objects are the same</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32)">
            <summary>
            Asserts that two ints are not equal. If they are equal
            an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Asserts that two uints are not equal. If they are equal
            an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that two uints are not equal. If they are equal
            an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the objects are the same</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.UInt32,System.UInt32)">
            <summary>
            Asserts that two uints are not equal. If they are equal
            an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Asserts that two decimals are not equal. If they are equal
            an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that two decimals are not equal. If they are equal
            an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the objects are the same</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal)">
            <summary>
            Asserts that two decimals are not equal. If they are equal
            an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Asserts that two floats are not equal. If they are equal
            an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Single,System.Single,System.String)">
            <summary>
            Asserts that two floats are not equal. If they are equal
            an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the objects are the same</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Single,System.Single)">
            <summary>
            Asserts that two floats are not equal. If they are equal
            an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Asserts that two doubles are not equal. If they are equal
            an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Double,System.Double,System.String)">
            <summary>
            Asserts that two doubles are not equal. If they are equal
            an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the objects are the same</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Double,System.Double)">
            <summary>
            Asserts that two doubles are not equal. If they are equal
            an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsNotNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="format">
            The format of the message to display if the assertion fails,
            containing zero or more format items. 
            </param>
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format. 
            </param>
            <remarks>
            <para>
            The error message is formatted using <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsNotNull(System.Object)">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="format">
            The format of the message to display if the assertion fails,
            containing zero or more format items. 
            </param>
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format. 
            </param>
            <remarks>
            <para>
            The error message is formatted using <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsNull(System.Object)">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreSame(System.Object,System.Object,System.String)">
            <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="message">The message to be printed when the two objects are not the same object.</param>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="format">
            The format of the message to display if the assertion fails,
            containing zero or more format items. 
            </param>
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format. 
            </param>
            <remarks>
            <para>
            The error message is formatted using <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.Assert.AreSame(System.Object,System.Object)">
            <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Fail(System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> with the message that is 
            passed in. This is used by the other Assert functions. 
            </summary>
            <param name="format">
            The format of the message to initialize the <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> with. 
            </param>
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format. 
            </param>
            <remarks>
            <para>
            The error message is formatted using <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.Assert.Fail(System.String)">
            <summary>
            Throws an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> with the message that is 
            passed in. This is used by the other Assert functions. 
            </summary>
            <param name="message">The message to initialize the <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> with.</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Fail">
            <summary>
            Throws an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> with the message that is 
            passed in. This is used by the other Assert functions. 
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.Ignore(System.String,System.Object[])">
            <summary>
            Makes the current test ignored using <see cref="M:System.String.Format(System.String,System.Object[])"/> like
            formatting
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Ignore(System.String)">
            <summary>
            Makes the current test ignored using <see cref="M:System.String.Format(System.String,System.Object[])"/> like
            formatting
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int32,System.Int32)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int16,System.Int16)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int16,System.Int16,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int16,System.Int16,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerThan(System.Byte,System.Byte)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerThan(System.Byte,System.Byte,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerThan(System.Byte,System.Byte,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int64,System.Int64)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>        
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>        
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>        
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerThan(System.Double,System.Double)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerThan(System.Double,System.Double,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerThan(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerThan(System.Single,System.Single)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerThan(System.Single,System.Single,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerThan(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerThan(System.IComparable,System.IComparable)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerThan(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerThan(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int32,System.Int32)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int16,System.Int16)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int16,System.Int16,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int16,System.Int16,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Byte,System.Byte)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Byte,System.Byte,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Byte,System.Byte,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int64,System.Int64)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>        
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>        
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>        
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Double,System.Double)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Double,System.Double,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Single,System.Single)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Single,System.Single,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly lower than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.IComparable,System.IComparable)">
            <summary>
            Verifies that <paramref name="left"/> is lower equal than
            <paramref name="right"/>.
            </summary>		
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is lower equal than
            <paramref name="right"/>.
            </summary>		
        </member>
        <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is lower equal than
            <paramref name="right"/>.
            </summary>		
        </member>
        <member name="M:MbUnit.Framework.Assert.Less(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Less(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Less(System.Int32,System.Int32)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Less(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Less(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Less(System.UInt32,System.UInt32)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Less(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Less(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Less(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Less(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Less(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Less(System.Int64,System.Int64)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Less(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Less(System.Double,System.Double,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Less(System.Double,System.Double)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Less(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Less(System.Single,System.Single,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Less(System.Single,System.Single)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Less(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Less(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Less(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int32,System.Int32)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int16,System.Int16)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int16,System.Int16,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int16,System.Int16,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Byte,System.Byte)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Byte,System.Byte,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Byte,System.Byte,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int64,System.Int64)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>        
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>        
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>        
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Double,System.Double)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Double,System.Double,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Single,System.Single)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Single,System.Single,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterThan(System.IComparable,System.IComparable)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>		
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterThan(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>		
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterThan(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>		
        </member>
        <member name="M:MbUnit.Framework.Assert.Greater(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Greater(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Greater(System.Int32,System.Int32)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Greater(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Greater(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Greater(System.UInt32,System.UInt32)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Greater(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Greater(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Greater(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Greater(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Greater(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Greater(System.Int64,System.Int64)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Greater(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Greater(System.Double,System.Double,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Greater(System.Double,System.Double)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Greater(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Greater(System.Single,System.Single,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Greater(System.Single,System.Single)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Greater(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Greater(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.Greater(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:MbUnit.Core.Exceptions.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int32,System.Int32)">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int16,System.Int16)">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int16,System.Int16,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int16,System.Int16,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Byte,System.Byte)">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Byte,System.Byte,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Byte,System.Byte,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int64,System.Int64)">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>        
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>        
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>        
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Double,System.Double)">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Double,System.Double,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Single,System.Single)">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Single,System.Single,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is greater than
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.IComparable,System.IComparable)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>		
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>		
        </member>
        <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that <paramref name="left"/> is strictly greater than
            <paramref name="right"/>.
            </summary>		
        </member>
        <member name="M:MbUnit.Framework.Assert.Between(System.Int32,System.Int32,System.Int32)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.Between(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.Between(System.Int32,System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.Between(System.Int16,System.Int16,System.Int16)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.Between(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.Between(System.Int16,System.Int16,System.Int16,System.String,System.Object[])">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.Between(System.Byte,System.Byte,System.Byte)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.Between(System.Byte,System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.Between(System.Byte,System.Byte,System.Byte,System.String,System.Object[])">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.Between(System.Int64,System.Int64,System.Int64)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.Between(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.Between(System.Int64,System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.Between(System.Double,System.Double,System.Double)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.Between(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.Between(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.Between(System.Single,System.Single,System.Single)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.Between(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.Between(System.Single,System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.Between(System.IComparable,System.IComparable,System.IComparable)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.Between(System.IComparable,System.IComparable,System.IComparable,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.Between(System.IComparable,System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Asserts that <paramref name="test"/> is between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.NotBetween(System.Int32,System.Int32,System.Int32)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.NotBetween(System.Int16,System.Int16,System.Int16)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.NotBetween(System.Byte,System.Byte,System.Byte)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.NotBetween(System.Int64,System.Int64,System.Int64)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.NotBetween(System.Double,System.Double,System.Double)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.NotBetween(System.Single,System.Single,System.Single)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.NotBetween(System.IComparable,System.IComparable,System.IComparable)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Assert.In(System.Object,System.Collections.IDictionary)">
            <summary>
            Asserts that <paramref name="test"/> is in the dic <paramref name="list"/>.
            </summary>    	
        </member>
        <member name="M:MbUnit.Framework.Assert.In(System.Object,System.Collections.IDictionary,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is in the dic <paramref name="list"/>.
            </summary>    	
        </member>
        <member name="M:MbUnit.Framework.Assert.In(System.Object,System.Collections.IList)">
            <summary>
            Asserts that <paramref name="test"/> is in the list <paramref name="list"/>.
            </summary>    	
        </member>
        <member name="M:MbUnit.Framework.Assert.In(System.Object,System.Collections.IList,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is in the list <paramref name="list"/>.
            </summary>    	
        </member>
        <member name="M:MbUnit.Framework.Assert.In(System.Object,System.Collections.IEnumerable,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is in the enumerable collection <paramref name="enumerable"/>.
            </summary>    	
        </member>
        <member name="M:MbUnit.Framework.Assert.In(System.Object,System.Collections.IEnumerable)">
            <summary>
            Asserts that <paramref name="test"/> is in the enumerable collection <paramref name="enumerable"/>.
            </summary>    	
        </member>
        <member name="M:MbUnit.Framework.Assert.NotIn(System.Object,System.Collections.IDictionary,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> in the dic <paramref name="list"/>.
            </summary>    	
        </member>
        <member name="M:MbUnit.Framework.Assert.NotIn(System.Object,System.Collections.IDictionary)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> in the dic <paramref name="list"/>.
            </summary>    	
        </member>
        <member name="M:MbUnit.Framework.Assert.NotIn(System.Object,System.Collections.IList,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> in the list <paramref name="list"/>.
            </summary>    	
        </member>
        <member name="M:MbUnit.Framework.Assert.NotIn(System.Object,System.Collections.IList)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> in the list <paramref name="list"/>.
            </summary>    	
        </member>
        <member name="M:MbUnit.Framework.Assert.NotIn(System.Object,System.Collections.IEnumerable,System.String)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> in the enumerable collection <paramref name="enumerable"/>.
            </summary>    	
        </member>
        <member name="M:MbUnit.Framework.Assert.NotIn(System.Object,System.Collections.IEnumerable)">
            <summary>
            Asserts that <paramref name="test"/> is <strong>not</strong> in the enumerable collection <paramref name="enumerable"/>.
            </summary>    	
        </member>
        <member name="M:MbUnit.Framework.Assert.IsEmpty(System.String,System.String,System.Object[])">
            <summary>
            Assert that a string is empty - that is equal to string.Empty
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsEmpty(System.String,System.String)">
            <summary>
            Assert that a string is empty - that is equal to string.Emtpy
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsEmpty(System.String)">
            <summary>
            Assert that a string is empty - that is equal to string.Emtpy
            </summary>
            <param name="aString">The string to be tested</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsEmpty(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsEmpty(System.Collections.ICollection,System.String)">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsEmpty(System.Collections.ICollection)">
            <summary>
            Assert that an array,list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsNotEmpty(System.String,System.String,System.Object[])">
            <summary>
            Assert that a string is empty - that is equal to string.Emtpy
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsNotEmpty(System.String,System.String)">
            <summary>
            Assert that a string is empty - that is equal to string.Emtpy
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsNotEmpty(System.String)">
            <summary>
            Assert that a string is empty - that is equal to string.Emtpy
            </summary>
            <param name="aString">The string to be tested</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsNotEmpty(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsNotEmpty(System.Collections.ICollection,System.String)">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsNotEmpty(System.Collections.ICollection)">
            <summary>
            Assert that an array,list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsNaN(System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the double is passed is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The value that is to be tested</param>
            <param name="message">The message to be displayed when the object is not null</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsNaN(System.Double,System.String)">
            <summary>
            Verifies that the double is passed is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The object that is to be tested</param>
            <param name="message">The message to be displayed when the object is not null</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsNaN(System.Double)">
            <summary>
            Verifies that the double is passed is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:MbUnit.Core.Exceptions.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The object that is to be tested</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object)">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
            <param name="message">The messge to display in case of failure</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object)">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
            <param name="message">The messge to display in case of failure</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object)">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">A message to display in case of failure</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">A message to display in case of failure</param>
            <param name="args">An array of objects to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object)">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">A message to display in case of failure</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">A message to display in case of failure</param>
            <param name="args">An array of objects to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.Assert.FailNotEquals(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            This method is called when two objects have been compared and found to be
            different. This prints a nice message to the screen. 
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="format">
            The format of the message to display if the assertion fails,
            containing zero or more format items. 
            </param>
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format. 
            </param>
            <remarks>
            <para>
            The error message is formatted using <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.Assert.FailNotSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
             This method is called when the two objects are not the same. 
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="format">
            The format of the message to display if the assertion fails,
            containing zero or more format items. 
            </param>
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format. 
            </param>
            <remarks>
            <para>
            The error message is formatted using <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </para>
            </remarks>
        </member>
        <member name="T:MbUnit.Framework.AuthorAttribute">
            <summary>
            This attribute identifies the author of a test fixture.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='AuthorAttribute']"/>
        </member>
        <member name="T:MbUnit.Framework.CollectionAssert">
            <summary>
            Assertion helper for the <see cref="T:System.Collections.ICollection"/> class.
            </summary>
            <remarks>
            <para>
            This class contains static helper methods to verify assertions on the
            <see cref="T:System.Collections.ICollection"/> class.
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AreSyncRootEqual(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Verifies that the property value <see cref="P:System.Collections.ICollection.SyncRoot"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AreSyncRootEqual(System.Object,System.Collections.ICollection)">
            <summary>
            Verifies that the property value <see cref="P:System.Collections.ICollection.SyncRoot"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.IsSynchronized(System.Collections.ICollection)">
            <summary>
            Verifies that the property value <see cref="P:System.Collections.ICollection.IsSynchronized"/>
            is true.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.IsNotSynchronized(System.Collections.ICollection)">
            <summary>
            Verifies that the property value <see cref="P:System.Collections.ICollection.IsSynchronized"/>
            is false.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AreIsSynchronizedEqual(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Verifies that the property value <see cref="P:System.Collections.ICollection.IsSynchronized"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AreIsSynchronizedEqual(System.Boolean,System.Collections.ICollection)">
            <summary>
            Verifies that the property value <see cref="P:System.Collections.ICollection.IsSynchronized"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AreCountEqual(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Verifies that the property value <see cref="P:System.Collections.ICollection.Count"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AreCountEqual(System.Int32,System.Collections.ICollection)">
            <summary>
            Verifies that the property value <see cref="P:System.Collections.ICollection.Count"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.IsCountCorrect(System.Collections.ICollection)">
            <summary>
            Verifies that the <see cref="P:System.Collections.ICollection.Count"/> property
            is synchronized with the number of iterated elements.
            </summary>
            <param name="col">
            Collection to test
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="col"/> is a null reference (Nothing in Visual Basic)
            </exception>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Verifies that <paramref name="expected"/> and <paramref name="actual"/>
            are equal collections. Element count and element wize equality is verified.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AreElementsEqual(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Verifies that <paramref name="expected"/> and <paramref name="actual"/>
            are equal collections. Element count and element wize equality is verified.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type)">
            <summary>
            Asserts that all items contained in collection are of the type specified by expectedType.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="expectedType">System.Type that all objects in collection must be instances of</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type,System.String)">
            <summary>
            Asserts that all items contained in collection are of the type specified by expectedType.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="expectedType">System.Type that all objects in collection must be instances of</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type,System.String,System.Object[])">
            <summary>
            Asserts that all items contained in collection are of the type specified by expectedType.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="expectedType">System.Type that all objects in collection must be instances of</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection)">
            <summary>
            Asserts that all items contained in collection are not equal to null.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection,System.String)">
            <summary>
            Asserts that all items contained in collection are not equal to null.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Asserts that all items contained in collection are not equal to null.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection)">
            <summary>
            Ensures that every object contained in collection exists within the collection
            once and only once.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection,System.String)">
            <summary>
            Ensures that every object contained in collection exists within the collection
            once and only once.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Ensures that every object contained in collection exists within the collection
            once and only once.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Asserts that expected and actual are not exactly equal.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer)">
            <summary>
            Asserts that expected and actual are not exactly equal.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each ICollection</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Asserts that expected and actual are not exactly equal.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String)">
            <summary>
            Asserts that expected and actual are not exactly equal.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each ICollection</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are not exactly equal.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are not exactly equal.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each ICollection</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Asserts that expected and actual are not equivalent.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Asserts that expected and actual are not equivalent.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are not equivalent.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.Contains(System.Collections.ICollection,System.Object)">
            <summary>
            Asserts that collection contains actual as an item.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="actual">Object to be found within collection</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.Contains(System.Collections.ICollection,System.Object,System.String)">
            <summary>
            Asserts that collection contains actual as an item.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="actual">Object to be found within collection</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.Contains(System.Collections.ICollection,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that collection contains actual as an item.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="actual">Object to be found within collection</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object)">
            <summary>
            Asserts that collection does not contain actual as an item.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="actual">Object that cannot exist within collection</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object,System.String)">
            <summary>
            Asserts that collection does not contain actual as an item.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="actual">Object that cannot exist within collection</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that collection does not contain actual as an item.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="actual">Object that cannot exist within collection</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Asserts that superset is not a subject of subset.
            </summary>
            <param name="subset">The ICollection superset to be considered</param>
            <param name="superset">The ICollection subset to be considered</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Asserts that superset is not a subject of subset.
            </summary>
            <param name="subset">The ICollection superset to be considered</param>
            <param name="superset">The ICollection subset to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Asserts that superset is not a subject of subset.
            </summary>
            <param name="subset">The ICollection superset to be considered</param>
            <param name="superset">The ICollection subset to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Asserts that superset is a subset of subset.
            </summary>
            <param name="subset">The ICollection superset to be considered</param>
            <param name="superset">The ICollection subset to be considered</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Asserts that superset is a subset of subset.
            </summary>
            <param name="subset">The ICollection superset to be considered</param>
            <param name="superset">The ICollection subset to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:MbUnit.Framework.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Asserts that superset is a subset of subset.
            </summary>
            <param name="subset">The ICollection superset to be considered</param>
            <param name="superset">The ICollection subset to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="T:MbUnit.Framework.CollectionIndexingFixtureAttribute">
            <summary>
            Collection indexing pattern.
            </summary>
            <remarks name="CollectionIndexingFixtureAttribute">
<para>
The <see cref="T:MbUnit.Framework.CollectionIndexingFixtureAttribute"/> implements the <b>Collection Indexing Pattern</b>.
</para>
<para>
The user provides filled collection, index type and index range through
the <see cref="T:MbUnit.Framework.IndexerProviderAttribute"/> attribute.
</para>
</remarks>
            <example name="Indexing">
<para>
This example checks the Collection Indexing Pattern for the <see cref="T:System.Collections.ArrayList"/>
and <see cref="T:System.Array"/> collections:
</para>
<code id="ex_indexing" compilable="true"><![CDATA[
[CollectionIndexingFixture]
public class CollectionIndexingFixtureAttributeTest
{		
    [IntIndexerProvider(typeof(ArrayList),100)]
    public ArrayList ProvideArrayList100()
    {
        ArrayList list = new ArrayList();
        for(int i =0;i<100;++i)
            list.Add(i);	 	
		 	
        return list;
    }
		 
    [IntIndexerProvider(typeof(Array),10)]
    public ArrayList ProvideArrayList()
    {
        ArrayList list = new ArrayList();
        for(int i=0;i<10;++i)
            list.Add(i);
		 	
        return list;
    }
}
]]>
</code>
</example>
        </member>
        <member name="T:MbUnit.Core.Framework.TestFixturePatternAttribute">
            <summary>
            Base class for attributes that define test fixtures.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='TestFixturePatternAttribute']"/>		
        </member>
        <member name="T:MbUnit.Core.Framework.PatternAttribute">
            <summary>
            Base class for all attributes that are part of the MbUnit framework.
            </summary>
            <remarks>
            Base class for all attributes of MbUnit.
            </remarks>
        </member>
        <member name="P:MbUnit.Core.Framework.TestFixturePatternAttribute.TimeOut">
            <summary>
            Gets or sets the fixture timeout in minutes.
            </summary>
            <remarks>
            Default value is 5 minutes.
            </remarks>
            <value>
            Time out minutes.
            </value>
        </member>
        <member name="M:MbUnit.Framework.CollectionIndexingFixtureAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MbUnit.Framework.CollectionIndexingFixtureAttribute.#ctor(System.String)">
            <summary>
            Constructor with fixture description
            </summary>		
        </member>
        <member name="M:MbUnit.Framework.CollectionIndexingFixtureAttribute.GetRun">
            <summary>
            Creates the execution logic
            </summary>
            <remarks>
            See summary.
            </remarks>
            <returns>A <see cref="T:MbUnit.Core.Runs.IRun"/> instance that represent the type
            test logic.
            </returns>
            <example name="Indexing">
<para>
This example checks the Collection Indexing Pattern for the <see cref="T:System.Collections.ArrayList"/>
and <see cref="T:System.Array"/> collections:
</para>
<code id="ex_indexing" compilable="true"><![CDATA[
[CollectionIndexingFixture]
public class CollectionIndexingFixtureAttributeTest
{		
    [IntIndexerProvider(typeof(ArrayList),100)]
    public ArrayList ProvideArrayList100()
    {
        ArrayList list = new ArrayList();
        for(int i =0;i<100;++i)
            list.Add(i);	 	
		 	
        return list;
    }
		 
    [IntIndexerProvider(typeof(Array),10)]
    public ArrayList ProvideArrayList()
    {
        ArrayList list = new ArrayList();
        for(int i=0;i<10;++i)
            list.Add(i);
		 	
        return list;
    }
}
]]>
</code>
</example>
        </member>
        <member name="T:MbUnit.Framework.CollectionOrderTest">
            <summary>
            Different collection order
            </summary>
        </member>
        <member name="F:MbUnit.Framework.CollectionOrderTest.OrderedAscending">
            <summary>Tests ascending order collection</summary>
        </member>
        <member name="F:MbUnit.Framework.CollectionOrderTest.OrderedDescending">
            <summary>Tests ascending order collection</summary>
        </member>
        <member name="T:MbUnit.Framework.CollectionOrderFixtureAttribute">
            <summary>
            Collection Order Pattern implementations.
            </summary>
            <remarks name="CollectionSortFixtureAttribute">
<para><em>Implements:</em> Collection Order Pattern</para>
<para><em>Logic:</em>
<code>
{Provider}
[SetUp]
{Fill}
(Order)  // internal
[TearDown]
</code>
</para>
<para>
This fixture tests sorted collections. The user must provider a
comparer and the type of desired test based on the <see cref="T:MbUnit.Framework.CollectionOrderTest"/>
enumeration: ascending, descending.
</para>
<para>
Tested collections are provided by methods tagged with the <see cref="T:MbUnit.Framework.ProviderAttribute"/>
attribute. The collection are then filled using methods tagged by the 
<see cref="T:MbUnit.Framework.FillAttribute"/> attribute. The rest of the tests is handled by the framework.
</para>
<para>
SetUp and TearDown methods can be added to set up the fixtue object.
</para>
</remarks>
        </member>
        <member name="T:MbUnit.Framework.CombinatorialTestAttribute">
            <summary>
            Tag use to mark a mark a unit test method.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='TestAttribute']"/>		
        </member>
        <member name="T:MbUnit.Core.Framework.TestPatternAttribute">
            <summary>
            Base class for attributes that define unit test.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='TestPatternAttribute']"/>		
        </member>
        <member name="T:MbUnit.Framework.CompilerAssert">
            <summary>
            Assertion helper for compilation.
            </summary>
            <remarks>
            <para>
            This class contains static helper methods to verify that snippets are compilable.
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.CompilerAssert.Compiles(System.CodeDom.Compiler.ICodeCompiler,System.String)">
            <summary>
            Verifies that <paramref name="source"/> compiles using the provided compiler.
            </summary>
            <param name="compiler">Compiler instance</param>
            <param name="source">Source code to compile</param>
        </member>
        <member name="M:MbUnit.Framework.CompilerAssert.Compiles(System.CodeDom.Compiler.ICodeCompiler,System.IO.Stream)">
            <summary>
            Verifies that <paramref name="source"/> compiles using the provided compiler.
            </summary>
            <param name="compiler">Compiler instance</param>
            <param name="source">Source code to compile</param>
        </member>
        <member name="M:MbUnit.Framework.CompilerAssert.Compiles(System.CodeDom.Compiler.ICodeCompiler,System.Collections.Specialized.StringCollection,System.String)">
            <summary>
            Verifies that <paramref name="source"/> compiles using the provided compiler.
            </summary>
            <param name="compiler">Compiler instance</param>
            <param name="references">Referenced assemblies</param>
            <param name="source">Source code to compile</param>
        </member>
        <member name="M:MbUnit.Framework.CompilerAssert.Compiles(System.CodeDom.Compiler.ICodeCompiler,System.CodeDom.Compiler.CompilerParameters,System.String)">
            <summary>
            Verifies that <paramref name="source"/> compiles using the provided compiler.
            </summary>
            <param name="compiler">
            <see cref="T:System.CodeDom.Compiler.ICodeCompiler"/> instance.</param>
            <param name="options">Compilation options</param>
            <param name="source">source to compile</param>
        </member>
        <member name="M:MbUnit.Framework.CompilerAssert.Compiles(System.CodeDom.Compiler.ICodeCompiler,System.CodeDom.Compiler.CompilerParameters,System.String,System.Boolean)">
            <summary>
            Verifies that <paramref name="source"/> compiles using the provided compiler.
            </summary>
            <param name="compiler">
            <see cref="T:System.CodeDom.Compiler.ICodeCompiler"/> instance.</param>
            <param name="options">Compilation options</param>
            <param name="source">Source to compile</param>
            <param name="throwOnWarning">
            true if assertion should throw if any warning.
            </param>
        </member>
        <member name="M:MbUnit.Framework.CompilerAssert.Compiles(System.CodeDom.Compiler.ICodeCompiler,System.CodeDom.Compiler.CompilerParameters,System.IO.Stream)">
            <summary>
            Verifies that <paramref name="source"/> compiles using the provided compiler.
            </summary>
            <param name="compiler">
            <see cref="T:System.CodeDom.Compiler.ICodeCompiler"/> instance.</param>
            <param name="options">Compilation options</param>
            <param name="source">Stream containing the source to compile</param>
        </member>
        <member name="M:MbUnit.Framework.CompilerAssert.Compiles(System.CodeDom.Compiler.ICodeCompiler,System.CodeDom.Compiler.CompilerParameters,System.IO.Stream,System.Boolean)">
            <summary>
            Verifies that <paramref name="source"/> compiles using the provided compiler.
            </summary>
            <param name="compiler">
            <see cref="T:System.CodeDom.Compiler.ICodeCompiler"/> instance.</param>
            <param name="options">Compilation options</param>
            <param name="source">Stream containing the source to compile</param>
            <param name="throwOnWarning">
            true if assertion should throw if any warning.
            </param>
        </member>
        <member name="M:MbUnit.Framework.CompilerAssert.NotCompiles(System.CodeDom.Compiler.ICodeCompiler,System.String)">
            <summary>
            Verifies that <paramref name="source"/> does not compile using the provided compiler.
            </summary>
            <param name="compiler">
            <see cref="T:System.CodeDom.Compiler.ICodeCompiler"/> instance.</param>
            <param name="source">Source to compile</param>
        </member>
        <member name="M:MbUnit.Framework.CompilerAssert.NotCompiles(System.CodeDom.Compiler.ICodeCompiler,System.IO.Stream)">
            <summary>
            Verifies that <paramref name="source"/> does not compile using the provided compiler.
            </summary>
            <param name="compiler">
            <see cref="T:System.CodeDom.Compiler.ICodeCompiler"/> instance.</param>
            <param name="source">Source to compile</param>
        </member>
        <member name="M:MbUnit.Framework.CompilerAssert.NotCompiles(System.CodeDom.Compiler.ICodeCompiler,System.Collections.Specialized.StringCollection,System.String)">
            <summary>
            Verifies that <paramref name="source"/> does not compile using the provided compiler.
            </summary>
            <param name="compiler">
            <see cref="T:System.CodeDom.Compiler.ICodeCompiler"/> instance.</param>
            <param name="referencedAssemblies">Collection of referenced assemblies</param>
            <param name="source">Source to compile</param>
        </member>
        <member name="M:MbUnit.Framework.CompilerAssert.NotCompiles(System.CodeDom.Compiler.ICodeCompiler,System.CodeDom.Compiler.CompilerParameters,System.String)">
            <summary>
            Verifies that <paramref name="source"/> does not compile using the provided compiler.
            </summary>
            <param name="compiler">
            <see cref="T:System.CodeDom.Compiler.ICodeCompiler"/> instance.</param>
            <param name="options">Compilation options</param>
            <param name="source">Source to compile</param>
        </member>
        <member name="M:MbUnit.Framework.CompilerAssert.NotCompiles(System.CodeDom.Compiler.ICodeCompiler,System.CodeDom.Compiler.CompilerParameters,System.IO.Stream)">
            <summary>
            Verifies that <paramref name="source"/> does not compile using the provided compiler.
            </summary>
            <param name="compiler">
            <see cref="T:System.CodeDom.Compiler.ICodeCompiler"/> instance.</param>
            <param name="options">Compilation options</param>
            <param name="source">Source to compile</param>
        </member>
        <member name="P:MbUnit.Framework.CompilerAssert.CSharpCompiler">
            <summary>
            Gets the C# compiler from <see cref="T:Microsoft.CSharp.CSharpCodeProvider"/>.
            </summary>
            <value>
            C# compiler.
            </value>
        </member>
        <member name="P:MbUnit.Framework.CompilerAssert.VBCompiler">
            <summary>
            Gets the VB.NET compiler from <see cref="T:Microsoft.VisualBasic.VBCodeProvider"/>.
            </summary>
            <value>
            VB.NET compiler.
            </value>
        </member>
        <member name="T:MbUnit.Core.Runs.Run">
            <summary>
            </summary>
        </member>
        <member name="T:MbUnit.Core.Runs.IRun">
            <summary>
            This interface defines a type of test/non test run that is used
            to define the <see cref="T:MbUnit.Core.Framework.TestFixturePatternAttribute"/> logic.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Runs.IRun.Reflect(MbUnit.Core.Invokers.RunInvokerTree,MbUnit.Core.Invokers.RunInvokerVertex,System.Type)">
            <summary>
            Populates the <see cref="T:MbUnit.Core.Invokers.RunInvokerTree"/> invoker graph
            with <see cref="T:MbUnit.Core.Invokers.IRunInvoker"/> generated by the run.
            </summary>
            <param name="tree">Invoker tree</param>
            <param name="parent">parent vertex</param>
            <param name="t">class type that is marked by the run</param>
            <remarks>
            </remarks>
        </member>
        <member name="P:MbUnit.Core.Runs.IRun.Name">
            <summary>
            Gets a descriptive name of the <see cref="T:MbUnit.Core.Runs.IRun"/>
            </summary>
            <value>
            A descriptive name of the <see cref="T:MbUnit.Core.Runs.IRun"/>
            </value>
        </member>
        <member name="P:MbUnit.Core.Runs.IRun.IsTest">
            <summary>
            Gets a value indicating the run is considered as a test or not.
            </summary>
            <value>
            true if the <see cref="T:MbUnit.Core.Runs.IRun"/> instance is a test
            </value>		
        </member>
        <member name="M:MbUnit.Core.Runs.Run.Reflect(MbUnit.Core.Invokers.RunInvokerTree,MbUnit.Core.Invokers.RunInvokerVertex,System.Type)">
            <summary>
            Populates the <see cref="T:MbUnit.Core.Invokers.RunInvokerTree"/> invoker graph
            with <see cref="T:MbUnit.Core.Invokers.IRunInvoker"/> generated by the run.
            </summary>
            <param name="tree">Invoker tree</param>
            <param name="parent">parent vertex</param>
            <param name="t">class type that is marked by the run</param>
            <remarks>
            TODO
            </remarks>
        </member>
        <member name="P:MbUnit.Core.Runs.Run.Name">
            <summary>
            Gets a descriptive name of the <see cref="T:MbUnit.Core.Runs.IRun"/>
            </summary>
            <value>
            A descriptive name of the <see cref="T:MbUnit.Core.Runs.IRun"/>
            </value>
        </member>
        <member name="P:MbUnit.Core.Runs.Run.IsTest">
            <summary>
            Gets a value indicating the run is considered as a test or not.
            </summary>
            <value>
            true if the <see cref="T:MbUnit.Core.Runs.IRun"/> instance is a test
            </value>		
        </member>
        <member name="T:MbUnit.Framework.CompositeFixtureAttribute">
            <summary>
            Composite fixture pattern implementation.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.doc.xml" path="doc/remarkss/remarks[@name='CompositeFixtureAttribute']"/>
        </member>
        <member name="M:MbUnit.Framework.CompositeFixtureAttribute.#ctor(System.Type)">
            <summary>
            Creates a fixture for the <paramref name="fixtureType"/> type.
            </summary>
            <remarks>
            Initializes the attribute with <paramref name="fixtureType"/>.
            </remarks>
            <param name="fixtureType">type to apply the fixture to</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fixtureType"/>
            is a null reference</exception>
        </member>
        <member name="M:MbUnit.Framework.CompositeFixtureAttribute.#ctor(System.Type,System.String)">
            <summary>
            Creates a fixture for the <paramref name="fixtureType"/> type 
            and a description
            </summary>
            <remarks>
            Initializes the attribute with <paramref name="fixtureType"/>.
            </remarks>
            <param name="fixtureType">type to apply the fixture to</param>
            <param name="description">description of the fixture</param>
            <exception cref="T:System.ArgumentNullException">fixtureType is a null reference</exception>
        </member>
        <member name="M:MbUnit.Framework.CompositeFixtureAttribute.GetRun">
            <summary>
            Creates the execution logic
            </summary>
            <remarks>
            See summary.
            </remarks>
            <returns>A <see cref="T:MbUnit.Core.Runs.IRun"/> instance that represent the type
            test logic.
            </returns>
        </member>
        <member name="P:MbUnit.Framework.CompositeFixtureAttribute.FixtureType">
            <summary>
            Gets or sets the fixture type.
            </summary>
            <value>
            Fixture instance type.
            </value>
        </member>
        <member name="T:MbUnit.Core.Invokers.IRunInvoker">
            <summary>
            This interface defines a method invoker object.
            </summary>
            <remarks name="IRunInvoker">
<para>
When processing the test fixture, the tests are splitted down to a 
tree <see cref="T:MbUnit.Core.Invokers.IRunInvoker"/> instance where each <see cref="T:MbUnit.Core.Invokers.IRunInvoker"/> denotes
the invokation of a fixture method, or a special processing of the fixture methods.
</para>
<para>
The <see cref="T:MbUnit.Framework.TestFixtureAttribute"/> derived fixture define their logic by returning
an <see cref="T:MbUnit.Core.Runs.IRun"/> instance. This <see cref="T:MbUnit.Core.Runs.IRun"/> instance is the generator
for <see cref="T:MbUnit.Core.Invokers.IRunInvoker"/> instances.
</para>
</remarks>
        </member>
        <member name="M:MbUnit.Core.Invokers.IRunInvoker.Execute(System.Object,System.Collections.IList)">
            <summary>
            Executes the wrapped method
            </summary>
            <param name="o">
            Test fixture instance
            </param>
            <param name="args">
            Method arguments
            </param>
            <returns>
            Return value of the invoked method. If the method returns void, null
            is returned.
            </returns>
        </member>
        <member name="M:MbUnit.Core.Invokers.IRunInvoker.ContainsMemberInfo(System.Reflection.MemberInfo)">
            <summary>
            Gets a value indicating if the instance is related to
            <paramref name="memberInfo"/>
            </summary>
            <param name="memberInfo">
            A <see cref="T:System.Reflection.MethodInfo"/> instance
            </param>
            <returns>
            true if the instance is related to the member info;
            otherwize false</returns>
        </member>
        <member name="P:MbUnit.Core.Invokers.IRunInvoker.Name">
            <summary>
            Gets a descriptive name of the <see cref="T:MbUnit.Core.Invokers.IRunInvoker"/>
            </summary>
            <value>
            A descriptive name of the <see cref="T:MbUnit.Core.Invokers.IRunInvoker"/>.
            </value>		
        </member>
        <member name="P:MbUnit.Core.Invokers.IRunInvoker.Generator">
            <summary>
            Gets a reference to the <see cref="T:MbUnit.Core.Runs.IRun"/> instance that generated
            the invoker.
            </summary>
            <value>
            Reference to the <see cref="T:MbUnit.Core.Runs.IRun"/> instance that generated
            the invoker.
            </value>
        </member>
        <member name="T:MbUnit.Framework.ConditionalExceptionAttribute">
            <summary>
            Tags method that should throw an exception if a predicate is true.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.ExpectedExceptionAttribute">
            <summary>
            Tags method that should throw an exception.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='ExpectedExceptionAttribute']"/>	
        </member>
        <member name="T:MbUnit.Core.Framework.DecoratorPatternAttribute">
            <summary>
            This is the base class for attributes that can decorate tests.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='DecoratorPatternAttribute']"/>	
        </member>
        <member name="T:MbUnit.Framework.ControlAssert">
            <summary>
            Assertion helper for the <see cref="T:System.Windows.Forms.Control"/> class.
            </summary>
            <remarks>
            <para>
            This class contains static helper methods to verify assertions on the
            <see cref="T:System.Windows.Forms.Control"/> class.
            </para>
            <para>
            This class was automatically generated. Do not edit (or edit the template).
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreAccessibleDefaultActionDescriptionEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreAccessibleDefaultActionDescriptionEqual(System.String,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreAccessibleDescriptionEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.AccessibleDescription"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreAccessibleDescriptionEqual(System.String,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.AccessibleDescription"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreAccessibleNameEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.AccessibleName"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreAccessibleNameEqual(System.String,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.AccessibleName"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreAccessibleRoleEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.AccessibleRole"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreAccessibleRoleEqual(System.Windows.Forms.AccessibleRole,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.AccessibleRole"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AllowDrop(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.AllowDrop"/>
            is true.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.NotAllowDrop(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.AllowDrop"/>
            is false.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreAllowDropEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.AllowDrop"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreAllowDropEqual(System.Boolean,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.AllowDrop"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreAnchorEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Anchor"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreAnchorEqual(System.Windows.Forms.AnchorStyles,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Anchor"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreBackColorEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.BackColor"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreBackColorEqual(System.Drawing.Color,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.BackColor"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreBackgroundImageEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.BackgroundImage"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreBackgroundImageEqual(System.Drawing.Image,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.BackgroundImage"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreDataBindingsEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.DataBindings"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreDataBindingsEqual(System.Windows.Forms.ControlBindingsCollection,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.DataBindings"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreBindingContextEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.BindingContext"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreBindingContextEqual(System.Windows.Forms.BindingContext,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.BindingContext"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreBottomEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Bottom"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreBottomEqual(System.Int32,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Bottom"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreBoundsEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Bounds"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreBoundsEqual(System.Drawing.Rectangle,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Bounds"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.CanFocus(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.CanFocus"/>
            is true.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.NotCanFocus(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.CanFocus"/>
            is false.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreCanFocusEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.CanFocus"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreCanFocusEqual(System.Boolean,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.CanFocus"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.CanSelect(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.CanSelect"/>
            is true.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.NotCanSelect(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.CanSelect"/>
            is false.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreCanSelectEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.CanSelect"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreCanSelectEqual(System.Boolean,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.CanSelect"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.Capture(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Capture"/>
            is true.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.NotCapture(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Capture"/>
            is false.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreCaptureEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Capture"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreCaptureEqual(System.Boolean,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Capture"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.CausesValidation(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.CausesValidation"/>
            is true.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.NotCausesValidation(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.CausesValidation"/>
            is false.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreCausesValidationEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.CausesValidation"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreCausesValidationEqual(System.Boolean,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.CausesValidation"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreClientRectangleEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.ClientRectangle"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreClientRectangleEqual(System.Drawing.Rectangle,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.ClientRectangle"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreClientSizeEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.ClientSize"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreClientSizeEqual(System.Drawing.Size,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.ClientSize"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreCompanyNameEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.CompanyName"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreCompanyNameEqual(System.String,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.CompanyName"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.ContainsFocus(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.ContainsFocus"/>
            is true.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.NotContainsFocus(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.ContainsFocus"/>
            is false.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreContainsFocusEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.ContainsFocus"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreContainsFocusEqual(System.Boolean,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.ContainsFocus"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreContextMenuEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.ContextMenu"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreContextMenuEqual(System.Windows.Forms.ContextMenu,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.ContextMenu"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreControlsEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Controls"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreControlsEqual(System.Windows.Forms.Control.ControlCollection,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Controls"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.Created(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Created"/>
            is true.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.NotCreated(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Created"/>
            is false.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreCreatedEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Created"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreCreatedEqual(System.Boolean,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Created"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreCursorEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Cursor"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreCursorEqual(System.Windows.Forms.Cursor,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Cursor"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreDisplayRectangleEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.DisplayRectangle"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreDisplayRectangleEqual(System.Drawing.Rectangle,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.DisplayRectangle"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.IsDisposed(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.IsDisposed"/>
            is true.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.IsNotisposed(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.IsDisposed"/>
            is false.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreIsDisposedEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.IsDisposed"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreIsDisposedEqual(System.Boolean,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.IsDisposed"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.Disposing(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Disposing"/>
            is true.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.NotDisposing(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Disposing"/>
            is false.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreDisposingEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Disposing"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreDisposingEqual(System.Boolean,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Disposing"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreDockEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Dock"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreDockEqual(System.Windows.Forms.DockStyle,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Dock"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.Enabled(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Enabled"/>
            is true.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.NotEnabled(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Enabled"/>
            is false.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreEnabledEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Enabled"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreEnabledEqual(System.Boolean,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Enabled"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.Focused(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Focused"/>
            is true.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.NotFocused(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Focused"/>
            is false.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreFocusedEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Focused"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreFocusedEqual(System.Boolean,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Focused"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreFontEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Font"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreFontEqual(System.Drawing.Font,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Font"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreForeColorEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.ForeColor"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreForeColorEqual(System.Drawing.Color,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.ForeColor"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreHandleEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Handle"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreHandleEqual(System.IntPtr,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Handle"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.HasChildren(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.HasChildren"/>
            is true.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.NotHasChildren(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.HasChildren"/>
            is false.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreHasChildrenEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.HasChildren"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreHasChildrenEqual(System.Boolean,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.HasChildren"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreHeightEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Height"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreHeightEqual(System.Int32,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Height"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.IsHandleCreated(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.IsHandleCreated"/>
            is true.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.IsNotandleCreated(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.IsHandleCreated"/>
            is false.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreIsHandleCreatedEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.IsHandleCreated"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreIsHandleCreatedEqual(System.Boolean,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.IsHandleCreated"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreImeModeEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.ImeMode"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreImeModeEqual(System.Windows.Forms.ImeMode,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.ImeMode"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.InvokeRequired(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.InvokeRequired"/>
            is true.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.NotInvokeRequired(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.InvokeRequired"/>
            is false.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreInvokeRequiredEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.InvokeRequired"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreInvokeRequiredEqual(System.Boolean,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.InvokeRequired"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.IsAccessible(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.IsAccessible"/>
            is true.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.IsNotccessible(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.IsAccessible"/>
            is false.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreIsAccessibleEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.IsAccessible"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreIsAccessibleEqual(System.Boolean,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.IsAccessible"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreLeftEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Left"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreLeftEqual(System.Int32,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Left"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreLocationEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Location"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreLocationEqual(System.Drawing.Point,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Location"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreNameEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Name"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreNameEqual(System.String,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Name"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreParentEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Parent"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreProductNameEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.ProductName"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreProductNameEqual(System.String,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.ProductName"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreProductVersionEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.ProductVersion"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreProductVersionEqual(System.String,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.ProductVersion"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.RecreatingHandle(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.RecreatingHandle"/>
            is true.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.NotRecreatingHandle(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.RecreatingHandle"/>
            is false.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreRecreatingHandleEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.RecreatingHandle"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreRecreatingHandleEqual(System.Boolean,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.RecreatingHandle"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreRegionEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Region"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreRegionEqual(System.Drawing.Region,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Region"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreRightEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Right"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreRightEqual(System.Int32,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Right"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreRightToLeftEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.RightToLeft"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreRightToLeftEqual(System.Windows.Forms.RightToLeft,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.RightToLeft"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreSiteEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Site"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreSiteEqual(System.ComponentModel.ISite,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Site"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreSizeEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Size"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreSizeEqual(System.Drawing.Size,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Size"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreTabIndexEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.TabIndex"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreTabIndexEqual(System.Int32,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.TabIndex"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.TabStop(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.TabStop"/>
            is true.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.NotTabStop(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.TabStop"/>
            is false.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreTabStopEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.TabStop"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreTabStopEqual(System.Boolean,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.TabStop"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreTagEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Tag"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreTagEqual(System.Object,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Tag"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreTextEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Text"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreTextEqual(System.String,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Text"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreTopEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Top"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreTopEqual(System.Int32,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Top"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreTopLevelControlEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.TopLevelControl"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.Visible(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Visible"/>
            is true.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.NotVisible(System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Visible"/>
            is false.
            </summary>
            <param name="actual">
            Instance containing the expected value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreVisibleEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Visible"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreVisibleEqual(System.Boolean,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Visible"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreWidthEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Width"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreWidthEqual(System.Int32,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.Width"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreWindowTargetEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.WindowTarget"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreWindowTargetEqual(System.Windows.Forms.IWindowTarget,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.Windows.Forms.Control.WindowTarget"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreContainerEqual(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.ComponentModel.Component.Container"/>
            of <paramref name="expected"/> and <paramref name="actual"/> are equal.
            </summary>
            <param name="expected">
            Instance containing the expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ControlAssert.AreContainerEqual(System.ComponentModel.IContainer,System.Windows.Forms.Control)">
            <summary>
            Verifies that the property value <see cref="P:System.ComponentModel.Component.Container"/>
            of <paramref name="actual"/> is equal to <paramref name="expected"/>.
            </summary>
            <param name="expected">
            Expected value.
            </param>
            <param name="actual">
            Instance containing the tested value.
            </param>
        </member>
        <member name="T:MbUnit.Framework.CopyToProviderAttribute">
            <summary>
            Tags method that provider a new object and copy the content of the arguments
            into the object
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='CopyToProviderAttribute']"/>
        </member>
        <member name="T:MbUnit.Framework.ProviderAttribute">
            <summary>
            Tags method that provide new object to be used in the following tests.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='ProviderAttribute']"/>
        </member>
        <member name="M:MbUnit.Framework.ProviderAttribute.#ctor(System.Type)">
            <summary>
            Constructs a provider attribute for the <paramref name="providerType"/>
            type.
            </summary>
            <param name="providerType">provider type</param>
        </member>
        <member name="M:MbUnit.Framework.ProviderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Constructs a provider attribute for the <paramref name="providerType"/>
            type.
            </summary>
            <param name="providerType">provider type</param>
            <param name="description">description of the provider</param>
        </member>
        <member name="P:MbUnit.Framework.ProviderAttribute.ProviderType">
            <summary>
            Gets or sets the provided type
            </summary>
            <value>
            Provided type.
            </value>
        </member>
        <member name="T:MbUnit.Core.AssemblyEventArgs">
            <summary>
            Event argument that contains an assembly.
            </summary>
        </member>
        <member name="M:MbUnit.Core.AssemblyEventArgs.#ctor(System.Reflection.Assembly)">
            <summary>
            Creates a new <see cref="T:MbUnit.Core.AssemblyEventArgs"/> event argument.
            </summary>
        </member>
        <member name="T:MbUnit.Core.AssemblyEventHandler">
            <summary>Assembly event delegate</summary>
        </member>
        <member name="T:MbUnit.Core.Collections.AssemblyCollection">
            <summary>
            A collection of elements of type Assembly
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.AssemblyCollection.#ctor">
            <summary>
            Initializes a new empty instance of the AssemblyCollection class.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.AssemblyCollection.Add(System.Reflection.Assembly)">
            <summary>
            Adds an instance of type Assembly to the end of this AssemblyCollection.
            </summary>
            <param name="value">
            The Assembly to be added to the end of this AssemblyCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.AssemblyCollection.Contains(System.Reflection.Assembly)">
            <summary>
            Determines whether a specfic Assembly value is in this AssemblyCollection.
            </summary>
            <param name="value">
            The Assembly value to locate in this AssemblyCollection.
            </param>
            <returns>
            true if value is found in this AssemblyCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:MbUnit.Core.Collections.AssemblyCollection.Remove(System.Reflection.Assembly)">
            <summary>
            Removes the first occurrence of a specific Assembly from this AssemblyCollection.
            </summary>
            <param name="value">
            The Assembly value to remove from this AssemblyCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.AssemblyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this AssemblyCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:MbUnit.Core.Collections.AssemblyCollection.Item(System.Int32)">
            <summary>
            Gets or sets the Assembly at the given index in this AssemblyCollection.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Collections.AssemblyCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by AssemblyCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Collections.AssemblyFixtureCollectionDictionary">
            <summary>
            A dictionary with keys of type Assembly and values of type TypeCollection
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.AssemblyFixtureCollectionDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the AssemblyTypeCollectionDictionary class
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.AssemblyFixtureCollectionDictionary.Add(System.Reflection.Assembly)">
            <summary>
            Adds an element with the specified key and value to this AssemblyTypeCollectionDictionary.
            </summary>
            <param name="key">
            The Assembly key of the element to add.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.AssemblyFixtureCollectionDictionary.Contains(System.Reflection.Assembly)">
            <summary>
            Determines whether this AssemblyTypeCollectionDictionary contains a specific key.
            </summary>
            <param name="key">
            The Assembly key to locate in this AssemblyTypeCollectionDictionary.
            </param>
            <returns>
            true if this AssemblyTypeCollectionDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:MbUnit.Core.Collections.AssemblyFixtureCollectionDictionary.Remove(System.Reflection.Assembly)">
            <summary>
            Removes the element with the specified key from this AssemblyTypeCollectionDictionary.
            </summary>
            <param name="key">
            The Assembly key of the element to remove.
            </param>
        </member>
        <member name="P:MbUnit.Core.Collections.AssemblyFixtureCollectionDictionary.Item(System.Reflection.Assembly)">
            <summary>
            Gets or sets the TypeCollection associated with the given Assembly
            </summary>
            <param name="key">
            The Assembly whose value to get or set.
            </param>
        </member>
        <member name="P:MbUnit.Core.Collections.AssemblyFixtureCollectionDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this AssemblyTypeCollectionDictionary.
            </summary>
        </member>
        <member name="P:MbUnit.Core.Collections.AssemblyFixtureCollectionDictionary.Values">
            <summary>
            Gets a collection containing the values in this AssemblyTypeCollectionDictionary.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Collections.AttributedMethodCollection">
            <summary>
            Summary description for AttributedMethodCollection.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Collections.AttributedMethodEnumerator">
            <summary>
            Summary description for AttributedMethodEnumerator.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Collections.AttributedPropertyCollection">
            <summary>
            Summary description for AttributedMethodCollection.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Collections.AttributedPropertyEnumerator">
            <summary>
            Summary description for AttributedPropertyEnumerator.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.FixtureCollection.#ctor">
            <summary>
            Initializes a new empty instance of the FixtureCollection class.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.FixtureCollection.Add(MbUnit.Core.Fixture)">
            <summary>
            Adds an instance of type Fixture to the end of this FixtureCollection.
            </summary>
            <param name="value">
            The Fixture to be added to the end of this FixtureCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.FixtureCollection.Contains(MbUnit.Core.Fixture)">
            <summary>
            Determines whether a specfic Fixture value is in this FixtureCollection.
            </summary>
            <param name="value">
            The Fixture value to locate in this FixtureCollection.
            </param>
            <returns>
            true if value is found in this FixtureCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:MbUnit.Core.Collections.FixtureCollection.Remove(MbUnit.Core.Fixture)">
            <summary>
            Removes the first occurrence of a specific Fixture from this FixtureCollection.
            </summary>
            <param name="value">
            The Fixture value to remove from this FixtureCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.FixtureCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this FixtureCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="T:MbUnit.Core.Collections.FixtureCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by FixtureCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Collections.FixtureFactoryCollection">
            <summary>
            A collection of elements of type IFixtureFactory
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.FixtureFactoryCollection.#ctor">
            <summary>
            Initializes a new empty instance of the FixtureFactoryCollection class.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.FixtureFactoryCollection.Add(MbUnit.Core.IFixtureFactory)">
            <summary>
            Adds an instance of type IFixtureFactory to the end of this FixtureFactoryCollection.
            </summary>
            <param name="value">
            The IFixtureFactory to be added to the end of this FixtureFactoryCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.FixtureFactoryCollection.Contains(MbUnit.Core.IFixtureFactory)">
            <summary>
            Determines whether a specfic IFixtureFactory value is in this FixtureFactoryCollection.
            </summary>
            <param name="value">
            The IFixtureFactory value to locate in this FixtureFactoryCollection.
            </param>
            <returns>
            true if value is found in this FixtureFactoryCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:MbUnit.Core.Collections.FixtureFactoryCollection.Remove(MbUnit.Core.IFixtureFactory)">
            <summary>
            Removes the first occurrence of a specific IFixtureFactory from this FixtureFactoryCollection.
            </summary>
            <param name="value">
            The IFixtureFactory value to remove from this FixtureFactoryCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.FixtureFactoryCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this FixtureFactoryCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="T:MbUnit.Core.Collections.FixtureFactoryCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by FixtureFactoryCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Collections.RunCollection">
            <summary>
            A collection of elements of type IRun
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.RunCollection.#ctor">
            <summary>
            Initializes a new empty instance of the RunCollection class.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.RunCollection.Add(MbUnit.Core.Runs.IRun)">
            <summary>
            Adds an instance of type IRun to the end of this RunCollection.
            </summary>
            <param name="value">
            The IRun to be added to the end of this RunCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.RunCollection.Contains(MbUnit.Core.Runs.IRun)">
            <summary>
            Determines whether a specfic IRun value is in this RunCollection.
            </summary>
            <param name="value">
            The IRun value to locate in this RunCollection.
            </param>
            <returns>
            true if value is found in this RunCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:MbUnit.Core.Collections.RunCollection.Remove(MbUnit.Core.Runs.IRun)">
            <summary>
            Removes the first occurrence of a specific IRun from this RunCollection.
            </summary>
            <param name="value">
            The IRun value to remove from this RunCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.RunCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this RunCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:MbUnit.Core.Collections.RunCollection.Item(System.Int32)">
            <summary>
            Gets or sets the IRun at the given index in this RunCollection.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Collections.RunCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by RunCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Collections.RunInvokerCollection">
            <summary>
            A collection of elements of type IRunInvoker
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.RunInvokerCollection.#ctor">
            <summary>
            Initializes a new empty instance of the IRunInvokerCollection class.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.RunInvokerCollection.Add(MbUnit.Core.Invokers.IRunInvoker)">
            <summary>
            Adds an instance of type IRunInvoker to the end of this IRunInvokerCollection.
            </summary>
            <param name="value">
            The IRunInvoker to be added to the end of this IRunInvokerCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.RunInvokerCollection.Contains(MbUnit.Core.Invokers.IRunInvoker)">
            <summary>
            Determines whether a specfic IRunInvoker value is in this IRunInvokerCollection.
            </summary>
            <param name="value">
            The IRunInvoker value to locate in this IRunInvokerCollection.
            </param>
            <returns>
            true if value is found in this IRunInvokerCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:MbUnit.Core.Collections.RunInvokerCollection.Remove(MbUnit.Core.Invokers.IRunInvoker)">
            <summary>
            Removes the first occurrence of a specific IRunInvoker from this IRunInvokerCollection.
            </summary>
            <param name="value">
            The IRunInvoker value to remove from this IRunInvokerCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.RunInvokerCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this IRunInvokerCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:MbUnit.Core.Collections.RunInvokerCollection.Item(System.Int32)">
            <summary>
            Gets or sets the IRunInvoker at the given index in this IRunInvokerCollection.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Collections.RunInvokerCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by IRunInvokerCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Collections.RunInvokerVertexCollection">
            <summary>
            A collection of elements of type RunInvokerVertex
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.RunInvokerVertexCollection.#ctor">
            <summary>
            Initializes a new empty instance of the RunInvokerVertexCollection class.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.RunInvokerVertexCollection.Add(MbUnit.Core.Invokers.RunInvokerVertex)">
            <summary>
            Adds an instance of type RunInvokerVertex to the end of this RunInvokerVertexCollection.
            </summary>
            <param name="value">
            The RunInvokerVertex to be added to the end of this RunInvokerVertexCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.RunInvokerVertexCollection.Contains(MbUnit.Core.Invokers.RunInvokerVertex)">
            <summary>
            Determines whether a specfic RunInvokerVertex value is in this RunInvokerVertexCollection.
            </summary>
            <param name="value">
            The RunInvokerVertex value to locate in this RunInvokerVertexCollection.
            </param>
            <returns>
            true if value is found in this RunInvokerVertexCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:MbUnit.Core.Collections.RunInvokerVertexCollection.Remove(MbUnit.Core.Invokers.RunInvokerVertex)">
            <summary>
            Removes the first occurrence of a specific RunInvokerVertex from this RunInvokerVertexCollection.
            </summary>
            <param name="value">
            The RunInvokerVertex value to remove from this RunInvokerVertexCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.RunInvokerVertexCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this RunInvokerVertexCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:MbUnit.Core.Collections.RunInvokerVertexCollection.Item(System.Int32)">
            <summary>
            Gets or sets the RunInvokerVertex at the given index in this RunInvokerVertexCollection.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Collections.RunInvokerVertexCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by RunInvokerVertexCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Collections.RunInvokerVertexCollectionCollection">
            <summary>
            A collection of elements of type RunInvokerVertexCollection
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.RunInvokerVertexCollectionCollection.#ctor">
            <summary>
            Initializes a new empty instance of the RunInvokerVertexCollectionCollection class.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.RunInvokerVertexCollectionCollection.Add(MbUnit.Core.Collections.RunInvokerVertexCollection)">
            <summary>
            Adds an instance of type RunInvokerVertexCollection to the end of this RunInvokerVertexCollectionCollection.
            </summary>
            <param name="value">
            The RunInvokerVertexCollection to be added to the end of this RunInvokerVertexCollectionCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.RunInvokerVertexCollectionCollection.Contains(MbUnit.Core.Collections.RunInvokerVertexCollection)">
            <summary>
            Determines whether a specfic RunInvokerVertexCollection value is in this RunInvokerVertexCollectionCollection.
            </summary>
            <param name="value">
            The RunInvokerVertexCollection value to locate in this RunInvokerVertexCollectionCollection.
            </param>
            <returns>
            true if value is found in this RunInvokerVertexCollectionCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:MbUnit.Core.Collections.RunInvokerVertexCollectionCollection.Remove(MbUnit.Core.Collections.RunInvokerVertexCollection)">
            <summary>
            Removes the first occurrence of a specific RunInvokerVertexCollection from this RunInvokerVertexCollectionCollection.
            </summary>
            <param name="value">
            The RunInvokerVertexCollection value to remove from this RunInvokerVertexCollectionCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.RunInvokerVertexCollectionCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this RunInvokerVertexCollectionCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:MbUnit.Core.Collections.RunInvokerVertexCollectionCollection.Item(System.Int32)">
            <summary>
            Gets or sets the RunInvokerVertexCollection at the given index in this RunInvokerVertexCollectionCollection.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Collections.RunInvokerVertexCollectionCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by RunInvokerVertexCollectionCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Collections.RunPipeCollection">
            <summary>
            A collection of elements of type RunPipe
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.RunPipeCollection.#ctor">
            <summary>
            Initializes a new empty instance of the RunPipeCollection class.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.RunPipeCollection.Add(MbUnit.Core.RunPipe)">
            <summary>
            Adds an instance of type RunPipe to the end of this RunPipeCollection.
            </summary>
            <param name="value">
            The RunPipe to be added to the end of this RunPipeCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.RunPipeCollection.Contains(MbUnit.Core.RunPipe)">
            <summary>
            Determines whether a specfic RunPipe value is in this RunPipeCollection.
            </summary>
            <param name="value">
            The RunPipe value to locate in this RunPipeCollection.
            </param>
            <returns>
            true if value is found in this RunPipeCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:MbUnit.Core.Collections.RunPipeCollection.Remove(MbUnit.Core.RunPipe)">
            <summary>
            Removes the first occurrence of a specific RunPipe from this RunPipeCollection.
            </summary>
            <param name="value">
            The RunPipe value to remove from this RunPipeCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.RunPipeCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this RunPipeCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:MbUnit.Core.Collections.RunPipeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the RunPipe at the given index in this RunPipeCollection.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Collections.RunPipeCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by RunPipeCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Collections.RunPipeListenerCollection">
            <summary>
            A collection of elements of type IRunPipeListener
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.RunPipeListenerCollection.#ctor">
            <summary>
            Initializes a new empty instance of the RunPipeListenerCollection class.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.RunPipeListenerCollection.Add(MbUnit.Core.IRunPipeListener)">
            <summary>
            Adds an instance of type IRunPipeListener to the end of this RunPipeListenerCollection.
            </summary>
            <param name="value">
            The IRunPipeListener to be added to the end of this RunPipeListenerCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.RunPipeListenerCollection.Contains(MbUnit.Core.IRunPipeListener)">
            <summary>
            Determines whether a specfic IRunPipeListener value is in this RunPipeListenerCollection.
            </summary>
            <param name="value">
            The IRunPipeListener value to locate in this RunPipeListenerCollection.
            </param>
            <returns>
            true if value is found in this RunPipeListenerCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:MbUnit.Core.Collections.RunPipeListenerCollection.Remove(MbUnit.Core.IRunPipeListener)">
            <summary>
            Removes the first occurrence of a specific IRunPipeListener from this RunPipeListenerCollection.
            </summary>
            <param name="value">
            The IRunPipeListener value to remove from this RunPipeListenerCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.RunPipeListenerCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this RunPipeListenerCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="T:MbUnit.Core.Collections.RunPipeListenerCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by RunPipeListenerCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Collections.RunPipeStarterCollection">
            <summary>
            A collection of elements of type RunPipeStarter
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.RunPipeStarterCollection.#ctor(MbUnit.Core.Fixture)">
            <summary>
            Initializes a new empty instance of the RunPipeStarterCollection class.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.RunPipeStarterCollection.Add(MbUnit.Core.RunPipeStarter)">
            <summary>
            Adds an instance of type RunPipeStarter to the end of this RunPipeStarterCollection.
            </summary>
            <param name="value">
            The RunPipeStarter to be added to the end of this RunPipeStarterCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.RunPipeStarterCollection.Contains(MbUnit.Core.RunPipeStarter)">
            <summary>
            Determines whether a specfic RunPipeStarter value is in this RunPipeStarterCollection.
            </summary>
            <param name="value">
            The RunPipeStarter value to locate in this RunPipeStarterCollection.
            </param>
            <returns>
            true if value is found in this RunPipeStarterCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:MbUnit.Core.Collections.RunPipeStarterCollection.Remove(MbUnit.Core.RunPipeStarter)">
            <summary>
            Removes the first occurrence of a specific RunPipeStarter from this RunPipeStarterCollection.
            </summary>
            <param name="value">
            The RunPipeStarter value to remove from this RunPipeStarterCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.RunPipeStarterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this RunPipeStarterCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="T:MbUnit.Core.Collections.RunPipeStarterCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by RunPipeStarterCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Collections.RunVertexDictionary">
            <summary>
            A dictionary with keys of type IRun and values of type RunVertex
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.RunVertexDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the RunVertexDictionary class
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.RunVertexDictionary.Add(MbUnit.Core.Runs.IRun,MbUnit.Core.Runs.RunVertex)">
            <summary>
            Adds an element with the specified key and value to this RunVertexDictionary.
            </summary>
            <param name="key">
            The IRun key of the element to add.
            </param>
            <param name="value">
            The RunVertex value of the element to add.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.RunVertexDictionary.Contains(MbUnit.Core.Runs.IRun)">
            <summary>
            Determines whether this RunVertexDictionary contains a specific key.
            </summary>
            <param name="key">
            The IRun key to locate in this RunVertexDictionary.
            </param>
            <returns>
            true if this RunVertexDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:MbUnit.Core.Collections.RunVertexDictionary.ContainsValue(MbUnit.Core.Runs.RunVertex)">
            <summary>
            Determines whether this RunVertexDictionary contains a specific value.
            </summary>
            <param name="value">
            The RunVertex value to locate in this RunVertexDictionary.
            </param>
            <returns>
            true if this RunVertexDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:MbUnit.Core.Collections.RunVertexDictionary.Remove(MbUnit.Core.Runs.IRun)">
            <summary>
            Removes the element with the specified key from this RunVertexDictionary.
            </summary>
            <param name="key">
            The IRun key of the element to remove.
            </param>
        </member>
        <member name="P:MbUnit.Core.Collections.RunVertexDictionary.Item(MbUnit.Core.Runs.IRun)">
            <summary>
            Gets or sets the RunVertex associated with the given IRun
            </summary>
            <param name="key">
            The IRun whose value to get or set.
            </param>
        </member>
        <member name="P:MbUnit.Core.Collections.RunVertexDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this RunVertexDictionary.
            </summary>
        </member>
        <member name="P:MbUnit.Core.Collections.RunVertexDictionary.Values">
            <summary>
            Gets a collection containing the values in this RunVertexDictionary.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Collections.ThreadCollection">
            <summary>
            A collection of elements of type Thread
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.ThreadCollection.#ctor">
            <summary>
            Initializes a new empty instance of the ThreadCollection class.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.ThreadCollection.Add(System.Threading.Thread)">
            <summary>
            Adds an instance of type Thread to the end of this ThreadCollection.
            </summary>
            <param name="value">
            The Thread to be added to the end of this ThreadCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.ThreadCollection.Contains(System.Threading.Thread)">
            <summary>
            Determines whether a specfic Thread value is in this ThreadCollection.
            </summary>
            <param name="value">
            The Thread value to locate in this ThreadCollection.
            </param>
            <returns>
            true if value is found in this ThreadCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:MbUnit.Core.Collections.ThreadCollection.Remove(System.Threading.Thread)">
            <summary>
            Removes the first occurrence of a specific Thread from this ThreadCollection.
            </summary>
            <param name="value">
            The Thread value to remove from this ThreadCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.ThreadCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this ThreadCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:MbUnit.Core.Collections.ThreadCollection.Item(System.Int32)">
            <summary>
            Gets or sets the Thread at the given index in this ThreadCollection.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Collections.ThreadCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by ThreadCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Collections.ThreadCollectionRunner">
            <summary>
            Summary description for ThreadCollectionRunner.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Collections.TypeCollection">
            <summary>
            A collection of elements of type Type
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.TypeCollection.#ctor">
            <summary>
            Initializes a new empty instance of the TypeCollection class.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Collections.TypeCollection.Add(System.Type)">
            <summary>
            Adds an instance of type Type to the end of this TypeCollection.
            </summary>
            <param name="value">
            The Type to be added to the end of this TypeCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.TypeCollection.Contains(System.Type)">
            <summary>
            Determines whether a specfic Type value is in this TypeCollection.
            </summary>
            <param name="value">
            The Type value to locate in this TypeCollection.
            </param>
            <returns>
            true if value is found in this TypeCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:MbUnit.Core.Collections.TypeCollection.Remove(System.Type)">
            <summary>
            Removes the first occurrence of a specific Type from this TypeCollection.
            </summary>
            <param name="value">
            The Type value to remove from this TypeCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Collections.TypeCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this TypeCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:MbUnit.Core.Collections.TypeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the Type at the given index in this TypeCollection.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Collections.TypeCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by TypeCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Cons.CommandLine.CommandLineArgumentAttribute">
            <summary>
            Allows control of command line parsing.
            Attach this attribute to instance fields of types used
            as the destination of command line argument parsing.
            </summary>
            <remarks>
            <para>
            Command line parsing code from Peter Halam, 
            http://www.gotdotnet.com/community/usersamples/details.aspx?sampleguid=62a0f27e-274e-4228-ba7f-bc0118ecc41e
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Core.Cons.CommandLine.CommandLineArgumentAttribute.#ctor(MbUnit.Core.Cons.CommandLine.CommandLineArgumentType)">
            <summary>
            Allows control of command line parsing.
            </summary>
            <param name="type"> Specifies the error checking to be done on the argument. </param>
        </member>
        <member name="P:MbUnit.Core.Cons.CommandLine.CommandLineArgumentAttribute.Type">
            <summary>
            The error checking to be done on the argument.
            </summary>
        </member>
        <member name="P:MbUnit.Core.Cons.CommandLine.CommandLineArgumentAttribute.DefaultShortName">
            <summary>
            Returns true if the argument did not have an explicit short name specified.
            </summary>
        </member>
        <member name="P:MbUnit.Core.Cons.CommandLine.CommandLineArgumentAttribute.ShortName">
            <summary>
            The short name of the argument.
            </summary>
        </member>
        <member name="P:MbUnit.Core.Cons.CommandLine.CommandLineArgumentAttribute.DefaultLongName">
            <summary>
            Returns true if the argument did not have an explicit long name specified.
            </summary>
        </member>
        <member name="P:MbUnit.Core.Cons.CommandLine.CommandLineArgumentAttribute.LongName">
            <summary>
            The long name of the argument.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Cons.CommandLine.CommandLineArgumentParser">
            <summary>
            Parser for command line arguments.
            </summary>
            <remarks>
            <para>
            The parser specification is infered from the instance fields of the object
            specified as the destination of the parse.
            Valid argument types are: int, uint, string, bool, enums
            Also argument types of Array of the above types are also valid.
            </para>
            <para>
            Error checking options can be controlled by adding a CommandLineArgumentAttribute
            to the instance fields of the destination object.
            </para>
            <para>
            At most one field may be marked with the DefaultCommandLineArgumentAttribute
            indicating that arguments without a '-' or '/' prefix will be parsed as that argument.
            </para>
            <para>
            If not specified then the parser will infer default options for parsing each
            instance field. The default long name of the argument is the field name. The
            default short name is the first character of the long name. Long names and explicitly
            specified short names must be unique. Default short names will be used provided that
            the default short name does not conflict with a long name or an explicitly
            specified short name.
            </para>
            <para>
            Arguments which are array types are collection arguments. Collection
            arguments can be specified multiple times.
            </para>
            <para>
            Command line parsing code from Peter Halam, 
            http://www.gotdotnet.com/community/usersamples/details.aspx?sampleguid=62a0f27e-274e-4228-ba7f-bc0118ecc41e
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Core.Cons.CommandLine.CommandLineArgumentParser.#ctor(System.Type,MbUnit.Core.Cons.CommandLine.ErrorReporter)">
            <summary>
            Creates a new command line argument parser.
            </summary>
            <param name="argumentSpecification"> The type of object to  parse. </param>
            <param name="reporter"> The destination for parse errors. </param>
        </member>
        <member name="M:MbUnit.Core.Cons.CommandLine.CommandLineArgumentParser.ParseArgumentList(System.String[],System.Object)">
            <summary>
            Parses an argument list into an object
            </summary>
            <param name="args"></param>
            <param name="destination"></param>
            <returns> true if an error occurred </returns>
        </member>
        <member name="M:MbUnit.Core.Cons.CommandLine.CommandLineArgumentParser.Parse(System.String[],System.Object)">
            <summary>
            Parses an argument list.
            </summary>
            <param name="args"> The arguments to parse. </param>
            <param name="destination"> The destination of the parsed arguments. </param>
            <returns> true if no parse errors were encountered. </returns>
        </member>
        <member name="P:MbUnit.Core.Cons.CommandLine.CommandLineArgumentParser.Usage">
            <summary>
            A user firendly usage string describing the command line argument syntax.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Cons.CommandLine.CommandLineArgumentType">
            <summary>
            Used to control parsing of command line arguments.
            </summary>
            <remarks>
            <para>
            Command line parsing code from Peter Halam, 
            http://www.gotdotnet.com/community/usersamples/details.aspx?sampleguid=62a0f27e-274e-4228-ba7f-bc0118ecc41e
            </para>
            </remarks>
        </member>
        <member name="F:MbUnit.Core.Cons.CommandLine.CommandLineArgumentType.Required">
            <summary>
            Indicates that this field is required. An error will be displayed
            if it is not present when parsing arguments.
            </summary>
        </member>
        <member name="F:MbUnit.Core.Cons.CommandLine.CommandLineArgumentType.Unique">
            <summary>
            Only valid in conjunction with Multiple.
            Duplicate values will result in an error.
            </summary>
        </member>
        <member name="F:MbUnit.Core.Cons.CommandLine.CommandLineArgumentType.Multiple">
            <summary>
            Inidicates that the argument may be specified more than once.
            Only valid if the argument is a collection
            </summary>
        </member>
        <member name="F:MbUnit.Core.Cons.CommandLine.CommandLineArgumentType.AtMostOnce">
            <summary>
            The default type for non-collection arguments.
            The argument is not required, but an error will be reported if it is specified more than once.
            </summary>
        </member>
        <member name="F:MbUnit.Core.Cons.CommandLine.CommandLineArgumentType.LastOccurenceWins">
            <summary>
            For non-collection arguments, when the argument is specified more than
            once no error is reported and the value of the argument is the last
            value which occurs in the argument list.
            </summary>
        </member>
        <member name="F:MbUnit.Core.Cons.CommandLine.CommandLineArgumentType.MultipleUnique">
            <summary>
            The default type for collection arguments.
            The argument is permitted to occur multiple times, but duplicate 
            values will cause an error to be reported.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Cons.CommandLine.CommandLineUtility">
            <summary>
            Useful Stuff.
            </summary>
            <remarks>
            <para>
            Command line parsing code from Peter Halam, 
            http://www.gotdotnet.com/community/usersamples/details.aspx?sampleguid=62a0f27e-274e-4228-ba7f-bc0118ecc41e
            </para>
            </remarks>
        </member>
        <member name="F:MbUnit.Core.Cons.CommandLine.CommandLineUtility.NewLine">
            <summary>
            The System Defined new line string.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Cons.CommandLine.CommandLineUtility.#ctor">
            <summary>
            Don't ever call this.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Cons.CommandLine.CommandLineUtility.ParseCommandLineArguments(System.String[],System.Object)">
            <summary>
            Parses Command Line Arguments. 
            Errors are output on Console.Error.
            Use CommandLineArgumentAttributes to control parsing behaviour.
            </summary>
            <param name="arguments"> The actual arguments. </param>
            <param name="destination"> The resulting parsed arguments. </param>
        </member>
        <member name="M:MbUnit.Core.Cons.CommandLine.CommandLineUtility.ParseCommandLineArguments(System.String[],System.Object,MbUnit.Core.Cons.CommandLine.ErrorReporter)">
            <summary>
            Parses Command Line Arguments. 
            Use CommandLineArgumentAttributes to control parsing behaviour.
            </summary>
            <param name="arguments"> The actual arguments. </param>
            <param name="destination"> The resulting parsed arguments. </param>
            <param name="reporter"> The destination for parse errors. </param>
        </member>
        <member name="M:MbUnit.Core.Cons.CommandLine.CommandLineUtility.CommandLineArgumentsUsage(System.Type)">
            <summary>
            Returns a Usage string for command line argument parsing.
            Use CommandLineArgumentAttributes to control parsing behaviour.
            </summary>
            <param name="argumentType"> The type of the arguments to display usage for. </param>
            <returns> Printable string containing a user friendly description of command line arguments. </returns>
        </member>
        <member name="T:MbUnit.Core.Cons.CommandLine.DefaultCommandLineArgumentAttribute">
            <summary>
            Indicates that this argument is the default argument.
            '/' or '-' prefix only the argument value is specified.
            </summary>
            <remarks>
            <para>
            Command line parsing code from Peter Halam, 
            http://www.gotdotnet.com/community/usersamples/details.aspx?sampleguid=62a0f27e-274e-4228-ba7f-bc0118ecc41e
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Core.Cons.CommandLine.DefaultCommandLineArgumentAttribute.#ctor(MbUnit.Core.Cons.CommandLine.CommandLineArgumentType)">
            <summary>
            Indicates that this argument is the default argument.
            </summary>
            <param name="type"> Specifies the error checking to be done on the argument. </param>
        </member>
        <member name="T:MbUnit.Core.Cons.CommandLine.ErrorReporter">
            <summary>
            A delegate used in error reporting.
            </summary>
            <remarks>
            <para>
            Command line parsing code from Peter Halam, 
            http://www.gotdotnet.com/community/usersamples/details.aspx?sampleguid=62a0f27e-274e-4228-ba7f-bc0118ecc41e
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Core.Cons.MainClass.AssemblyResolveHandler(System.Object,System.ResolveEventArgs)">
            <summary> 
            This method is used to provide assembly location resolver. It is called on event as needed by the CLR. 
            Refer to document related to AppDomain.CurrentDomain.AssemblyResolve 
            </summary> 
        </member>
        <member name="T:MbUnit.Core.Exceptions.AssertionException">
            <summary>
            Base class for MbUnit exceptions
            </summary>
        </member>
        <member name="M:MbUnit.Core.Exceptions.AssertionException.#ctor">
            <summary>
            Initializes an empty <see cref="T:MbUnit.Core.Exceptions.AssertionException"/>
            instance.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Exceptions.CompilationException">
            <summary>
            Exception throwed when not finding a vertex.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Exceptions.MultipleCultureException">
            <summary>
            Exception throwed when not finding a vertex.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Exceptions.MultipleCultureException.#ctor(System.Globalization.CultureInfo,System.String,System.Exception)">
            <summary>
            Creates an exception with a message
            and an inner exception.
            </summary>
            <param name="message">Error message</param>
            <param name="ex">Inner exception</param>
        </member>
        <member name="M:MbUnit.Core.Exceptions.MultipleCultureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="ctx"></param>
        </member>
        <member name="P:MbUnit.Core.Exceptions.MultipleCultureException.Message">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:MbUnit.Core.Fixture.IsIgnored">
            <summary>
            Returns true if the entire test fixture is ignored.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Framework.FixtureDecoratorPatternAttribute">
            <summary>
            This is the base class for attributes that can decorate fixtures.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='FixturePatternAttribute']"/>	
        </member>
        <member name="T:MbUnit.Core.Framework.NonTestPatternAttribute">
            <summary>
            Base class for attributes that tag method that are usualy used to 
            set up, provide data, tear down tests, etc...
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='NonTestPatternAttribute']"/>
        </member>
        <member name="T:MbUnit.Core.Invokers.MethodRunInvoker">
            <summary>
            An invoker that wraps up the call to a fixture method.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Invokers.MethodRunInvoker.#ctor(MbUnit.Core.Runs.IRun,System.Reflection.MethodInfo)">
            <summary>
            Default constructor - initializes all fields to default values
            </summary>
        </member>
        <member name="T:MbUnit.Core.Invokers.DecoratorRunInvoker">
            <summary>
            Decorator invorkers are used to modify the way a fixute method is executed.
            Popular examples of such is the <see cref="T:MbUnit.Core.Invokers.ExpectedExceptionRunInvoker"/>
            or the <see cref="T:MbUnit.Core.Invokers.RepeatRunInvoker"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Invokers.CustomRunInvoker.#ctor(MbUnit.Core.Runs.IRun,System.Object,System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            Default constructor - initializes all fields to default values
            </summary>
        </member>
        <member name="T:MbUnit.Core.Invokers.DurationRunInvoker">
            
        </member>
        <member name="T:MbUnit.Core.Invokers.InvokerEventArgs">
            <summary>
            TODO - Add class summary
            </summary>
            <remarks>
            	created by - dehalleux
            	created on - 30/01/2004 13:38:05
            </remarks>
        </member>
        <member name="M:MbUnit.Core.Invokers.InvokerEventArgs.#ctor(MbUnit.Core.Invokers.IRunInvoker)">
            <summary>
            Default constructor - initializes all fields to default values
            </summary>
        </member>
        <member name="T:MbUnit.Core.Invokers.PropertyGetRunInvoker">
            <summary>
            Summary description for PropertyGetRunInvoker.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Invokers.RepeatRunInvoker">
            
        </member>
        <member name="T:MbUnit.Core.Invokers.RunInvokerTreeEventArgs">
            <summary>
            Summary description for RunInvokerTreeEventHandler.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Invokers.RunInvokerVertex">
            <summary>
            A <see cref="T:QuickGraph.Concepts.IVertex"/> implementation, containing a
            <see cref="T:MbUnit.Core.Invokers.IRunInvoker"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Invokers.RunInvokerVertex.#ctor(System.Int32)">
            <summary>
            Builds a new unitialized vertex. Internal use only.
            </summary>		
            <remarks>You should not call this method directly.</remarks>
        </member>
        <member name="M:MbUnit.Core.Invokers.RunInvokerVertex.ReadGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
            <summary>
            Not implemented.
            </summary>
            <remarks/>
            <exception cref="T:System.InvalidOperationException">always thrown</exception>
        </member>
        <member name="M:MbUnit.Core.Invokers.RunInvokerVertex.WriteGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
            <summary>
            Serializes informations to the <see cref="T:QuickGraph.Concepts.Serialization.IGraphSerializationInfo"/> instance.
            </summary>		
            <param name="info">serialization device</param>
            <exception cref="T:System.ArgumentNullException">info is a null reference</exception>
        </member>
        <member name="M:MbUnit.Core.Invokers.RunInvokerVertex.ToString">
            <summary>
            Converts the object to string
            </summary>
            <remarks>
            This class outputs the vertex ID and <c>Invoker.ToString()</c>.
            </remarks>
            <returns>
            String representation of the vertex
            </returns>
        </member>
        <member name="P:MbUnit.Core.Invokers.RunInvokerVertex.HasInvoker">
            <summary>
            Gets a value indicating if the vertex has a <see cref="T:MbUnit.Core.Invokers.IRunInvoker"/>
            instance attached to it.
            </summary>
            <value>
            true if the vertex has a <see cref="T:MbUnit.Core.Invokers.IRunInvoker"/> instance attached.
            </value>
        </member>
        <member name="P:MbUnit.Core.Invokers.RunInvokerVertex.Invoker">
            <summary>
            Gets the <see cref="T:MbUnit.Core.Invokers.IRunInvoker"/> attached to the vertex.
            </summary>
            <value>
            The <see cref="T:MbUnit.Core.Invokers.IRunInvoker"/> instance attached to the vertex
            </value>
            <exception cref="T:System.InvalidOperationException">
            the <see cref="T:MbUnit.Core.Invokers.IRunInvoker"/> is a null reference
            </exception>
        </member>
        <member name="T:MbUnit.Core.Invokers.RunInvokerVertexProvider">
            <summary>
            Internal use
            </summary>
        </member>
        <member name="T:MbUnit.Core.Invokers.ThreadedRepeatRunInvoker.ThreadedRunInvokerStarter">
            <summary>
            Functor class that lanches an invoker execution.
            </summary>
            <remarks>
            You can use this method to launch <see cref="T:MbUnit.Core.Invokers.IRunInvoker"/> execution
            in separate threads.
            </remarks>
        </member>
        <member name="M:MbUnit.Core.Invokers.ThreadedRepeatRunInvoker.ThreadedRunInvokerStarter.#ctor(MbUnit.Core.Invokers.IRunInvoker,System.Object,System.Collections.IList)">
            <summary>
            Constructs a execute functor
            </summary>
            <param name="invoker">invoker to execute</param>
            <param name="o"><see cref="T:MbUnit.Core.Invokers.IRunInvoker"/>.Execute arguments</param>
            <param name="args"><see cref="T:MbUnit.Core.Invokers.IRunInvoker"/>.Execute arguments</param>
        </member>
        <member name="M:MbUnit.Core.Invokers.ThreadedRepeatRunInvoker.ThreadedRunInvokerStarter.Run">
            <summary>Launches the invoker execution</summary>
            <remarks></remarks>
        </member>
        <member name="T:MbUnit.Core.MethodSignature">
            <summary>
            TODO - Add class summary
            </summary>
            <remarks>
            	created by - dehalleux
            	created on - 30/01/2004 11:35:56
            </remarks>
        </member>
        <member name="T:MbUnit.Core.Monitoring.MemoryMonitor">
            <summary>
            Summary description for MemoryTracker.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Monitoring.MemoryStatus">
            <summary>
            Describes the status of the memory.
            </summary>
            <remarks>
            <para>
            The code to retreive the total physical and available physical memory
            was takened from the AUT project (http://aut.tigris.org).
            </para>
            </remarks>
        </member>
        <member name="T:MbUnit.Core.Monitoring.TimeMonitor">
            <summary>
            A high performance timer
            </summary>
            <remarks>
            High Precision Timer based on Win32 methods.
            </remarks>
            <example>
            This example times the execution of a method:
            <code>
            TimeMonitor timer = new TimeMonitor();
            timer.Start();
               ... // execute code
            timer.Stop();
            
            Console.WriteLine("Duration: {0}",timer.Duration);
            </code>
            </example>
        </member>
        <member name="M:MbUnit.Core.Monitoring.TimeMonitor.#ctor">
            <summary>Default constructor</summary>
            <remarks>Initializes the timer.</remarks>
        </member>
        <member name="M:MbUnit.Core.Monitoring.TimeMonitor.Start">
            <summary>Starts the timer</summary>
            <remarks>Resets the duration and starts the timer</remarks>
        </member>
        <member name="M:MbUnit.Core.Monitoring.TimeMonitor.Stop">
            <summary>Stops the timer</summary>
            <remarks>Stops the timer</remarks>
        </member>
        <member name="P:MbUnit.Core.Monitoring.TimeMonitor.Now">
            <summary>Gets the current duration value without stopping the timer</summary>
            <value>Current duration value</value>
        </member>
        <member name="P:MbUnit.Core.Monitoring.TimeMonitor.Duration">
            <summary>Gets the timed duration value in seconds</summary>
            <value>Timer duration</value>
        </member>
        <member name="T:MbUnit.Core.NamespaceDoc">
            <summary>
            <para>
            The <b>MbUnit.Core</b> namespace and child namespaces
            contains the kernel of MbUnit.
            </para>
            <para>
            The <b>MbUnit.Core.Collections</b> namespace contains 
            stronly typed collections.
            </para>
            <para>
            The <b>Exceptions</b> namespace contains custom exception
            classes relative to the MbUnit framework.
            </para>
            <para>
            The <b>MbUnit.Framework</b> namespace contains base class for custom attributes
            , for test fixtures. The custom attributes can be used to build new
            test fixture.
            </para>
            <para>
            The <b>MbUnit.Core.Invokers</b> namespace contains invokers classes that
            are functor-like wrapper for fixture methods.
            </para>
            <para>
            The <b>MbUnit.Core.Monitoring</b> namespace contains time and memory 
            performance tracers.
            </para>
            <para>
            The <b>MbUnit.Core.Runs</b> namespace contains run object that are generators
            for invoker methods.
            </para>
            </summary>
        </member>
        <member name="T:MbUnit.Core.Remoting.LongLivingMarshalByRefObject">
            <summary>
            Long living object. (Extracted from NUnit source)
            </summary>
            <remarks>
            <para>
            All objects which are marshalled by reference
            and whose lifetime is manually controlled by
            the app, should derive from this class rather
            than MarshalByRefObject.
            </para>
            <para>
            This includes the remote test domain objects
            which are accessed by the client and those
            client objects which are called back by the
            remote test domain.
            </para>
            <para>
            Objects in this category that already inherit
            from some other class (e.g. from TextWriter)
            which in turn inherits from MarshalByRef object 
            should override InitializeLifetimeService to 
            return null to obtain the same effect.
            </para>
            <para>
            Original code from NUnit.
            Portions Copyright © 2003 James W. Newkirk, Michael C. Two, Alexei A. Vorontsov, Charlie Poole
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Core.Remoting.TestDomainBase.OnLoaded">
            <summary>
            Raises the <see cref="F:MbUnit.Core.Remoting.TestDomainBase.Loaded"/> event.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Remoting.TestDomainBase.OnReLoaded">
            <summary>
            Raises the <see cref="F:MbUnit.Core.Remoting.TestDomainBase.ReLoaded"/> event.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Remoting.TestDomainBase.OnUnLoaded">
            <summary>
            Raises the <see cref="F:MbUnit.Core.Remoting.TestDomainBase.UnLoaded"/> event.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Remoting.TestDomainBase.Load">
            <summary>
            Loads domain and test assembly
            </summary>
        </member>
        <member name="M:MbUnit.Core.Remoting.TestDomainBase.Unload">
            <summary>
            Unload domain
            </summary>
        </member>
        <member name="M:MbUnit.Core.Remoting.TestDomainBase.Reload">
            <summary>
            Unload and reload test domain
            </summary>
        </member>
        <member name="P:MbUnit.Core.Remoting.TestDomainBase.Identifier">
            <summary>
            Gets a <see cref="T:System.Guid"/> identifying the <see cref="T:MbUnit.Core.Remoting.TestDomain"/>
            </summary>
        </member>
        <member name="T:MbUnit.Core.Remoting.AssemblyWatcher">
            <summary>
            AssemblyWatcher keeps track of one or more assemblies to 
            see if they have changed. It incorporates a delayed notification
            and uses a standard event to notify any interested parties
            about the change. The path to the assembly is provided as
            an argument to the event handler so that one routine can
            be used to handle events from multiple watchers.
            </summary>
            <remarks>
            <para>
            Code takened from NUnit.
            <code>
            /************************************************************************************
            '
            ' Copyright  2002-2003 James W. Newkirk, Michael C. Two, Alexei A. Vorontsov, Charlie Poole
            ' Copyright  2000-2002 Philip A. Craig
            '
            ' This software is provided 'as-is', without any express or implied warranty. In no 
            ' event will the authors be held liable for any damages arising from the use of this 
            ' software.
            ' 
            ' Permission is granted to anyone to use this software for any purpose, including 
            ' commercial applications, and to alter it and redistribute it freely, subject to the 
            ' following restrictions:
            '
            ' 1. The origin of this software must not be misrepresented; you must not claim that 
            ' you wrote the original software. If you use this software in a product, an 
            ' acknowledgment (see the following) in the product documentation is required.
            '
            ' Portions Copyright  2002-2003 James W. Newkirk, Michael C. Two, Alexei A. Vorontsov, Charlie Poole
            ' or Copyright  2000-2002 Philip A. Craig
            '
            ' 2. Altered source versions must be plainly marked as such, and must not be 
            ' misrepresented as being the original software.
            '
            ' 3. This notice may not be removed or altered from any source distribution.
            '
            '***********************************************************************************/
            </code>
            </para>
            </remarks>
        </member>
        <member name="T:MbUnit.Core.Remoting.AuthorTestTreePopulator">
            <summary>
            Summary description for AuthorTestTreePopulator.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Remoting.TestTreePopulator">
            <summary>
            Defines a class that can populate a tree of tests
            </summary>
        </member>
        <member name="T:MbUnit.Core.Remoting.ITestTreePopulator">
            <summary>
            Defines a class that can populate a tree of tests
            </summary>
        </member>
        <member name="M:MbUnit.Core.Remoting.ITestTreePopulator.Clear">
            <summary>
            Clears the internal representation of the tree
            </summary>
        </member>
        <member name="M:MbUnit.Core.Remoting.ITestTreePopulator.Populate(MbUnit.Core.Remoting.GuidTestTreeNodeDictionary,MbUnit.Core.Remoting.TestTreeNode,MbUnit.Core.Collections.RunPipeStarterCollection)">
            <summary>
            Populates the node using the <see cref="T:MbUnit.Core.RunPipe"/> instance
            contained in <paramref name="pipes"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            <param name="nodes">
            node dictionary
            </param>
            <paramref name="root"/> or <paramref name="pipes"/> is a null
            reference (Nothing in Visual Basic)
            </exception>
        </member>
        <member name="M:MbUnit.Core.Remoting.TestTreePopulator.Clear">
            <summary>
            Clears the internal representation of the tree
            </summary>
        </member>
        <member name="M:MbUnit.Core.Remoting.TestTreePopulator.Populate(MbUnit.Core.Remoting.GuidTestTreeNodeDictionary,MbUnit.Core.Remoting.TestTreeNode,MbUnit.Core.Collections.RunPipeStarterCollection)">
            <summary>
            Populates the node using the <see cref="T:MbUnit.Core.RunPipe"/> instance
            contained in <paramref name="pipes"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            <param name="root"/> or <paramref name="pipes"/> is a null
            reference (Nothing in Visual Basic)
            </exception>
        </member>
        <member name="M:MbUnit.Core.Remoting.CacheFolderHelper.DeleteDir(System.IO.DirectoryInfo)">
            <summary>
            Helper method to delete the cache dir. This method deals 
            with a bug that occurs when pdb files are marked read-only.
            </summary>
            <param name="cacheDir"></param>
        </member>
        <member name="M:MbUnit.Core.Remoting.ConfigUtils.MergeDependentAssembly(System.Xml.XmlDocument,System.Reflection.AssemblyName,System.String,System.String)">
            <summary>
            Merge a 'dependentAssembly' directive into a given config document.
            If any entries exist for the same assembly they will be deleted
            before the new entry is merged.
            </summary>
            <param name="doc">The config document to merge</param>
            <param name="assemblyName">The Assembly that should be used</param>
            <param name="versionRange">The range of compatable versions (eg. "1.0.0.0-3.0.0.0")</param>
        </member>
        <member name="M:MbUnit.Core.Remoting.ConfigUtils.createDependentAssembly(System.Xml.XmlDocument,System.Reflection.AssemblyName,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="doc"></param>
            <param name="assemblyName"></param>
            <param name="oldVersion"></param>
            <param name="assemblyCodeBase">specify a URL to define a codeBase otherwise null</param>
            <returns></returns>
        </member>
        <member name="T:MbUnit.Core.Remoting.FixtureCategoryTestTreePopulator">
            <summary>
            Summary description for FixtureCategoryTestTreePopulator.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Remoting.GuidTestTreeNodeDictionary">
            <summary>
            A dictionary with keys of type Guid and values of type TestTreeNode
            </summary>
        </member>
        <member name="M:MbUnit.Core.Remoting.GuidTestTreeNodeDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the GuidTestTreeNodeDictionary class
            </summary>
        </member>
        <member name="M:MbUnit.Core.Remoting.GuidTestTreeNodeDictionary.Add(MbUnit.Core.Remoting.TestTreeNode)">
            <summary>
            Adds an element with the specified key and value to this GuidTestTreeNodeDictionary.
            </summary>
            <param name="value">
            The TestTreeNode value of the element to add.
            </param>
        </member>
        <member name="M:MbUnit.Core.Remoting.GuidTestTreeNodeDictionary.Contains(System.Guid)">
            <summary>
            Determines whether this GuidTestTreeNodeDictionary contains a specific key.
            </summary>
            <param name="key">
            The Guid key to locate in this GuidTestTreeNodeDictionary.
            </param>
            <returns>
            true if this GuidTestTreeNodeDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:MbUnit.Core.Remoting.GuidTestTreeNodeDictionary.ContainsKey(System.Guid)">
            <summary>
            Determines whether this GuidTestTreeNodeDictionary contains a specific key.
            </summary>
            <param name="key">
            The Guid key to locate in this GuidTestTreeNodeDictionary.
            </param>
            <returns>
            true if this GuidTestTreeNodeDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:MbUnit.Core.Remoting.GuidTestTreeNodeDictionary.Remove(System.Guid)">
            <summary>
            Removes the element with the specified key from this GuidTestTreeNodeDictionary.
            </summary>
            <param name="key">
            The Guid key of the element to remove.
            </param>
        </member>
        <member name="P:MbUnit.Core.Remoting.GuidTestTreeNodeDictionary.Item(System.Guid)">
            <summary>
            Gets or sets the TestTreeNode associated with the given Guid
            </summary>
            <param name="key">
            The Guid whose value to get or set.
            </param>
        </member>
        <member name="P:MbUnit.Core.Remoting.GuidTestTreeNodeDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this GuidTestTreeNodeDictionary.
            </summary>
        </member>
        <member name="P:MbUnit.Core.Remoting.GuidTestTreeNodeDictionary.Values">
            <summary>
            Gets a collection containing the values in this GuidTestTreeNodeDictionary.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Remoting.GuidTreeNodeDictionary">
            <summary>
            A dictionary with keys of type Guid and values of type TreeNode
            </summary>
        </member>
        <member name="M:MbUnit.Core.Remoting.GuidTreeNodeDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the GuidTreeNodeDictionary class
            </summary>
        </member>
        <member name="M:MbUnit.Core.Remoting.GuidTreeNodeDictionary.Add(System.Windows.Forms.TreeNode)">
            <summary>
            Adds an element with the specified key and value to this GuidTreeNodeDictionary.
            </summary>
            <param name="value">
            The TreeNode value of the element to add.
            </param>
        </member>
        <member name="M:MbUnit.Core.Remoting.GuidTreeNodeDictionary.Contains(System.Guid)">
            <summary>
            Determines whether this GuidTreeNodeDictionary contains a specific key.
            </summary>
            <param name="key">
            The Guid key to locate in this GuidTreeNodeDictionary.
            </param>
            <returns>
            true if this GuidTreeNodeDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:MbUnit.Core.Remoting.GuidTreeNodeDictionary.ContainsKey(System.Guid)">
            <summary>
            Determines whether this GuidTreeNodeDictionary contains a specific key.
            </summary>
            <param name="key">
            The Guid key to locate in this GuidTreeNodeDictionary.
            </param>
            <returns>
            true if this GuidTreeNodeDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:MbUnit.Core.Remoting.GuidTreeNodeDictionary.Remove(System.Guid)">
            <summary>
            Removes the element with the specified key from this GuidTreeNodeDictionary.
            </summary>
            <param name="key">
            The Guid key of the element to remove.
            </param>
        </member>
        <member name="P:MbUnit.Core.Remoting.GuidTreeNodeDictionary.Item(System.Guid)">
            <summary>
            Gets or sets the TreeNode associated with the given Guid
            </summary>
            <param name="key">
            The Guid whose value to get or set.
            </param>
        </member>
        <member name="P:MbUnit.Core.Remoting.GuidTreeNodeDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this GuidTreeNodeDictionary.
            </summary>
        </member>
        <member name="P:MbUnit.Core.Remoting.GuidTreeNodeDictionary.Values">
            <summary>
            Gets a collection containing the values in this GuidTreeNodeDictionary.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Remoting.ImportanceTestTreePopulator">
            <summary>
            Summary description for ImportanceTestTreePopulator.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Remoting.NamespaceTestTreePopulator.Clear">
            <summary>
            Clears the internal representation of the tree
            </summary>
        </member>
        <member name="M:MbUnit.Core.Remoting.NamespaceTestTreePopulator.Populate(MbUnit.Core.Remoting.GuidTestTreeNodeDictionary,MbUnit.Core.Remoting.TestTreeNode,MbUnit.Core.Collections.RunPipeStarterCollection)">
            <summary>
            Populates the node using the <see cref="T:MbUnit.Core.RunPipe"/> instance
            contained in <paramref name="pipes"/>.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Remoting.ReflectionImageList">
            <summary>
            Summary description for ImageListBuilder.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Remoting.RemoteTestEngine.AddConsoleListener">
            <summary>
            Supports verbose output option of console app. 
            Added as part of fix to issue MBUNIT-28.
            </summary>
            <author>Marc Stober</author>
            <date>December 21, 2005</date>
        </member>
        <member name="M:MbUnit.Core.Remoting.SeparateTestDomain.ConfigureCachePath(System.AppDomainSetup)">
            <summary>
            Set the location for caching and delete any old cache info
            </summary>
            <param name="setup">Our domain</param>
        </member>
        <member name="M:MbUnit.Core.Remoting.SeparateTestDomain.AssemblyResolveHandler(System.Object,System.ResolveEventArgs)">
            <summary> 
            This method is used to provide assembly location resolver. It is called on event as needed by the CLR. 
            Refer to document related to AppDomain.CurrentDomain.AssemblyResolve 
            </summary> 
        </member>
        <member name="M:MbUnit.Core.Remoting.SeparateTestDomain.MakeDomain(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an AppDomain for the Test Assembly
            </summary>
            <param name="domainName"></param>
            <param name="appBase"></param>
            <param name="configFile"></param>
            <param name="binPath"></param>
            <returns></returns>
        </member>
        <member name="P:MbUnit.Core.Remoting.SeparateTestDomain.ShadowCopyFiles">
            <summary>
            Gets or sets a value indicating the assemblies have
            to be shadow copied
            </summary>
        </member>
        <member name="T:MbUnit.Core.Remoting.StringTestTreeNodeDictionary">
            <summary>
            A dictionary with keys of type String and values of type TestTreeNode
            </summary>
        </member>
        <member name="M:MbUnit.Core.Remoting.StringTestTreeNodeDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the StringTestTreeNodeDictionary class
            </summary>
        </member>
        <member name="M:MbUnit.Core.Remoting.StringTestTreeNodeDictionary.Add(System.String,MbUnit.Core.Remoting.TestTreeNode)">
            <summary>
            Adds an element with the specified key and value to this StringTestTreeNodeDictionary.
            </summary>
            <param name="key">
            The String key of the element to add.
            </param>
            <param name="value">
            The TestTreeNode value of the element to add.
            </param>
        </member>
        <member name="M:MbUnit.Core.Remoting.StringTestTreeNodeDictionary.Contains(System.String)">
            <summary>
            Determines whether this StringTestTreeNodeDictionary contains a specific key.
            </summary>
            <param name="key">
            The String key to locate in this StringTestTreeNodeDictionary.
            </param>
            <returns>
            true if this StringTestTreeNodeDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:MbUnit.Core.Remoting.StringTestTreeNodeDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from this StringTestTreeNodeDictionary.
            </summary>
            <param name="key">
            The String key of the element to remove.
            </param>
        </member>
        <member name="P:MbUnit.Core.Remoting.StringTestTreeNodeDictionary.Item(System.String)">
            <summary>
            Gets or sets the TestTreeNode associated with the given String
            </summary>
            <param name="key">
            The String whose value to get or set.
            </param>
        </member>
        <member name="P:MbUnit.Core.Remoting.StringTestTreeNodeDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this StringTestTreeNodeDictionary.
            </summary>
        </member>
        <member name="P:MbUnit.Core.Remoting.StringTestTreeNodeDictionary.Values">
            <summary>
            Gets a collection containing the values in this StringTestTreeNodeDictionary.
            </summary>
        </member>
        <member name="P:MbUnit.Core.Remoting.TestDomain.TestFilePath">
            <summary>
            Gets the testFilePath
            </summary>
        </member>
        <member name="T:MbUnit.Core.Remoting.TestsOnTestTreePopulator">
            <summary>
            Summary description for TestsOnTestTreePopulator.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Remoting.TestTreeNodeCollection">
            <summary>
            A collection of elements of type TestTreeNode
            </summary>
        </member>
        <member name="M:MbUnit.Core.Remoting.TestTreeNodeCollection.#ctor(MbUnit.Core.Remoting.TestTreeNode)">
            <summary>
            Initializes a new empty instance of the TestTreeNodeCollection class.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Remoting.TestTreeNodeCollection.Add(MbUnit.Core.Remoting.TestTreeNode)">
            <summary>
            Adds an instance of type TestTreeNode to the end of this TestTreeNodeCollection.
            </summary>
            <param name="value">
            The TestTreeNode to be added to the end of this TestTreeNodeCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Remoting.TestTreeNodeCollection.Contains(MbUnit.Core.Remoting.TestTreeNode)">
            <summary>
            Determines whether a specfic TestTreeNode value is in this TestTreeNodeCollection.
            </summary>
            <param name="value">
            The TestTreeNode value to locate in this TestTreeNodeCollection.
            </param>
            <returns>
            true if value is found in this TestTreeNodeCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:MbUnit.Core.Remoting.TestTreeNodeCollection.Remove(MbUnit.Core.Remoting.TestTreeNode)">
            <summary>
            Removes the first occurrence of a specific TestTreeNode from this TestTreeNodeCollection.
            </summary>
            <param name="value">
            The TestTreeNode value to remove from this TestTreeNodeCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Remoting.TestTreeNodeCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this TestTreeNodeCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="T:MbUnit.Core.Remoting.TestTreeNodeCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by TestTreeNodeCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Remoting.TestTreePopulatorCollection">
            <summary>
            A collection of elements of type TestTreePopulator
            </summary>
        </member>
        <member name="M:MbUnit.Core.Remoting.TestTreePopulatorCollection.#ctor">
            <summary>
            Initializes a new empty instance of the TestTreePopulatorCollection class.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Remoting.TestTreePopulatorCollection.#ctor(MbUnit.Core.Remoting.ITestTreePopulator[])">
            <summary>
            Initializes a new instance of the TestTreePopulatorCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new TestTreePopulatorCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Remoting.TestTreePopulatorCollection.#ctor(MbUnit.Core.Remoting.TestTreePopulatorCollection)">
            <summary>
            Initializes a new instance of the TestTreePopulatorCollection class, containing elements
            copied from another instance of TestTreePopulatorCollection
            </summary>
            <param name="items">
            The TestTreePopulatorCollection whose elements are to be added to the new TestTreePopulatorCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Remoting.TestTreePopulatorCollection.AddRange(MbUnit.Core.Remoting.ITestTreePopulator[])">
            <summary>
            Adds the elements of an array to the end of this TestTreePopulatorCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this TestTreePopulatorCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Remoting.TestTreePopulatorCollection.AddRange(MbUnit.Core.Remoting.TestTreePopulatorCollection)">
            <summary>
            Adds the elements of another TestTreePopulatorCollection to the end of this TestTreePopulatorCollection.
            </summary>
            <param name="items">
            The TestTreePopulatorCollection whose elements are to be added to the end of this TestTreePopulatorCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Remoting.TestTreePopulatorCollection.Add(MbUnit.Core.Remoting.ITestTreePopulator)">
            <summary>
            Adds an instance of type TestTreePopulator to the end of this TestTreePopulatorCollection.
            </summary>
            <param name="value">
            The TestTreePopulator to be added to the end of this TestTreePopulatorCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Remoting.TestTreePopulatorCollection.Contains(MbUnit.Core.Remoting.ITestTreePopulator)">
            <summary>
            Determines whether a specfic TestTreePopulator value is in this TestTreePopulatorCollection.
            </summary>
            <param name="value">
            The TestTreePopulator value to locate in this TestTreePopulatorCollection.
            </param>
            <returns>
            true if value is found in this TestTreePopulatorCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:MbUnit.Core.Remoting.TestTreePopulatorCollection.Remove(MbUnit.Core.Remoting.ITestTreePopulator)">
            <summary>
            Removes the first occurrence of a specific TestTreePopulator from this TestTreePopulatorCollection.
            </summary>
            <param name="value">
            The TestTreePopulator value to remove from this TestTreePopulatorCollection.
            </param>
        </member>
        <member name="M:MbUnit.Core.Remoting.TestTreePopulatorCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this TestTreePopulatorCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="T:MbUnit.Core.Remoting.TestTreePopulatorCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by TestTreePopulatorCollection.GetEnumerator.
            </summary>
        </member>
        <member name="P:MbUnit.Core.Remoting.TreeTestDomainCollection.Watcher">
            <summary>
            Gets the assembly watcher
            </summary>
        </member>
        <member name="M:MbUnit.Core.Reports.ReportBase.Render(MbUnit.Core.Reports.Serialization.ReportResult,System.IO.TextWriter)">
            <summary>
            Render the report result to the specified writer
            </summary>
            <param name="result">Result from the test</param>
            <param name="writer">Writer to write result output to</param>
        </member>
        <member name="M:MbUnit.Core.Reports.ReportBase.Render(MbUnit.Core.Reports.Serialization.ReportResult,System.String)">
            <summary>
            Render the report result to a file 
            </summary>
            <param name="result">Result from the test</param>
            <param name="fileName">Report output file name </param>
        </member>
        <member name="M:MbUnit.Core.Reports.ReportBase.Render(MbUnit.Core.Reports.Serialization.ReportResult,System.String,System.String,System.String)">
            <summary>
            Render the report result to a file 
            </summary>
            <param name="result">Result from the test</param>
            <param name="outputPath">Output directory</param>
            <param name="nameFormat">Default format name</param>
            <param name="extension">Extension of the file</param>
            <returns>File name of the report</returns>
        </member>
        <member name="M:MbUnit.Core.Reports.ReportBase.Render(MbUnit.Core.Reports.Serialization.ReportResult,System.String,System.String)">
            <summary>
            Render the report result to a file 
            </summary>
            <param name="result">Result from the test</param>
            <param name="outputPath">Output directory</param>
            <param name="nameFormat">Default format name. If null, the default name will be used</param>
            <returns>File name of the report</returns>
        </member>
        <member name="T:MbUnit.Core.Reports.XslTransformReport">
            <summary>
            </summary>
        </member>
        <member name="T:MbUnit.Core.Reports.Serialization.ReportAssembly">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportAssembly._version">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportAssembly._name">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportAssembly._nameSpaces">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportAssembly._counter">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportAssembly._fullName">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportAssembly.TearDown">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportAssembly.SetUp">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportAssembly.Counter">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportAssembly.Version">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportAssembly.Namespaces">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportAssembly.Name">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportAssembly.FullName">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportAssembly.NamespaceCollection.#ctor">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportAssembly.NamespaceCollection.Add(System.Object)">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportAssembly.NamespaceCollection.AddReportNamespace(MbUnit.Core.Reports.Serialization.ReportNamespace)">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportAssembly.NamespaceCollection.ContainsReportNamespace(MbUnit.Core.Reports.Serialization.ReportNamespace)">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportAssembly.NamespaceCollection.RemoveReportNamespace(MbUnit.Core.Reports.Serialization.ReportNamespace)">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportAssembly.NamespaceCollection.Item(System.Int32)">
            <summary />
            <remarks />
        </member>
        <member name="T:MbUnit.Core.Reports.Serialization.ReportAssemblyVersion">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportAssemblyVersion._build">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportAssemblyVersion._revision">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportAssemblyVersion._minor">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportAssemblyVersion._major">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportAssemblyVersion.Major">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportAssemblyVersion.Minor">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportAssemblyVersion.Build">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportAssemblyVersion.Revision">
            <summary />
            <remarks />
        </member>
        <member name="T:MbUnit.Core.Reports.Serialization.ReportCounter">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportCounter.RunCount">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportCounter.SuccessCount">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportCounter.FailureCount">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportCounter.IgnoreCount">
            <summary />
            <remarks />
        </member>
        <member name="T:MbUnit.Core.Reports.Serialization.ReportException">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportException._stackTrace">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportException._message">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportException._source">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportException._exception">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportException._type">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportException.Message">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportException.Source">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportException.StackTrace">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportException.Exception">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportException.Type">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportException.PropertyCollection.#ctor">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportException.PropertyCollection.Add(System.Object)">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportException.PropertyCollection.AddReportProperty(MbUnit.Core.Reports.Serialization.ReportProperty)">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportException.PropertyCollection.ContainsReportProperty(MbUnit.Core.Reports.Serialization.ReportProperty)">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportException.PropertyCollection.RemoveReportProperty(MbUnit.Core.Reports.Serialization.ReportProperty)">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportException.PropertyCollection.Item(System.Int32)">
            <summary />
            <remarks />
        </member>
        <member name="T:MbUnit.Core.Reports.Serialization.ReportFixture">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportFixture._description">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportFixture._name">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportFixture._type">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportFixture._counter">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportFixture._runs">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportFixture.TearDown">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportFixture.SetUp">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportFixture.Counter">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportFixture.Description">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportFixture.Runs">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportFixture.Name">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportFixture.Type">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportFixture.RunCollection.#ctor">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportFixture.RunCollection.Add(System.Object)">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportFixture.RunCollection.AddReportRun(MbUnit.Core.Reports.Serialization.ReportRun)">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportFixture.RunCollection.ContainsReportRun(MbUnit.Core.Reports.Serialization.ReportRun)">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportFixture.RunCollection.RemoveReportRun(MbUnit.Core.Reports.Serialization.ReportRun)">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportFixture.RunCollection.Item(System.Int32)">
            <summary />
            <remarks />
        </member>
        <member name="T:MbUnit.Core.Reports.Serialization.ReportInvoker">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportInvoker._description">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportInvoker._name">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportInvoker._type">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportInvoker.Description">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportInvoker.Name">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportInvoker.Type">
            <summary />
            <remarks />
        </member>
        <member name="T:MbUnit.Core.Reports.Serialization.ReportNamespace">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportNamespace._name">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportNamespace._nameSpaces">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportNamespace._counter">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportNamespace._fixtures">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportNamespace.Counter">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportNamespace.Namespaces">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportNamespace.Fixtures">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportNamespace.Name">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportNamespace.NamespaceCollection.#ctor">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportNamespace.NamespaceCollection.Add(System.Object)">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportNamespace.NamespaceCollection.AddReportNamespace(MbUnit.Core.Reports.Serialization.ReportNamespace)">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportNamespace.NamespaceCollection.ContainsReportNamespace(MbUnit.Core.Reports.Serialization.ReportNamespace)">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportNamespace.NamespaceCollection.RemoveReportNamespace(MbUnit.Core.Reports.Serialization.ReportNamespace)">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportNamespace.NamespaceCollection.Item(System.Int32)">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportNamespace.FixtureCollection.#ctor">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportNamespace.FixtureCollection.Add(System.Object)">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportNamespace.FixtureCollection.AddReportFixture(MbUnit.Core.Reports.Serialization.ReportFixture)">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportNamespace.FixtureCollection.ContainsReportFixture(MbUnit.Core.Reports.Serialization.ReportFixture)">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportNamespace.FixtureCollection.RemoveReportFixture(MbUnit.Core.Reports.Serialization.ReportFixture)">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportNamespace.FixtureCollection.Item(System.Int32)">
            <summary />
            <remarks />
        </member>
        <member name="T:MbUnit.Core.Reports.Serialization.ReportResult">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportResult._date">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportResult._counter">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportResult._assemblies">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportResult.Counter">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportResult.Assemblies">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportResult.Date">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportResult.Assembliecollection.#ctor">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportResult.Assembliecollection.Add(System.Object)">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportResult.Assembliecollection.AddReportAssembly(MbUnit.Core.Reports.Serialization.ReportAssembly)">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportResult.Assembliecollection.ContainsReportAssembly(MbUnit.Core.Reports.Serialization.ReportAssembly)">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportResult.Assembliecollection.RemoveReportAssembly(MbUnit.Core.Reports.Serialization.ReportAssembly)">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportResult.Assembliecollection.Item(System.Int32)">
            <summary />
            <remarks />
        </member>
        <member name="T:MbUnit.Core.Reports.Serialization.ReportRun">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportRun.Invokers">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportRun.Description">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportRun.ConsoleOut">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportRun.ConsoleError">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportRun.Exception">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportRun.Name">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportRun.Result">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportRun.Duration">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportRun.Memory">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportRun.InvokerCollection.#ctor">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportRun.InvokerCollection.Add(System.Object)">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportRun.InvokerCollection.AddReportInvoker(MbUnit.Core.Reports.Serialization.ReportInvoker)">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportRun.InvokerCollection.ContainsReportInvoker(MbUnit.Core.Reports.Serialization.ReportInvoker)">
            <summary />
            <remarks />
        </member>
        <member name="M:MbUnit.Core.Reports.Serialization.ReportRun.InvokerCollection.RemoveReportInvoker(MbUnit.Core.Reports.Serialization.ReportInvoker)">
            <summary />
            <remarks />
        </member>
        <member name="T:MbUnit.Core.Reports.Serialization.ReportRunResult">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportRunResult.Success">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportRunResult.Failure">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportRunResult.Ignore">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportRunResult.NotRun">
            <summary />
            <remarks />
        </member>
        <member name="T:MbUnit.Core.Reports.Serialization.ReportSetUpAndTearDown">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportSetUpAndTearDown._result">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportSetUpAndTearDown._memory">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportSetUpAndTearDown._consoleError">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportSetUpAndTearDown._name">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportSetUpAndTearDown._consoleOut">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportSetUpAndTearDown._duration">
            <summary />
            <remarks />
        </member>
        <member name="F:MbUnit.Core.Reports.Serialization.ReportSetUpAndTearDown._exception">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportSetUpAndTearDown.ConsoleOut">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportSetUpAndTearDown.ConsoleError">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportSetUpAndTearDown.Exception">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportSetUpAndTearDown.Name">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportSetUpAndTearDown.Result">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportSetUpAndTearDown.Duration">
            <summary />
            <remarks />
        </member>
        <member name="P:MbUnit.Core.Reports.Serialization.ReportSetUpAndTearDown.Memory">
            <summary />
            <remarks />
        </member>
        <member name="T:MbUnit.Core.Reports.TextReport">
            <summary>
            Reports MbUnit result in text format
            </summary>
        </member>
        <member name="T:MbUnit.Core.Reports.XmlReport">
            <summary>
            Summary description for XmlReport.
            </summary>
        </member>
        <member name="T:MbUnit.Core.ResourceHelper">
            <summary>
            Static helper functions for retreiving resources
            </summary>
        </member>
        <member name="M:MbUnit.Core.ResourceHelper.CreateImages(System.String)">
            <summary>
            Creates and saves the images in the directory with the specified path.
            </summary>
            <param name="path">The directory path in which to save the images</param>
        </member>
        <member name="T:MbUnit.Core.RunPipe">
            <summary>
            This class represents the execution pipe of a test. It contains a 
            sequence of <see cref="T:MbUnit.Core.Invokers.IRunInvoker"/>.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='RunPipe']"/>
        </member>
        <member name="M:MbUnit.Core.RunPipe.#ctor(MbUnit.Core.Fixture)">
            <summary>
            Default constructor - initializes all fields to default values
            </summary>
        </member>
        <member name="T:MbUnit.Core.RunPipeEventArgs">
            <summary>
            TODO - Add class summary
            </summary>
            <remarks>
            	created by - dehalleux
            	created on - 30/01/2004 14:09:36
            </remarks>
        </member>
        <member name="M:MbUnit.Core.RunPipeEventArgs.#ctor(MbUnit.Core.RunPipe)">
            <summary>
            Default constructor - initializes all fields to default values
            </summary>
        </member>
        <member name="M:MbUnit.Core.RunPipeResultEventArgs.#ctor(MbUnit.Core.RunPipe,MbUnit.Core.Reports.Serialization.ReportRun)">
            <summary>
            Default constructor - initializes all fields to default values
            </summary>
        </member>
        <member name="T:MbUnit.Core.RunPipeStarterEventArgs">
            <summary>
            Summary description for RunPipeStarterEventArgs.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Runs.AssemblyProviderRun">
            <summary>
            Summary description for ProviderFactoryRun.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Runs.CustomRun">
            <summary>
            TODO - Add class summary
            </summary>
            <remarks>
            	created by - dehalleux
            	created on - 30/01/2004 15:26:18
            </remarks>
        </member>
        <member name="T:MbUnit.Core.Runs.FixtureDecoratorRun">
            <summary>
            Summary description for FixtureDecoratorRun.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Runs.IndexerProviderRun">
            <summary>
            </summary>
        </member>
        <member name="M:MbUnit.Core.Runs.IndexerProviderRun.Reflect(MbUnit.Core.Invokers.RunInvokerTree,MbUnit.Core.Invokers.RunInvokerVertex,System.Type)">
            <summary>
            Populates the <see cref="T:MbUnit.Core.Invokers.RunInvokerTree"/> invoker graph
            with <see cref="T:MbUnit.Core.Invokers.IRunInvoker"/> generated by the run.
            </summary>
            <param name="tree">Invoker tree</param>
            <param name="parent">parent vertex</param>
            <param name="t">class type that is marked by the run</param>
            <remarks>
            </remarks>
        </member>
        <member name="P:MbUnit.Core.Runs.IndexerProviderRun.Name">
            <summary>
            Gets a descriptive name of the <see cref="T:MbUnit.Core.Runs.IRun"/>
            </summary>
            <value>
            A descriptive name of the <see cref="T:MbUnit.Core.Runs.IRun"/>
            </value>
        </member>
        <member name="P:MbUnit.Core.Runs.IndexerProviderRun.IsTest">
            <summary>
            Gets a value indicating the run is considered as a test or not.
            </summary>
            <value>
            true if the <see cref="T:MbUnit.Core.Runs.IRun"/> instance is a test
            </value>		
        </member>
        <member name="T:MbUnit.Core.Runs.ParallelRun">
            <summary>
            TODO - Add class summary
            </summary>
            <remarks>
            	created by - dehalleux
            	created on - 29/01/2004 14:44:27
            </remarks>
        </member>
        <member name="T:MbUnit.Core.Runs.ProviderFactoryRun">
            <summary>
            Summary description for ProviderFactoryRun.
            </summary>
        </member>
        <member name="T:MbUnit.Core.Runs.SequenceRun">
            <summary>
            A sequence of IRuns
            </summary>
        </member>
        <member name="M:MbUnit.Core.Runs.SequenceRun.Reflect(MbUnit.Core.Invokers.RunInvokerTree,MbUnit.Core.Invokers.RunInvokerVertex,System.Type)">
            <summary>
            TODO - add method description
            </summary>
            <remarks>
            Inherited method from base class Run
            </remarks>
            <param name='t'>TODO - add parameter description</param>
        </member>
        <member name="T:MbUnit.Core.Runs.TestFixtureRun">
            <summary>
            Test fixture run with support for decoration by
            <see cref="T:MbUnit.Framework.TestFixtureExtensionAttribute"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Core.Runs.TestFixtureRun.Reflect(MbUnit.Core.Invokers.RunInvokerTree,MbUnit.Core.Invokers.RunInvokerVertex,System.Type)">
            <summary>
            Builds the test run invoker tree.
            </summary>
            <param name="tree"></param>
            <param name="parent"></param>
            <param name="t"></param>
        </member>
        <member name="T:MbUnit.Core.TypeEventArgs">
            <summary>
            Event argument that carries a <see cref="P:MbUnit.Core.TypeEventArgs.Type"/> instance.
            </summary>
        </member>
        <member name="T:MbUnit.Core.TypeEventHandler">
            <summary>
            Type event delegate
            </summary>
        </member>
        <member name="T:MbUnit.Core.TypeHelper">
            <summary>
            Helper static class for Type related tasks
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='TypeHelper']"/>
        </member>
        <member name="M:MbUnit.Core.TypeHelper.ShowMethodAttributes(System.Type)">
            <summary>
            Output the methods and their custom attributes to the console.
            (Debugging method)
            </summary>
            <param name="t">type to visit</param>
            <remarks>
            You can use this method to display the methods of a class or struct
            type. Mainly for debugging purpose.
            </remarks>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/examples/example[@name='TypeHelper.ShowMethodAttributes']"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="t"/>
            is a null reference
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="t"/>
            is anot a class type.
            </exception>
        </member>
        <member name="M:MbUnit.Core.TypeHelper.HasMethodCustomAttribute(System.Type,System.Type)">
            <summary>
            Gets a value indicating the class type <paramref name="t"/> has
            a method that is tagged
            by a <paramref name="customAttributeType"/> instance.
            </summary>
            <param name="t">type to test</param>
            <param name="customAttributeType">custom attribute type to search</param>
            <returns>
            true if class type <paramref name="t"/> has a method tagged by a <paramref name="customAttributeType"/>
            attribute, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="t"/> or <paramref name="customAttributeType"/>
            is a null reference
            </exception>
            <remarks>
            You can use this method to check that a type is tagged by an attribute.
            </remarks>		
        </member>
        <member name="M:MbUnit.Core.TypeHelper.HasCustomAttribute(System.Type,System.Type)">
            <summary>
            Gets a value indicating if the <paramref name="t"/> is tagged
            by a <paramref name="customAttributeType"/> instance.
            </summary>
            <param name="t">method to test</param>
            <param name="customAttributeType">custom attribute type to search</param>
            <returns>
            true if <paramref name="t"/> is tagged by a <paramref name="customAttributeType"/>
            attribute, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="t"/> or <paramref name="customAttributeType"/>
            is a null reference
            </exception>
            <remarks>
            You can use this method to check that a method is tagged by a
            specified attribute.
            </remarks>
        </member>
        <member name="M:MbUnit.Core.TypeHelper.HasCustomAttribute(System.Reflection.ICustomAttributeProvider,System.Type)">
            <summary>
            Gets a value indicating if the method info <paramref name="t"/> is tagged
            by a <paramref name="customAttributeType"/> instance.
            </summary>
            <param name="t">method to test</param>
            <param name="customAttributeType">custom attribute type to search</param>
            <returns>
            true if <paramref name="t"/> is tagged by a <paramref name="customAttributeType"/>
            attribute, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="t"/> or <paramref name="customAttributeType"/>
            is a null reference
            </exception>
            <remarks>
            You can use this method to check that a method is tagged by a
            specified attribute.
            </remarks>
        </member>
        <member name="M:MbUnit.Core.TypeHelper.GetFirstCustomAttribute(System.Reflection.ICustomAttributeProvider,System.Type)">
            <summary>
            Gets the first instance of <paramref name="customAttributeType"/> 
            from the method <paramref name="mi"/> custom attributes.
            </summary>
            <param name="mi">Method to test</param>
            <param name="customAttributeType">custom attribute type to search</param>
            <returns>
            First instance of <paramref name="customAttributeTyp"/>
            from the method <paramref name="mi"/> custom attributes.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="mi"/> or <paramref name="customAttributeType"/>
            is a null reference
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="mi"/> is not tagged by an attribute of type
            <paramref name="customAttributeType"/>
            </exception>
            <remarks>
            You can use this method to retreive a specified attribute
            instance of a method.
            </remarks>
        </member>
        <member name="M:MbUnit.Core.TypeHelper.TryGetFirstCustomAttribute(System.Reflection.ICustomAttributeProvider,System.Type)">
            <summary>
            Gets the first instance of <paramref name="customAttributeType"/> 
            from the method <paramref name="mi"/> custom attributes.
            </summary>
            <param name="mi">Method to test</param>
            <param name="customAttributeType">custom attribute type to search</param>
            <returns>
            First instance of <paramref name="customAttributeTyp"/>
            from the method <paramref name="mi"/> custom attributes; otherwize
            a null reference
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="mi"/> or <paramref name="customAttributeType"/>
            is a null reference
            </exception>
            <remarks>
            You can use this method to retreive a specified attribute
            instance of a method.
            </remarks>
        </member>
        <member name="M:MbUnit.Core.TypeHelper.GetAttributedMethod(System.Type,System.Type)">
            <summary>
            Gets the first method of the type <paramref name="t"/>
            that is tagged by a <paramref name="customAttributeType"/>
            instance.
            </summary>
            <param name="t">type to test</param>
            <param name="customAttributeType">custom attribute type to search</param>
            <returns>
            First method of <paramref name="t"/> that 
            that is tagged by a <paramref name="customAttributeType"/>
            instance, null if no method is tagged by the specified attribute
            type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="t"/> or <paramref name="customAttributeType"/>
            is a null reference
            </exception>
            <remarks>
            You can use this method to retreive a tagged method
            </remarks>
        </member>
        <member name="M:MbUnit.Core.TypeHelper.GetAttributedMethods(System.Type,System.Type)">
            <summary>
            Gets all methods of the type <paramref name="t"/>
            that are tagged by a <paramref name="customAttributeType"/>
            instance.
            </summary>
            <param name="t">type to test</param>
            <param name="customAttributeType">custom attribute type to search</param>
            <returns>
            <see cref="T:System.Reflection.MethodInfo"/> collection  of type <paramref name="t"/> that 
            that are tagged by a <paramref name="customAttributeType"/>
            instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="t"/> or <paramref name="customAttributeType"/>
            is a null reference
            </exception>
            <remarks>
            You can use this method to retreive all the methods of a type
            tagged by a <paramref name="customAttributeType"/>.
            </remarks>
        </member>
        <member name="M:MbUnit.Core.TypeHelper.HasConstructor(System.Type,System.Type[])">
            <summary>
            Gets a value indicating if the type <paramref name="t"/> contains
            a Method with the signature defined by <paramref name="types"/>.
            </summary>
            <remarks>
            Checks if a type has a desired Method.
            </remarks>
            <param name="t">type to test</param>
            <param name="types">arguments of the Method</param>
            <returns>true if <paramref name="t"/> contains a Method matching
            types</returns>
            <exception cref="T:System.ArgumentNullException">t is a null reference</exception>
        </member>
        <member name="M:MbUnit.Core.TypeHelper.GetConstructor(System.Type,System.Type[])">
            <summary>
            Retreives the <see cref="T:System.Reflection.MethodInfo"/> that matches the signature.
            </summary>		
            <param name="t">type to test</param>
            <param name="types">Method parameter types</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo"/> instance of <paramref name="t"/> matching
            the signature.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="t"/> is a null reference</exception>
            <exception cref="T:MbUnit.Core.Exceptions.MethodNotFoundException">
            No Method of type <paramref name="t"/> match the signature defined
            by <paramref name="types"/>.
            </exception>
            <remarks>
            This method tries to retreive a Method matching the signature
            and throws if it failed.
            </remarks>
        </member>
        <member name="M:MbUnit.Core.TypeHelper.GetConstructor(System.Type,System.Object[])">
            <summary>
            Retreives the <see cref="T:System.Reflection.MethodInfo"/> that matches the signature,
            given the list of arguments.
            </summary>		
            <param name="t">type to test</param>
            <param name="args">Method arguments from which the signature
            is deduced</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo"/> instance of <paramref name="t"/> matching
            the signature defined by the list of arguments.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="t"/> is a null reference</exception>
            <exception cref="T:System.ArgumentNullException">
            One of the args item is a null reference
            </exception>
            <exception cref="T:MbUnit.Core.Exceptions.MethodNotFoundException">
            No Method of type <paramref name="t"/> match the signature defined
            by <paramref name="args"/>.
            </exception>
            <remarks>
            This methods retreives the types of <paramref name="args"/> and
            looks for a Method matching that signature.
            </remarks>
        </member>
        <member name="M:MbUnit.Core.TypeHelper.CreateInstance(System.Type)">
            <summary>
            Creates an instance of the type <paramref name="t"/> using
            the default Method.
            </summary>
            <param name="t">type to instanciate</param>
            <returns>type <paramref name="t"/> instance</returns>
        </member>
        <member name="M:MbUnit.Core.TypeHelper.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates an instance of the type <paramref name="t"/> using
            the Method that matches the signature defined by 
            <paramref name="args"/>
            </summary>
            <param name="t">type to instanciate</param>
            <param name="args">argument of the Method</param>
            <returns>type <paramref name="t"/> instance initialized using <paramref name="args"/></returns>
        </member>
        <member name="M:MbUnit.Core.TypeHelper.HasIndexer(System.Type,System.Type[])">
            <summary>
            Gets a value indicating if the type <paramref name="t"/>
            has an indexer that takes <paramref name="args"/> arguments.
            </summary>
            <remarks>
            Checks that an indexer with a given signature exists in the class.
            </remarks>
            <param name="t">type that holds the indexer</param>
            <param name="args">indexer arguments</param>
            <returns>true if an indexer that matched the signature was found,
            false otherwise
            </returns>
        </member>
        <member name="M:MbUnit.Core.TypeHelper.GetIndexer(System.Type,System.Type[])">
            <summary>
            Retreives the indexer that matches the signature
            </summary>
            <remarks>
            Safe retreival of an indexer, given it's signature
            </remarks>
            <param name="t">type that holds the indexer</param>
            <param name="args">indexer arguments</param>
        </member>
        <member name="M:MbUnit.Core.TypeHelper.GetValue(System.Reflection.PropertyInfo,System.Object,System.Object[])">
            <summary>
            Gets the value of the property <paramref name="pi"/>.
            </summary>
            <param name="pi">property</param>
            <param name="o">object instnace</param>
            <param name="args">property arguments (in case of an indexer</param>
            <returns>property value</returns>
        </member>
        <member name="M:MbUnit.Core.TypeHelper.ParametersMatch(System.Reflection.ParameterInfo[],System.Type[])">
            <summary>
            Gets a value indicating if the <paramref name="parameters"/> match
            the <paramref name="types"/>
            </summary>
            <param name="parameters">property or method paramter info</param>
            <param name="types">tested signature</param>
        </member>
        <member name="T:MbUnit.Framework.DataAssert">
            <summary>
            Assertion class for Database related object.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.DataAssert.#ctor">
            <summary>
            A private constructor disallows any instances of this object. 
            </summary>
        </member>
        <member name="M:MbUnit.Framework.DataAssert.AreEqual(System.Data.DataColumn,System.Data.DataColumn)">
            <summary>
            Asserts that two <see cref="T:System.Data.DataColumn"/> are equal.
            </summary> 
            <param name="expected">Expected <see cref="T:System.Data.DataColumn"/> instance.</param>
            <param name="actual">Actual <see cref="T:System.Data.DataColumn"/> instance.</param>
        </member>
        <member name="M:MbUnit.Framework.DataAssert.AreEqual(System.Data.DataRow,System.Data.DataRow)">
            <summary>
            Asserts that two <see cref="T:System.Data.DataRow"/> are equal.
            </summary> 
            <param name="expected">Expected <see cref="T:System.Data.DataRow"/> instance.</param>
            <param name="actual">Actual <see cref="T:System.Data.DataRow"/> instance.</param>
            <remarks>
            <para>
            Insipired from this 
            <a href="http://dotnetjunkies.com/WebLog/darrell.norton/archive/2003/06/05/213.aspx">
            blog entry.</a>.
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.DataAssert.AreSchemasEqual(System.Data.DataSet,System.Data.DataSet)">
            <summary>
            Assert that <see cref="T:System.Data.DataSet"/> schemas are equal.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.DataAssert.AreEqual(System.Data.DataSet,System.Data.DataSet)">
            <summary>
            Assert that <see cref="T:System.Data.DataSet"/> schemas and data are equal.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.DataAssert.AreDataEqual(System.Data.DataSet,System.Data.DataSet)">
            <summary>
            Assert that <see cref="T:System.Data.DataSet"/> data are equal.
            </summary>		
        </member>
        <member name="T:MbUnit.Framework.DataFixtureAttribute">
            <summary>
            Data Test fixture.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.DataFixtureAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.DataFixtureAttribute.#ctor(System.String)">
            <summary>
            Constructor with a fixture description
            </summary>
            <param name="description">fixture description</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.DataFixtureAttribute.GetRun">
            <summary>
            Creates the execution logic
            </summary>
            <remarks>
            See summary.
            </remarks>
            <returns>A <see cref="T:MbUnit.Core.Runs.IRun"/> instance that represent the type
            test logic.
            </returns>
            <example name="GraphicsBitmap">
<para>
This example shows a test fixture class implementing the <b>Simple Test pattern</b>.
It tests image based method of the Graphics class in GDI+. 
</para>
<para>
A set up method
(tagged by <see cref="T:MbUnit.Framework.SetUpAttribute"/> is used to create a new bitmap, while
a tear down (tagged by <see cref="T:MbUnit.Framework.TearDownAttribute"/>) is used to released the bitmap.
</para>
<code id="ex_bitmap" compilable="true">
[TestFixture("Bitmap")]
public GraphicsAndBitmapTest
{
    private Bitmap bmp;
    
    [SetUp]
    public void SetUp()
    {
       this.bmp = new Bitmap(300,300);
    }
    
    [Test]
    public void CreateGraphics()
    {
    	Graphics g = Graphcis.FromImage(this.bmp);
    	Assert.IsNotNull(g);
    	Assert.AreEqual(g.Width,this.bmp.Width);
    	...
    }
    
    ...
    
    [TearDown]
    public void TearDownCanHaveOtherNames()
    {
    	if(this.bmp!=null)
	    	this.bmp.Dispose();
    }
}
</code>
</example>
        </member>
        <member name="T:MbUnit.Framework.DataProviderAttribute">
            <summary>
            Tags method that provide data for the tests.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='DataProviderAttribute']"/>
        </member>
        <member name="T:MbUnit.Framework.DurationAttribute">
            <summary>
            Tag method that should return in a given time interval.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='DurationAttribute']"/>	
        </member>
        <member name="T:MbUnit.Framework.FillAttribute">
            <summary>
            Tags method that fill collections with data. 
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='FillAttribute']"/>	
        </member>
        <member name="T:MbUnit.Framework.IgnoreAttribute">
            <summary>
            Tags test methods that are ignored.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='IgnoreAttribute']"/>
        </member>
        <member name="T:MbUnit.Framework.ImportanceAttribute">
            <summary>
            This attribute collects the test importance information.
            </summary>
            <remarks>
            Fixture importance is labelled from 0, critical to higher values
            representing less critical tests.
            </remarks>
        </member>
        <member name="T:MbUnit.Framework.IndexerProviderAttribute">
            <summary>
            Tag method that provider a collection, an inde
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='IndexerProviderAttribute']"/>
        </member>
        <member name="M:MbUnit.Framework.IndexerProviderAttribute.#ctor(System.Type,System.Type,System.Object,System.Object,System.Type)">
            <summary>
            Default constructor - initializes all fields to default values
            </summary>
        </member>
        <member name="M:MbUnit.Framework.IntIndexerProviderAttribute.#ctor(System.Type,System.Object)">
            <summary>
            Default constructor - initializes all fields to default values
            and int iterator
            </summary>
        </member>
        <member name="F:MbUnit.Framework.ManualTestForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.ManualTestForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.ManualTestForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.MultipleCultureAttribute">
            <summary>
            Tag method that gives a list of culture that the test should run on.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='MultipleCultureAttribute']"/>	
        </member>
        <member name="T:MbUnit.Framework.ProviderFixtureDecoratorPatternAttribute">
            <summary>
            Summary description for ProviderFixtureDecoratorPatternAttribute.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.PerfAssert">
            <summary>
            Performance Assertion class
            </summary>
        </member>
        <member name="M:MbUnit.Framework.PerfAssert.Duration(System.Double)">
            <summary>
            Creates a countdown timer that will assert if execution time exceeds maximum duration.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrExceptions">
            <summary>
            Runtime statistics on CLR exception handling.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrExceptions.NbofExcepsThrown">
            <summary>
            This counter displays the total number of exceptions thrown since the start of the application. These include both .NET exceptions and unmanaged exceptions that get converted into .NET exceptions e.g. null pointer reference exception in unmanaged code would get re-thrown in managed code as a .NET System.NullReferenceException; this counter includes both handled and unhandled exceptions. Exceptions that are re-thrown would get counted again. Exceptions should only occur in rare situations and not in the normal control flow of the program.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrExceptions.NbofExcepsThrown.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrExceptions.NbofExcepsThrownsec">
            <summary>
            This counter displays the number of exceptions thrown per second. These include both .NET exceptions and unmanaged exceptions that get converted into .NET exceptions e.g. null pointer reference exception in unmanaged code would get re-thrown in managed code as a .NET System.NullReferenceException; this counter includes both handled and unhandled exceptions. Exceptions should only occur in rare situations and not in the normal control flow of the program; this counter was designed as an indicator of potential performance problems due to large (>100s) rate of exceptions thrown. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrExceptions.NbofExcepsThrownsec.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrExceptions.NbofFilterssec">
            <summary>
            This counter displays the number of .NET exception filters executed per second. An exception filter evaluates whether an exception should be handled or not. This counter tracks the rate of exception filters evaluated; irrespective of whether the exception was handled or not. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrExceptions.NbofFilterssec.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrExceptions.NbofFinallyssec">
            <summary>
            This counter displays the number of finally blocks executed per second. A finally block is guaranteed to be executed regardless of how the try block was exited. Only the finally blocks that are executed for an exception are counted; finally blocks on normal code paths are not counted by this counter. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrExceptions.NbofFinallyssec.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrExceptions.ThrowToCatchDepthsec">
            <summary>
            This counter displays the number of stack frames traversed from the frame that threw the .NET exception to the frame that handled the exception per second. This counter resets to 0 when an exception handler is entered; so nested exceptions would show the handler to handler stack depth. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrExceptions.ThrowToCatchDepthsec.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrRemoting">
            <summary>
            Stats for CLR Remoting.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.RemoteCallssec">
            <summary>
            This counter displays the number of remote procedure calls invoked per second. A remote procedure call is a call on any object outside the caller;s AppDomain. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.RemoteCallssec.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.TotalRemoteCalls">
            <summary>
            This counter displays the total number of remote procedure calls invoked since the start of this application. A remote procedure call is a call on any object outside the caller;s AppDomain.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.TotalRemoteCalls.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.Channels">
            <summary>
            This counter displays the total number of remoting channels registered across all AppDomains since the start of the application. Channels are used to transport messages to and from remote objects.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.Channels.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.ContextProxies">
            <summary>
            This counter displays the total number of remoting proxy objects created in this process since the start of the process. Proxy object acts as a representative of the remote objects and ensures that all calls made on the proxy are forwarded to the correct remote object instance.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.ContextProxies.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.ContextBoundClassesLoaded">
            <summary>
            This counter displays the current number of context-bound classes loaded. Classes that can be bound to a context are called context-bound classes; context-bound classes are marked with Context Attributes which provide usage rules for synchronization; thread affinity; transactions etc.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.ContextBoundClassesLoaded.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.ContextBoundObjectsAllocsec">
            <summary>
            This counter displays the number of context-bound objects allocated per second. Instances of classes that can be bound to a context are called context-bound objects; context-bound classes are marked with Context Attributes which provide usage rules for synchronization; thread affinity; transactions etc. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.ContextBoundObjectsAllocsec.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.Contexts">
            <summary>
            This counter displays the current number of remoting contexts in the application. A context is a boundary containing a collection of objects with the same usage rules like synchronization; thread affinity; transactions etc.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrRemoting.Contexts.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrNetworking">
            <summary>
            Help not available.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrNetworking.ConnectionsEstablished">
            <summary>
            The cumulative total number of socket connections established for this process since the process was started.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrNetworking.ConnectionsEstablished.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrNetworking.BytesReceived">
            <summary>
            The cumulative total number of bytes received over all open socket connections since the process was started. This number includes data and any protocol information that is not defined by the TCP/IP protocol.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrNetworking.BytesReceived.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrNetworking.BytesSent">
            <summary>
            The cumulative total number of bytes sent over all open socket connections since the process was started. This number includes data and any protocol information that is not defined by the TCP/IP protocol.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrNetworking.BytesSent.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrNetworking.DatagramsReceived">
            <summary>
            The cumulative total number of datagram packets received since the process was started.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrNetworking.DatagramsReceived.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrNetworking.DatagramsSent">
            <summary>
            The cumulative total number of datagram packets sent since the process was started.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrNetworking.DatagramsSent.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory">
            <summary>
            Counters for CLR Garbage Collected heap.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbGen0Collections">
            <summary>
            This counter displays the number of times the generation 0 objects (youngest; most recently allocated) are garbage collected (Gen 0 GC) since the start of the application. Gen 0 GC occurs when the available memory in generation 0 is not sufficient to satisfy an allocation request. This counter is incremented at the end of a Gen 0 GC. Higher generation GCs include all lower generation GCs. This counter is explicitly incremented when a higher generation (Gen 1 or Gen 2) GC occurs. _Global_ counter value is not accurate and should be ignored. This counter displays the last observed value.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbGen0Collections.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbGen1Collections">
            <summary>
            This counter displays the number of times the generation 1 objects are garbage collected since the start of the application. The counter is incremented at the end of a Gen 1 GC. Higher generation GCs include all lower generation GCs. This counter is explicitly incremented when a higher generation (Gen 2) GC occurs. _Global_ counter value is not accurate and should be ignored. This counter displays the last observed value.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbGen1Collections.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbGen2Collections">
            <summary>
            This counter displays the number of times the generation 2 objects (older) are garbage collected since the start of the application. The counter is incremented at the end of a Gen 2 GC (also called full GC). _Global_ counter value is not accurate and should be ignored. This counter displays the last observed value.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbGen2Collections.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.PromotedMemoryfromGen0">
            <summary>
            This counter displays the bytes of memory that survive garbage collection (GC) and are promoted from generation 0 to generation 1; objects that are promoted just because they are waiting to be finalized are not included in this counter. This counter displays the value observed at the end of the last GC; its not a cumulative counter.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.PromotedMemoryfromGen0.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.PromotedMemoryfromGen1">
            <summary>
            This counter displays the bytes of memory that survive garbage collection (GC) and are promoted from generation 1 to generation 2; objects that are promoted just because they are waiting to be finalized are not included in this counter. This counter displays the value observed at the end of the last GC; its not a cumulative counter. This counter is reset to 0 if the last GC was a Gen 0 GC only.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.PromotedMemoryfromGen1.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.Gen0PromotedBytesSec">
            <summary>
            This counter displays the bytes per second that are promoted from generation 0 (youngest) to generation 1; objects that are promoted just because they are waiting to be finalized are not included in this counter. Memory is promoted when it survives a garbage collection. This counter was designed as an indicator of relatively long-lived objects being created per sec. This counter displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.Gen0PromotedBytesSec.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.Gen1PromotedBytesSec">
            <summary>
            This counter displays the bytes per second that are promoted from generation 1 to generation 2 (oldest); objects that are promoted just because they are waiting to be finalized are not included in this counter. Memory is promoted when it survives a garbage collection. Nothing is promoted from generation 2 since it is the oldest. This counter was designed as an indicator of very long-lived objects being created per sec. This counter displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.Gen1PromotedBytesSec.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.PromotedFinalizationMemoryfromGen0">
            <summary>
            This counter displays the bytes of memory that are promoted from generation 0 to generation 1 just because they are waiting to be finalized. This counter displays the value observed at the end of the last GC; its not a cumulative counter.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.PromotedFinalizationMemoryfromGen0.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.PromotedFinalizationMemoryfromGen1">
            <summary>
            This counter displays the bytes of memory that are promoted from generation 1 to generation 2 just because they are waiting to be finalized. This counter displays the value observed at the end of the last GC; its not a cumulative counter. This counter is reset to 0 if the last GC was a Gen 0 GC only.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.PromotedFinalizationMemoryfromGen1.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.Gen0heapsize">
            <summary>
            This counter displays the maximum bytes that can be allocated in generation 0 (Gen 0); its does not indicate the current number of bytes allocated in Gen 0. A Gen 0 GC is triggered when the allocations since the last GC exceed this size. The Gen 0 size is tuned by the Garbage Collector and can change during the execution of the application. At the end of a Gen 0 collection the size of the Gen 0 heap is infact 0 bytes; this counter displays the size (in bytes) of allocations that would trigger the next Gen 0 GC. This counter is updated at the end of a GC; its not updated on every allocation.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.Gen0heapsize.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.Gen1heapsize">
            <summary>
            This counter displays the current number of bytes in generation 1 (Gen 1); this counter does not display the maximum size of Gen 1. Objects are not directly allocated in this generation; they are promoted from previous Gen 0 GCs. This counter is updated at the end of a GC; its not updated on every allocation.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.Gen1heapsize.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.Gen2heapsize">
            <summary>
            This counter displays the current number of bytes in generation 2 (Gen 2). Objects are not directly allocated in this generation; they are promoted from Gen 1 during previous Gen 1 GCs. This counter is updated at the end of a GC; its not updated on every allocation.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.Gen2heapsize.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.LargeObjectHeapsize">
            <summary>
            This counter displays the current size of the Large Object Heap in bytes. Objects greater than 20 KBytes are treated as large objects by the Garbage Collector and are directly allocated in a special heap; they are not promoted through the generations. This counter is updated at the end of a GC; its not updated on every allocation.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.LargeObjectHeapsize.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.FinalizationSurvivors">
            <summary>
            This counter displays the number of garbage collected objects that survive a collection because they are waiting to be finalized. If these objects hold references to other objects then those objects also survive but are not counted by this counter; the "Promoted Finalization-Memory from Gen 0" and "Promoted Finalization-Memory from Gen 1" counters represent all the memory that survived due to finalization. This counter is not a cumulative counter; its updated at the end of every GC with count of the survivors during that particular GC only. This counter was designed to indicate the extra overhead that the application might incur because of finalization.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.FinalizationSurvivors.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbGcHandles">
            <summary>
            This counter displays the current number of GC Handles in use. GCHandles are handles to resources external to the CLR and the managed environment. Handles occupy small amounts of memory in the GCHeap but potentially expensive unmanaged resources.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbGcHandles.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.AllocatedBytessec">
            <summary>
            This counter displays the rate of bytes per second allocated on the GC Heap. This counter is updated at the end of every GC; not at each allocation. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.AllocatedBytessec.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbInducedGc">
            <summary>
            This counter displays the peak number of times a garbage collection was performed because of an explicit call to GC.Collect. Its a good practice to let the GC tune the frequency of its collections.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbInducedGc.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.TimeinGc">
            <summary>
            % Time in GC is the percentage of elapsed time that was spent in performing a garbage collection (GC) since the last GC cycle. This counter is usually an indicator of the work done by the Garbage Collector on behalf of the application to collect and compact memory. This counter is updated only at the end of every GC and the counter value reflects the last observed value; its not an average.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.TimeinGc.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NotDisplayed">
            <summary>
            Not Displayed.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NotDisplayed.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbBytesinallHeaps">
            <summary>
            This counter is the sum of four other counters; Gen 0 Heap Size; Gen 1 Heap Size; Gen 2 Heap Size and the Large Object Heap Size. This counter indicates the current memory allocated in bytes on the GC Heaps.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbBytesinallHeaps.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbTotalcommittedBytes">
            <summary>
            This counter displays the amount of virtual memory (in bytes) currently committed by the Garbage Collector. (Committed memory is the physical memory for which space has been reserved on the disk paging file).
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbTotalcommittedBytes.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbTotalreservedBytes">
            <summary>
            This counter displays the amount of virtual memory (in bytes) currently reserved by the Garbage Collector. (Reserved memory is the virtual memory space reserved for the application but no disk or main memory pages have been used.)
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbTotalreservedBytes.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbofPinnedObjects">
            <summary>
            This counter displays the number of pinned objects encountered in the last GC. This counter tracks the pinned objects only in the heaps that were garbage collected e.g. a Gen 0 GC would cause enumeration of pinned objects in the generation 0 heap only. A pinned object is one that the Garbage Collector cannot move in memory.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbofPinnedObjects.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbofSinkBlocksinuse">
            <summary>
            This counter displays the current number of sync blocks in use. Sync blocks are per-object data structures allocated for storing synchronization information. Sync blocks hold weak references to managed objects and need to be scanned by the Garbage Collector. Sync blocks are not limited to storing synchronization information and can also store COM interop metadata. This counter was designed to indicate performance problems with heavy use of synchronization primitives.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrMemory.NbofSinkBlocksinuse.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrInterop">
            <summary>
            Stats for CLR interop.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrInterop.NbofCcws">
            <summary>
            This counter displays the current number of Com-Callable-Wrappers (CCWs). A CCW is a proxy for the .NET managed object being referenced from unmanaged COM client(s). This counter was designed to indicate the number of managed objects being referenced by unmanaged COM code.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrInterop.NbofCcws.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrInterop.NbofStubs">
            <summary>
            This counter displays the current number of stubs created by the CLR. Stubs are responsible for marshalling arguments and return values from managed to unmanaged code and vice versa; during a COM Interop call or PInvoke call.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrInterop.NbofStubs.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrInterop.Nbofmarshalling">
            <summary>
            This counter displays the total number of times arguments and return values have been marshaled from managed to unmanaged code and vice versa since the start of the application. This counter is not incremented if the stubs are inlined. (Stubs are responsible for marshalling arguments and return values). Stubs usually get inlined if the marshalling overhead is small.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrInterop.Nbofmarshalling.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrInterop.NbofTlbimportssec">
            <summary>
            Reserved for future use.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrInterop.NbofTlbimportssec.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrInterop.NbofTlbexportssec">
            <summary>
            Reserved for future use.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrInterop.NbofTlbexportssec.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer">
            <summary>
            Counters for System.Data.SqlClient
            </summary>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.HardConnectsPerSecond">
            <summary>
            The number of actual connections per second that are being made to servers
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.HardConnectsPerSecond.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.HardDisconnectsPerSecond">
            <summary>
            The number of actual disconnects per second that are being made to servers
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.HardDisconnectsPerSecond.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.SoftConnectsPerSecond">
            <summary>
            The number of connections we get from the pool per second
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.SoftConnectsPerSecond.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.SoftDisconnectsPerSecond">
            <summary>
            The number of connections we return to the pool per second
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.SoftDisconnectsPerSecond.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfNonPooledConnections">
            <summary>
            The number of connections that are not using connection pooling
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfNonPooledConnections.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfPooledConnections">
            <summary>
            The number of connections that are managed by the connection pooler
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfPooledConnections.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfActiveConnectionPoolGroups">
            <summary>
            The number of unique connection strings
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfActiveConnectionPoolGroups.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfInactiveConnectionPoolGroups">
            <summary>
            The number of unique connection strings waiting for pruning
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfInactiveConnectionPoolGroups.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfActiveConnectionPools">
            <summary>
            The number of connection pools
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfActiveConnectionPools.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfInactiveConnectionPools">
            <summary>
            The number of connection pools
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfInactiveConnectionPools.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfActiveConnections">
            <summary>
            The number of connections currently in-use
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfActiveConnections.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfFreeConnections">
            <summary>
            The number of connections currently available for use
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfFreeConnections.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfStasisConnections">
            <summary>
            The number of connections currently waiting to be made ready for use
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfStasisConnections.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfReclaimedConnections">
            <summary>
            The number of connections we reclaim from GCed from external connections
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforSqlServer.NumberOfReclaimedConnections.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrData">
            <summary>
            .Net CLR Data
            </summary>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrData.SqlClientCurrentNbpooledandnonpooledconnections">
            <summary>
            Current number of connections, pooled or not.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrData.SqlClientCurrentNbpooledandnonpooledconnections.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrData.SqlClientCurrentNbpooledconnections">
            <summary>
            Current number of connections in all pools associated with the process.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrData.SqlClientCurrentNbpooledconnections.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrData.SqlClientCurrentNbconnectionpools">
            <summary>
            Current number of pools associated with the process.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrData.SqlClientCurrentNbconnectionpools.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrData.SqlClientPeakNbpooledconnections">
            <summary>
            The highest number of connections in all pools since the process started.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrData.SqlClientPeakNbpooledconnections.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrData.SqlClientTotalNbfailedconnects">
            <summary>
            The total number of connection open attempts that have failed for any reason.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrData.SqlClientTotalNbfailedconnects.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrData.SqlClientTotalNbfailedcommands">
            <summary>
            The total number of command executes that have failed for any reason.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrData.SqlClientTotalNbfailedcommands.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading">
            <summary>
            Statistics for CLR Class Loader.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.CurrentClassesLoaded">
            <summary>
            This counter displays the current number of classes loaded in all Assemblies.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.CurrentClassesLoaded.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.TotalClassesLoaded">
            <summary>
            This counter displays the cumulative number of classes loaded in all Assemblies since the start of this application.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.TotalClassesLoaded.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.RateofClassesLoaded">
            <summary>
            This counter displays the number of classes loaded per second in all Assemblies. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.RateofClassesLoaded.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.Currentappdomains">
            <summary>
            This counter displays the current number of AppDomains loaded in this application. AppDomains (application domains) provide a secure and versatile unit of processing that the CLR can use to provide isolation between applications running in the same process.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.Currentappdomains.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.TotalAppdomains">
            <summary>
            This counter displays the peak number of AppDomains loaded since the start of this application. AppDomains (application domains) provide a secure and versatile unit of processing that the CLR can use to provide isolation between applications running in the same process.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.TotalAppdomains.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.Rateofappdomains">
            <summary>
            This counter displays the number of AppDomains loaded per second. AppDomains (application domains) provide a secure and versatile unit of processing that the CLR can use to provide isolation between applications running in the same process. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.Rateofappdomains.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.CurrentAssemblies">
            <summary>
            This counter displays the current number of Assemblies loaded across all AppDomains in this application. If the Assembly is loaded as domain-neutral from multiple AppDomains then this counter is incremented once only. Assemblies can be loaded as domain-neutral when their code can be shared by all AppDomains or they can be loaded as domain-specific when their code is private to the AppDomain.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.CurrentAssemblies.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.TotalAssemblies">
            <summary>
            This counter displays the total number of Assemblies loaded since the start of this application. If the Assembly is loaded as domain-neutral from multiple AppDomains then this counter is incremented once only. Assemblies can be loaded as domain-neutral when their code can be shared by all AppDomains or they can be loaded as domain-specific when their code is private to the AppDomain.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.TotalAssemblies.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.RateofAssemblies">
            <summary>
            This counter displays the number of Assemblies loaded across all AppDomains per second. If the Assembly is loaded as domain-neutral from multiple AppDomains then this counter is incremented once only. Assemblies can be loaded as domain-neutral when their code can be shared by all AppDomains or they can be loaded as domain-specific when their code is private to the AppDomain. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.RateofAssemblies.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.TimeLoading">
            <summary>
            Reserved for future use.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.TimeLoading.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.AssemblySearchLength">
            <summary>
            Reserved for future use.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.AssemblySearchLength.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.TotalNbofLoadFailures">
            <summary>
            This counter displays the peak number of classes that have failed to load since the start of the application. These load failures could be due to many reasons like inadequate security or illegal format. Full details can be found in the profiling services help.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.TotalNbofLoadFailures.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.RateofLoadFailures">
            <summary>
            This counter displays the number of classes that failed to load per second. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval. These load failures could be due to many reasons like inadequate security or illegal format. Full details can be found in the profiling services help.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.RateofLoadFailures.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.BytesinLoaderHeap">
            <summary>
            This counter displays the current size (in bytes) of the memory committed by the class loader across all AppDomains. (Committed memory is the physical memory for which space has been reserved on the disk paging file.)
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.BytesinLoaderHeap.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.Totalappdomainsunloaded">
            <summary>
            This counter displays the total number of AppDomains unloaded since the start of the application. If an AppDomain is loaded and unloaded multiple times this counter would count each of those unloads as separate.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.Totalappdomainsunloaded.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLoading.Rateofappdomainsunloaded">
            <summary>
            This counter displays the number of AppDomains unloaded per second. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLoading.Rateofappdomainsunloaded.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrSecurity">
            <summary>
            Stats for CLR Security.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.TotalRuntimeChecks">
            <summary>
            This counter displays the total number of runtime Code Access Security (CAS) checks performed since the start of the application. Runtime CAS checks are performed when a caller makes a call to a callee demanding a particular permission; the runtime check is made on every call by the caller; the check is done by examining the current thread stack of the caller. This counter used together with "Stack Walk Depth" is indicative of performance penalty for security checks.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.TotalRuntimeChecks.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.TimeSigAuthenticating">
            <summary>
            Reserved for future use.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.TimeSigAuthenticating.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.NbLinkTimeChecks">
            <summary>
            This counter displays the total number of linktime Code Access Security (CAS) checks since the start of the application. Linktime CAS checks are performed when a caller makes a call to a callee demanding a particular permission at JIT compile time; linktime check is performed once per caller. This count is not indicative of serious performance issues; its indicative of the security system activity.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.NbLinkTimeChecks.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.TimeinRtchecks">
            <summary>
            This counter displays the percentage of elapsed time spent in performing runtime Code Access Security (CAS) checks since the last such check. CAS allows code to be trusted to varying degrees and enforces these varying levels of trust depending on code identity. This counter is updated at the end of a runtime security check; it represents the last observed value; its not an average.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.TimeinRtchecks.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.NotDisplayed">
            <summary>
            Not Displayed.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.NotDisplayed.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.StackWalkDepth">
            <summary>
            This counter displays the depth of the stack during that last runtime Code Access Security check. Runtime Code Access Security check is performed by crawling the stack. This counter is not an average; it just displays the last observed value.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrSecurity.StackWalkDepth.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrJit">
            <summary>
            Stats for CLR Jit.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrJit.NbofMethodsJitted">
            <summary>
            This counter displays the total number of methods compiled Just-In-Time (JIT) by the CLR JIT compiler since the start of the application. This counter does not include the pre-jitted methods.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrJit.NbofMethodsJitted.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrJit.NbofIlBytesJitted">
            <summary>
            This counter displays the total IL bytes jitted since the start of the application. This counter is exactly equivalent to the "Total # of IL Bytes Jitted" counter.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrJit.NbofIlBytesJitted.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrJit.TotalNbofIlBytesJitted">
            <summary>
            This counter displays the total IL bytes jitted since the start of the application. This counter is exactly equivalent to the "# of IL Bytes Jitted" counter.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrJit.TotalNbofIlBytesJitted.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrJit.IlBytesJittedsec">
            <summary>
            This counter displays the rate at which IL bytes are jitted per second. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrJit.IlBytesJittedsec.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrJit.StandardJitFailures">
            <summary>
            This counter displays the peak number of methods the JIT compiler has failed to JIT since the start of the application. This failure can occur if the IL cannot be verified or if there was an internal error in the JIT compiler.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrJit.StandardJitFailures.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrJit.TimeinJit">
            <summary>
            This counter displays the percentage of elapsed time spent in JIT compilation since the last JIT compilation phase. This counter is updated at the end of every JIT compilation phase. A JIT compilation phase is the phase when a method and its dependencies are being compiled.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrJit.TimeinJit.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrJit.NotDisplayed">
            <summary>
            Not Displayed.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrJit.NotDisplayed.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads">
            <summary>
            Stats for CLR Locks and Threads.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.TotalNbofContentions">
            <summary>
            This counter displays the total number of times threads in the CLR have attempted to acquire a managed lock unsuccessfully. Managed locks can be acquired in many ways; by the "lock" statement in C# or by calling System.Monitor.Enter or by using MethodImplOptions.Synchronized custom attribute.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.TotalNbofContentions.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.ContentionRatesec">
            <summary>
            Rate at which threads in the runtime attempt to acquire a managed lock unsuccessfully. Managed locks can be acquired in many ways; by the "lock" statement in C# or by calling System.Monitor.Enter or by using MethodImplOptions.Synchronized custom attribute.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.ContentionRatesec.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.CurrentQueueLength">
            <summary>
            This counter displays the total number of threads currently waiting to acquire some managed lock in the application. This counter is not an average over time; it displays the last observed value.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.CurrentQueueLength.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.QueueLengthPeak">
            <summary>
            This counter displays the total number of threads that waited to acquire some managed lock since the start of the application.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.QueueLengthPeak.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.QueueLengthsec">
            <summary>
            This counter displays the number of threads per second waiting to acquire some lock in the application. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.QueueLengthsec.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.NbofcurrentlogicalThreads">
            <summary>
            This counter displays the number of current .NET thread objects in the application. A .NET thread object is created either by new System.Threading.Thread or when an unmanaged thread enters the managed environment. This counters maintains the count of both running and stopped threads. This counter is not an average over time; it just displays the last observed value.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.NbofcurrentlogicalThreads.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.NbofcurrentphysicalThreads">
            <summary>
            This counter displays the number of native OS threads created and owned by the CLR to act as underlying threads for .NET thread objects. This counters value does not include the threads used by the CLR in its internal operations; it is a subset of the threads in the OS process.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.NbofcurrentphysicalThreads.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.Nbofcurrentrecognizedthreads">
            <summary>
            This counter displays the number of threads that are currently recognized by the CLR; they have a corresponding .NET thread object associated with them. These threads are not created by the CLR; they are created outside the CLR but have since run inside the CLR at least once. Only unique threads are tracked; threads with same thread ID re-entering the CLR or recreated after thread exit are not counted twice.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.Nbofcurrentrecognizedthreads.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.Nboftotalrecognizedthreads">
            <summary>
            This counter displays the total number of threads that have been recognized by the CLR since the start of this application; these threads have a corresponding .NET thread object associated with them. These threads are not created by the CLR; they are created outside the CLR but have since run inside the CLR at least once. Only unique threads are tracked; threads with same thread ID re-entering the CLR or recreated after thread exit are not counted twice.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.Nboftotalrecognizedthreads.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.rateofrecognizedthreadssec">
            <summary>
            This counter displays the number of threads per second that have been recognized by the CLR; these threads have a corresponding .NET thread object associated with them. These threads are not created by the CLR; they are created outside the CLR but have since run inside the CLR at least once. Only unique threads are tracked; threads with same thread ID re-entering the CLR or recreated after thread exit are not counted twice. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetClrLocksAndThreads.rateofrecognizedthreadssec.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>
            for the current instance.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle">
            <summary>
            Counters for System.Data.OracleClient
            </summary>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.HardConnectsPerSecond">
            <summary>
            The number of actual connections per second that are being made to servers
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.HardConnectsPerSecond.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.HardDisconnectsPerSecond">
            <summary>
            The number of actual disconnects per second that are being made to servers
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.HardDisconnectsPerSecond.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.SoftConnectsPerSecond">
            <summary>
            The number of connections we get from the pool per second
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.SoftConnectsPerSecond.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.SoftDisconnectsPerSecond">
            <summary>
            The number of connections we return to the pool per second
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.SoftDisconnectsPerSecond.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfNonPooledConnections">
            <summary>
            The number of connections that are not using connection pooling
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfNonPooledConnections.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfPooledConnections">
            <summary>
            The number of connections that are managed by the connection pooler
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfPooledConnections.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfActiveConnectionPoolGroups">
            <summary>
            The number of unique connection strings
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfActiveConnectionPoolGroups.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfInactiveConnectionPoolGroups">
            <summary>
            The number of unique connection strings waiting for pruning
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfInactiveConnectionPoolGroups.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfActiveConnectionPools">
            <summary>
            The number of connection pools
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfActiveConnectionPools.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfInactiveConnectionPools">
            <summary>
            The number of connection pools
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfInactiveConnectionPools.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfActiveConnections">
            <summary>
            The number of connections currently in-use
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfActiveConnections.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfFreeConnections">
            <summary>
            The number of connections currently available for use
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfFreeConnections.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfStasisConnections">
            <summary>
            The number of connections currently waiting to be made ready for use
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfStasisConnections.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfReclaimedConnections">
            <summary>
            The number of connections we reclaim from GCed from external connections
            </summary>			
        </member>
        <member name="M:MbUnit.Framework.PerfCounterInfo.NetDataProviderforOracle.NumberOfReclaimedConnections.NextValue">
            <summary>
            Gets the value of the <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <returns>
            Value returned by <see cref="M:System.Diagnostics.PerformanceCounter.NextValue"/>.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.PostItAttribute">
            <summary>
            Summary description for PostItAttribute.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.ReadAttribute">
            <summary>
            Tag use to mark a method that writes data to a device.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='ReadAttribute']"/>		
        </member>
        <member name="T:MbUnit.Framework.ReflectionAssert">
            <summary>
            Reflection Assertion class
            </summary>
        </member>
        <member name="M:MbUnit.Framework.ReflectionAssert.IsAssignableFrom(System.Type,System.Type)">
            <summary>
            Asserts whether an instance of the <paramref name="parent"/> 
            can be assigned from an instance of <paramref name="child"/>.
            </summary>
            <param name="parent">
            Parent <see cref="T:System.Type"/> instance.
            </param>
            <param name="child">
            Child <see cref="T:System.Type"/> instance.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ReflectionAssert.IsInstanceOf(System.Type,System.Object)">
            <summary>
            Asserts whether <paramref name="child"/> is an instance of the 
            <paramref name="type"/>.
            </summary>
            <param name="type">
            <see cref="T:System.Type"/> instance.
            </param>
            <param name="child">
            Child instance.
            </param>
        </member>
        <member name="M:MbUnit.Framework.ReflectionAssert.HasDefaultConstructor(System.Type)">
            <summary>
            Asserts that the type has a default public constructor
            </summary>
        </member>
        <member name="M:MbUnit.Framework.ReflectionAssert.HasConstructor(System.Type,System.Type[])">
            <summary>
            Asserts that the type has a public instance constructor with a signature defined by parameters.
            </summary>		
        </member>
        <member name="M:MbUnit.Framework.ReflectionAssert.HasConstructor(System.Type,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            Asserts that the type has a constructor, with the specified bindind flags, with a signature defined by parameters.
            </summary>				
        </member>
        <member name="M:MbUnit.Framework.ReflectionAssert.HasMethod(System.Type,System.String,System.Type[])">
            <summary>
            Asserts that the type has a public instance method with a signature defined by parameters.
            </summary>		
        </member>
        <member name="M:MbUnit.Framework.ReflectionAssert.HasMethod(System.Type,System.Reflection.BindingFlags,System.String,System.Type[])">
            <summary>
            Asserts that the type has a method, with the specified bindind flags, with a signature defined by parameters.
            </summary>				
        </member>
        <member name="M:MbUnit.Framework.ReflectionAssert.HasField(System.Type,System.String)">
            <summary>
            Asserts that the type has a public field method with a signature defined by parameters.
            </summary>		
        </member>
        <member name="M:MbUnit.Framework.ReflectionAssert.HasField(System.Type,System.Reflection.BindingFlags,System.String)">
            <summary>
            Asserts that the type has a field, with the specified bindind flags, with a signature defined by parameters.
            </summary>								
        </member>
        <member name="T:MbUnit.Framework.RepeatAttribute">
            <summary>
            This tag defines test method that will be repeated the specified number 
            of times.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='RepeatAttribute']"/>
        </member>
        <member name="T:MbUnit.Framework.RowAttribute">
            <summary>
            Provides a row of values using in conjunction with <see cref="T:MbUnit.Framework.RowTestAttribute"/>
            to bind values to the parameters of a row test method.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.RowAttribute.#ctor(System.Object[])">
            <summary>
            Provides a row of values using in conjunction with <see cref="T:MbUnit.Framework.RowTestAttribute"/>
            to bind values to the parameters of a row test method.
            </summary>
            <param name="row">The row of values to bind</param>
        </member>
        <member name="M:MbUnit.Framework.RowAttribute.GetRow">
            <summary>
            Gets the row of values.
            </summary>
            <returns>The row of values</returns>
        </member>
        <member name="P:MbUnit.Framework.RowAttribute.ExpectedException">
            <summary>
            Gets or sets the type of exception that is expected to be thrown when this
            row is tested, or null if none.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.RowTestAttribute">
            <summary>
            Declares a row test when applied to a test method along with one or more
            <see cref="T:MbUnit.Framework.RowAttribute"/> attributes.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.SecurityAssert">
            <summary>
            Security Assertion class
            </summary>
        </member>
        <member name="M:MbUnit.Framework.SecurityAssert.IsAuthenticated(System.Security.Principal.IIdentity)">
            <summary>
            Asserts that <paramref name="identity"/> is authenticated.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.SecurityAssert.IsNotAuthenticated(System.Security.Principal.IIdentity)">
            <summary>
            Asserts that <paramref name="identity"/> is not authenticated.
            </summary>		
        </member>
        <member name="M:MbUnit.Framework.SecurityAssert.WindowIsAuthenticated">
            <summary>
            Asserts that the current windows identity is authenticated.
            </summary>		
        </member>
        <member name="M:MbUnit.Framework.SecurityAssert.WindowIsNotAuthenticated">
            <summary>
            Asserts that the current windows identity is not authenticated.
            </summary>				
        </member>
        <member name="M:MbUnit.Framework.SecurityAssert.WindowsIsInRole(System.Security.Principal.WindowsBuiltInRole)">
            <summary>
            Asserts that the current windows identity is in <param name="role"/>.
            </summary>				
        </member>
        <member name="M:MbUnit.Framework.SecurityAssert.WindowsIsInAdministrator">
            <summary>
            Asserts that the current windows identity is in 
            <see cref="F:System.Security.Principal.WindowsBuiltInRole.Administrator"/> role.
            </summary>						
        </member>
        <member name="M:MbUnit.Framework.SecurityAssert.WindowsIsInGuest">
            <summary>
            Asserts that the current windows identity is in 
            <see cref="F:System.Security.Principal.WindowsBuiltInRole.Guest"/> role.
            </summary>								
        </member>
        <member name="M:MbUnit.Framework.SecurityAssert.WindowsIsInPowerUser">
            <summary>
            Asserts that the current windows identity is in 
            <see cref="F:System.Security.Principal.WindowsBuiltInRole.PowerUser"/> role.
            </summary>								
        </member>
        <member name="M:MbUnit.Framework.SecurityAssert.WindowsIsInUser">
            <summary>
            Asserts that the current windows identity is in 
            <see cref="F:System.Security.Principal.WindowsBuiltInRole.User"/> role.
            </summary>								
        </member>
        <member name="M:MbUnit.Framework.SerialAssert.IsXmlSerializable(System.Type)">
            <summary>
            Verifies that the type is serializable with the XmlSerializer object.
            </summary>
            <param name="t">
            type to test.
            </param>
        </member>
        <member name="M:MbUnit.Framework.SerialAssert.TwoWaySerialization(System.Object)">
            <summary>
            Serializes and deserialies to/from XML and checks that the results are the same.
            </summary>
            <param name="o">
            Object to test
            </param>
        </member>
        <member name="T:MbUnit.Framework.SetUpAttribute">
            <summary>
            Tag use to mark a method that initiliazes the fixture instance.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='SetUpAttribute']"/>	
        </member>
        <member name="T:MbUnit.Framework.StringAssert">
            <summary>
            String Assertion class
            </summary>
        </member>
        <member name="M:MbUnit.Framework.StringAssert.AreEqualIgnoreCase(System.String,System.String)">
            <summary>
            Asserts that two strings are equal, ignoring the case
            </summary>
            <param name="s1">
            Expected string
            </param>
            <param name="s2">
            Actual string
            </param>
        </member>
        <member name="M:MbUnit.Framework.StringAssert.IsEmpty(System.String)">
            <summary>
            Asserts that the string is non null and empty
            </summary>
            <param name="s">
            String to test.
            </param>
        </member>
        <member name="M:MbUnit.Framework.StringAssert.IsNonEmpty(System.String)">
            <summary>
            Asserts that the string is non null and non empty
            </summary>
            <param name="s">
            String to test.
            </param>
        </member>
        <member name="M:MbUnit.Framework.StringAssert.FullMatch(System.String,System.String)">
            <summary>
            Asserts the regular expression reg makes a full match on s
            </summary>
            <param name="s">
            String to test.
            </param>
            <param name="reg">
            Regular expression
            </param>
        </member>
        <member name="M:MbUnit.Framework.StringAssert.FullMatch(System.String,System.Text.RegularExpressions.Regex)">
             <summary>
             Asserts the regular expression regex makes a full match on
            <paramref name="s"/>.
             </summary>		
             <param name="s">
             String to test.
             </param>
             <param name="regex">
             Regular expression
             </param>
        </member>
        <member name="M:MbUnit.Framework.StringAssert.Like(System.String,System.String)">
            <summary>
            Asserts the regular expression reg makes a match on s
            </summary>
            <param name="s">
            String to test.
            </param>
            <param name="reg">
            Regular expression
            </param>
        </member>
        <member name="M:MbUnit.Framework.StringAssert.Like(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Asserts the regular expression regex makes a match on s
            </summary>	
            <param name="s">
            String to test.
            </param>
            <param name="regex">
            A <see cref="T:System.Text.RegularExpressions.Regex"/> instance. 
            </param>
        </member>
        <member name="M:MbUnit.Framework.StringAssert.NotLike(System.String,System.String)">
            <summary>
            Asserts the regular expression reg makes a match on s
            </summary>
            <param name="s">
            String to test.
            </param>
            <param name="reg">
            Regular expression
            </param>
        </member>
        <member name="M:MbUnit.Framework.StringAssert.NotLike(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Asserts the regular expression regex makes a match on s
            </summary>		
            <param name="s">
            String to test.
            </param>
            <param name="regex">
            A <see cref="T:System.Text.RegularExpressions.Regex"/> instance. 
            </param>
        </member>
        <member name="M:MbUnit.Framework.StringAssert.DoesNotContain(System.String,System.Char[])">
            <summary>
            Asserts the string does not contain c
            </summary>	
            <param name="s">
            String to test.
            </param>
            <param name="anyOf">
            Variable list of characeters.
            </param> 			
        </member>
        <member name="T:MbUnit.Framework.TearDownAttribute">
            <summary>
            Tag use to mark a method that cleans up the resource of the fixture instance.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='TearDownAttribute']"/>	
        </member>
        <member name="T:MbUnit.Framework.TestAttribute">
            <summary>
            Tag use to mark a mark a unit test method.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='TestAttribute']"/>		
        </member>
        <member name="T:MbUnit.Framework.TestFixtureExtensionAttribute">
            <summary>
            Contributes additional tests and setup or teardown steps to the
            lifecycle defined by <see cref="T:MbUnit.Framework.TestFixtureAttribute"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.TestFixtureExtensionAttribute.AddBeforeSetupRuns(MbUnit.Core.Collections.RunCollection)">
            <summary>
            Called to add runs to perform before setup.
            </summary>
            <param name="runs">The collection to update</param>
        </member>
        <member name="M:MbUnit.Framework.TestFixtureExtensionAttribute.AddTestRuns(MbUnit.Core.Collections.RunCollection)">
            <summary>
            Called to add runs to perform during the test execution cycle.
            </summary>
            <param name="runs">The collection to update</param>
        </member>
        <member name="M:MbUnit.Framework.TestFixtureExtensionAttribute.AddAfterTearDownRuns(MbUnit.Core.Collections.RunCollection)">
            <summary>
            Called to add runs to perform after teardown.
            </summary>
            <param name="runs">The collection to update</param>
        </member>
        <member name="T:MbUnit.Framework.TestSequenceAttribute">
            <summary>
            Creates an order of execution in the fixture.
            </summary>
            <remarks>
            <para>
            This fixture is used to implement the Process testing advertised by
            Marc Clifton' 
            <a href="http://www.codeproject.com/csharp/autp3.asp">Code Project
            article</a>.
            </para>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.TestSequenceAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:MbUnit.Framework.TestSequenceAttribute"/> with the given order.
            </summary>
            <param name="order">order of execution</param>
        </member>
        <member name="M:MbUnit.Framework.TestSequenceAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:MbUnit.Framework.TestSequenceAttribute"/> with the given order
            and description.
            </summary>
            <param name="order">order of execution</param>
            <param name="description">description of the test</param>
        </member>
        <member name="M:MbUnit.Framework.TestSequenceAttribute.ToString">
            <summary>
            Returns a string that represents the instance.
            </summary>		
            <returns>
            String representing the object.
            </returns>
        </member>
        <member name="P:MbUnit.Framework.TestSequenceAttribute.Order">
            <summary>
            Gets or sets the order execution
            </summary>
            <value>
            The order of execution
            </value>
        </member>
        <member name="T:MbUnit.Framework.ThreadedRepeatAttribute">
            <summary>
            This tag defines test method that will invoke the method in the specified 
            number of concurrent threads.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='ThreadedRepeatAttribute']"/>
        </member>
        <member name="P:MbUnit.Framework.UsingLiteralsAttribute.Values">
            <summary>
            Gets a list of values separated by ;
            </summary>
            <value></value>
        </member>
        <member name="T:MbUnit.Framework.EnumerationFixtureAttribute">
            <summary>
            Enumeration Pattern implementations.
            </summary>
            <remarks name="EnumerationFixtureAttribute">
<para><em>Implements:</em>Enumeration Test Pattern</para>
<para><em>Login:</em>
<code>
{DataProvider}
{CopyToProvider}
[SetUp] 
(EnumerationTester)
    - GetEnumerator
    - Enumerate
    - ElementWiseEquality
    - Current
    - CurrentWithoutMoveNet
    - CurrentPastEnd
    - Reset
    - CollectionChanged 
[TearDown]
</code>
</para>
<para>
This example tests the <seealso cref="T:System.Collections.IEnumerable"/> and <seealso cref="T:System.Collections.IEnumerator"/>.
</para>
</remarks>
        </member>
        <member name="M:MbUnit.Framework.EnumerationFixtureAttribute.GetRun">
            <summary>
            </summary>		
        </member>
        <member name="T:MbUnit.Framework.Exceptions.MissingDbInfoException">
            <summary>
            Could not find <see cref="T:MbUnit.Framework.DbRestoreInfoAttribute"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.Exceptions.MissingDbInfoException.#ctor(System.Type,System.Exception)">
            <summary>
            Creates an exception with a type
            and an inner exception.
            </summary>
            <param name="type">Error type</param>
            <param name="ex">Inner exception</param>
        </member>
        <member name="M:MbUnit.Framework.Exceptions.MissingDbInfoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="ctx"></param>
        </member>
        <member name="P:MbUnit.Framework.Exceptions.MissingDbInfoException.Message">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:MbUnit.Framework.ForEachTestAttribute">
            <summary>
            </summary>
        </member>
        <member name="M:MbUnit.Framework.ForEachTestAttribute.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="xpath">
            XPath to the desired data
            </param>
            <remarks>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.ForEachTestAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor with a fixture description
            </summary>
            <param name="xpath">
            XPath to the desired data
            </param>
            <param name="description">fixture description</param>
            <remarks>
            </remarks>
        </member>
        <member name="T:MbUnit.Core.Invokers.ForEachTestRunInvoker">
            <summary>
            Summary description for ForEachTestRunInvoker.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.NamespaceDoc">
            <summary>
            <para>
            The <em>MbUnit.Framework</em> contains the set of built-in attributes.
            </para>
            <para>
            Use the static methods of <see cref="T:MbUnit.Framework.Assert"/> to test your assertions. You can also
            do security related assertion using <see cref="T:MbUnit.Framework.SecurityAssert"/>, 
            data related assertions using <see cref="T:MbUnit.Framework.DataAssert"/> and
            XML related assertions using <see cref="T:MbUnit.Framework.XmlAssert"/> (which comes from XmlUnit, http://xmlunit.sourceforge.net)
            , Reflection based assertion <see cref="T:MbUnit.Framework.ReflectionAssert"/> and
            String and text based assertion <see cref="T:MbUnit.Framework.StringAssert"/>.
            </para>
            </summary>
        </member>
        <member name="T:MbUnit.Framework.ProcessTestFixtureAttribute">
            <summary>
            Process Test Pattern fixture.
            </summary>
            <remarks>
            <para><em>Implements:</em> Process Test Fixture</para>
            <para><em>Logic:</em>
            <code>
            [SetUp]
            {TestSequence}
            [TearDown]
            </code>
            </para>
            <para>
            This fixture implements the Process Test Fixture as described in the
            <a href="http://www.codeproject.com/csharp/autp3.asp">CodeProject</a>
            article from Marc Clifton.
            </para>
            <para>
            In this implementation, reverse traversal is not implemented.
            A process can be seen as a linear graph, a very simple model. If you
            need more evolved models, use Model Based Testing.
            </para>
            </remarks>
            <example name="DbSequence">
<para>
This is the example for the <a href="http://www.codeproject.com/csharp/autp3.asp">CodeProject</a> 
article adapted to MbUnit.
</para>
<code>
<b>[ProcessTestFixture]</b>
public class POSequenceTest
{	
	...
	<b>[TestSequence(1)]</b>
	public void POConstructor()
	{
		po=new PurchaseOrder();
		Assert.AreEqual(po.Number,"", "Number not initialized.");
		Assert.AreEqual(po.PartCount,0, "PartCount not initialized.");
		Assert.AreEqual(po.ChargeCount,0, "ChargeCount not initialized.");
		Assert.AreEqual(po.Invoice,null, "Invoice not initialized.");
		Assert.AreEqual(po.Vendor,null, "Vendor not initialized.");
	}

	[TestSequence(2)]
	public void VendorConstructor()
	{
		vendor=new Vendor();
		Assert.AreEqual(vendor.Name,"", "Name is not an empty string.");
		Assert.AreEqual(vendor.PartCount,0, "PartCount is not zero.");
	}
	...
</code>
<para>
Use <see cref="T:MbUnit.Framework.ProcessTestFixtureAttribute"/> to mark a class as process test fixture and use the 
<see cref="T:MbUnit.Framework.TestSequenceAttribute"/> attribute to create the order of the process. The fixture also supports
SetUp and TearDown methods.
</para>
</example>
        </member>
        <member name="M:MbUnit.Framework.ProcessTestFixtureAttribute.#ctor">
            <summary>
            Initialize a <see cref="T:MbUnit.Framework.ProcessTestFixtureAttribute"/>
            instance.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.ProcessTestFixtureAttribute.#ctor(System.String)">
            <summary>
            Constructor with a fixture description
            </summary>
            <param name="description">fixture description</param>
        </member>
        <member name="M:MbUnit.Framework.ProcessTestFixtureAttribute.GetRun">
            <summary>
            Creates the execution logic
            </summary>
            <remarks>
            See summary.
            </remarks>
            <returns>A <see cref="T:MbUnit.Core.Runs.IRun"/> instance that represent the type
            test logic.
            </returns>
        </member>
        <member name="T:MbUnit.Framework.ResourceXmlDataProviderAttribute">
            <summary>
            A resource-based data provider
            </summary>
        </member>
        <member name="T:MbUnit.Framework.XmlDataProviderAttribute">
            <summary>
            A file-based data provider
            </summary>
        </member>
        <member name="T:MbUnit.Framework.SuiteProviderAttribute">
            <summary>
            </summary>
        </member>
        <member name="M:MbUnit.Framework.SuiteProviderAttribute.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="xpath">
            XPath to the desired data
            </param>
            <remarks>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.SuiteProviderAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor with a fixture description
            </summary>
            <param name="xpath">
            XPath to the desired data
            </param>
            <param name="description">fixture description</param>
            <remarks>
            </remarks>
        </member>
        <member name="T:MbUnit.Framework.TestCase">
            <summary>
            A single test case of a <see cref="T:MbUnit.Framework.TestSuite"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.TestCase.#ctor(System.String,System.Delegate,System.Object[])">
            <summary>
            Initializes a new <see cref="T:MbUnit.Framework.TestCase"/> instance
            with name and delegate.
            </summary>
            <param name="name">
            Name of the test case
            </param>
            <param name="testDelegate">
            Delegate called by the test case
            </param>
            <param name="parameters">
            Parameters of the delegate
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> or <paramref name="testDelegate"/>
            is a null reference (Nothing in Visual Basic)
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is empty.
            </exception>
        </member>
        <member name="M:MbUnit.Framework.TestCase.Invoke(System.Object,System.Collections.IList)">
            <summary>
            Invokes <see cref="!:Test"/> using the parameters returned by 
            <see cref="M:MbUnit.Framework.TestCase.GetParameters"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MbUnit.Framework.TestCase.Name">
            <summary>
            Gets the name of the test case
            </summary>
            <value>
            The name of the test case
            </value>
        </member>
        <member name="T:MbUnit.Framework.Testers.CollectionIndexingTester">
            <summary>
            Collection indexing test class
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="dot/remarkss/remarks[@name='CollectionIndexingTester']"/>
        </member>
        <member name="T:MbUnit.Framework.Testers.CollectionOrderTester">
            <summary>
            Collection order tester class.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.Testers.EnumerationTester">
            <summary>
            Tests for the <seealso cref="T:System.Collections.IEnumerable"/> and <seealso cref="T:System.Collections.IEnumerator"/>.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.Testers.NamespaceDoc">
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/summaries/summary[@name='MbUnit.Framework.Testers']"/>
        </member>
        <member name="T:MbUnit.Framework.TestFixtureAttribute">
            <summary>
            Simple Test Pattern fixture.
            </summary>
            <remarks name="TestFixtureAttribute">
<para><em>Implements:</em> Simple Test Pattern</para>
<para><em>Login:</em>
<code>
[SetUp] 
{Test} 
[TearDown]
</code>
</para>
<para>
This is the classic unit test fixture attribute. It defines a class that contains unit
tests.
</para>
<para>
The test execution logic is described by the following sequence of custom attributes:
where <c>[]</c> denotes an optional attribute, <c>{}</c> denotes a custom attribute
that can tag multiple number of methods.
</para>
<para>
Unit test methods must be tagged with the <see cref="T:MbUnit.Framework.TestFixtureAttribute"/>, return
<c>void</c> and take no arguments:
<code>
[Test]
public void UnitTest()
{
   ...
}
</code>
The same fixture can hold an arbitrary number of unit test methods.
</para>
<para>
If the fixture needs initilization, you can add a set up method tagged with the
<see cref="T:MbUnit.Framework.SetUpAttribute"/> attribute. Note that there can be only one 
method tagged with <see cref="T:MbUnit.Framework.SetUpAttribute"/>.
</para>
<para>
Symmetricaly, you can specify a method that will clean up resources allocated by
the fixture. This method must be tagged with the <see cref="T:MbUnit.Framework.TearDownAttribute"/>
and there can be only one method with this attribute.
</para>
</remarks>
            <example name="GraphicsBitmap">
<para>
This example shows a test fixture class implementing the <b>Simple Test pattern</b>.
It tests image based method of the Graphics class in GDI+. 
</para>
<para>
A set up method
(tagged by <see cref="T:MbUnit.Framework.SetUpAttribute"/> is used to create a new bitmap, while
a tear down (tagged by <see cref="T:MbUnit.Framework.TearDownAttribute"/>) is used to released the bitmap.
</para>
<code id="ex_bitmap" compilable="true">
[TestFixture("Bitmap")]
public GraphicsAndBitmapTest
{
    private Bitmap bmp;
    
    [SetUp]
    public void SetUp()
    {
       this.bmp = new Bitmap(300,300);
    }
    
    [Test]
    public void CreateGraphics()
    {
    	Graphics g = Graphcis.FromImage(this.bmp);
    	Assert.IsNotNull(g);
    	Assert.AreEqual(g.Width,this.bmp.Width);
    	...
    }
    
    ...
    
    [TearDown]
    public void TearDownCanHaveOtherNames()
    {
    	if(this.bmp!=null)
	    	this.bmp.Dispose();
    }
}
</code>
</example>
        </member>
        <member name="M:MbUnit.Framework.TestFixtureAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.TestFixtureAttribute.#ctor(System.String)">
            <summary>
            Constructor with a fixture description
            </summary>
            <param name="description">fixture description</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.TestFixtureAttribute.GetRun">
            <summary>
            Creates the execution logic
            </summary>
            <remarks>
            See summary.
            </remarks>
            <returns>A <see cref="T:MbUnit.Core.Runs.IRun"/> instance that represent the type
            test logic.
            </returns>
            <example name="GraphicsBitmap">
<para>
This example shows a test fixture class implementing the <b>Simple Test pattern</b>.
It tests image based method of the Graphics class in GDI+. 
</para>
<para>
A set up method
(tagged by <see cref="T:MbUnit.Framework.SetUpAttribute"/> is used to create a new bitmap, while
a tear down (tagged by <see cref="T:MbUnit.Framework.TearDownAttribute"/>) is used to released the bitmap.
</para>
<code id="ex_bitmap" compilable="true">
[TestFixture("Bitmap")]
public GraphicsAndBitmapTest
{
    private Bitmap bmp;
    
    [SetUp]
    public void SetUp()
    {
       this.bmp = new Bitmap(300,300);
    }
    
    [Test]
    public void CreateGraphics()
    {
    	Graphics g = Graphcis.FromImage(this.bmp);
    	Assert.IsNotNull(g);
    	Assert.AreEqual(g.Width,this.bmp.Width);
    	...
    }
    
    ...
    
    [TearDown]
    public void TearDownCanHaveOtherNames()
    {
    	if(this.bmp!=null)
	    	this.bmp.Dispose();
    }
}
</code>
</example>
        </member>
        <member name="T:MbUnit.Framework.TestSuite">
            <summary>
            A named collection of uniquely named <see cref="T:MbUnit.Framework.TestCase"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.TestSuite.#ctor(System.String)">
            <summary>
            Initializes a <see cref="T:MbUnit.Framework.TestSuite"/> instance
            with <paramref name="name"/>.
            </summary>
            <param name="name">
            name of the suite
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is a null reference
            (Nothing in Visual Basic)
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is empty.
            </exception>
        </member>
        <member name="M:MbUnit.Framework.TestSuite.Add(MbUnit.Framework.ITestCase)">
            <summary>
            Adds the test case to the suite
            </summary>
            <param name="testCase">
            <see cref="T:MbUnit.Framework.TestCase"/> instance to add.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The suite already contains a test case named <paramref name="name"/>.
            </exception>
        </member>
        <member name="M:MbUnit.Framework.TestSuite.Remove(MbUnit.Framework.TestCase)">
            <summary>
            Removes the test case from the suite
            </summary>
            <param name="testCase">
            Test case to remove
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="testCase"/> is a null reference
            (Nothing in Visual Basic)
            </exception>
        </member>
        <member name="M:MbUnit.Framework.TestSuite.Add(System.String,System.Delegate,System.Object[])">
            <summary>
            Adds a new <see cref="T:MbUnit.Framework.TestCase"/> to the suite.
            </summary>
            <param name="name">
            Name of the new test case
            </param>
            <param name="test">
            <see cref="T:System.Delegate"/> invoked by the test case
            </param>
            <param name="parameters">
            parameters sent to <paramref name="test"/> when invoked
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is a null reference
            (Nothing in Visual Basic)
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is empty.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The suite already contains a test case named <paramref name="name"/>.
            </exception>
        </member>
        <member name="P:MbUnit.Framework.TestSuite.Name">
            <summary>
            Gets the <see cref="T:MbUnit.Framework.TestSuite"/> name.
            </summary>
            <value>
            The <see cref="T:MbUnit.Framework.TestSuite"/> name.
            </value>
        </member>
        <member name="P:MbUnit.Framework.TestSuite.TestCases">
            <summary>
            Gets a collection of <see cref="T:MbUnit.Framework.TestCase"/>.
            </summary>
            <value>
            A collection of <see cref="T:MbUnit.Framework.TestCase"/>.
            </value>
        </member>
        <member name="T:MbUnit.Framework.TestSuiteFixtureAttribute">
            <summary>
            Test Suite fixture.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.TestSuiteFixtureAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.TestSuiteFixtureAttribute.#ctor(System.String)">
            <summary>
            Constructor with a fixture description
            </summary>
            <param name="description">fixture description</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:MbUnit.Framework.TestSuiteFixtureAttribute.GetRun">
            <summary>
            Creates the execution logic
            </summary>
            <remarks>
            See summary.
            </remarks>
            <returns>A <see cref="T:MbUnit.Core.Runs.IRun"/> instance that represent the type
            test logic.
            </returns>
            <example name="GraphicsBitmap">
<para>
This example shows a test fixture class implementing the <b>Simple Test pattern</b>.
It tests image based method of the Graphics class in GDI+. 
</para>
<para>
A set up method
(tagged by <see cref="T:MbUnit.Framework.SetUpAttribute"/> is used to create a new bitmap, while
a tear down (tagged by <see cref="T:MbUnit.Framework.TearDownAttribute"/>) is used to released the bitmap.
</para>
<code id="ex_bitmap" compilable="true">
[TestFixture("Bitmap")]
public GraphicsAndBitmapTest
{
    private Bitmap bmp;
    
    [SetUp]
    public void SetUp()
    {
       this.bmp = new Bitmap(300,300);
    }
    
    [Test]
    public void CreateGraphics()
    {
    	Graphics g = Graphcis.FromImage(this.bmp);
    	Assert.IsNotNull(g);
    	Assert.AreEqual(g.Width,this.bmp.Width);
    	...
    }
    
    ...
    
    [TearDown]
    public void TearDownCanHaveOtherNames()
    {
    	if(this.bmp!=null)
	    	this.bmp.Dispose();
    }
}
</code>
</example>
        </member>
        <member name="T:MbUnit.Framework.TypeFixtureAttribute">
            <summary>
            Type fixture pattern implementation.
            </summary>
            <remarks name="TypeFixtureAttribute">
<para><em>Implements:</em> Type Test Pattern</para>
<para><em>Logic:</em>
<code>
{Provider}
[SetUp]
{Test}
[TearDown]
</code>
</para>
<para>
This fixture is quite similar to the <b>Simple Test</b> pattern, but it applies to
any instance of a particular type provided by the user.
</para>
<para>
The test fixture first looks for methods tagged with the <see cref="T:MbUnit.Framework.ProviderAttribute"/>
method. These method must return an object assignable with the tested type. This instance will
be feeded to the other methods of the fixture.
</para>
</remarks>
            <example name="IDictionary">
<para>
This example shows the squeleton of a fixture tests the <b>IDictionary</b> interface,
the fixture implements the <b>Type Test</b> pattern.
</para>
<para>
The tested instances are feeded by the methods tagged with the <see cref="T:MbUnit.Framework.ProviderAttribute"/>.
These methods must return an instance that is assignable with <see cref="T:System.Collections.IDictionary"/>.
Subsequent will receive the created instance as parameter.
</para>
<code id="ex_dictionary" compilable="true">
[TypeFixture(typeof(IDictionary),"IDictionary interface fixture")]
public void DictionaryTest
{
    [Provider(typeof(Hashtable))]
    public Hashtable ProvideHashtable()
    {
    	return  new Hashtable();
    }

    [Provider(typeof(SortedList))]
    public SortedList ProvideSortedList()
    {
    	return  new SortedList();
    }
    
    // tests
    [Test]
    [ExpectedException(typeof(ArgumentException))]
    public void AddDuplicate(IDictionary dic) // dic comes from a provider class
    {
		dic.Add("key",null);
		dic.Add("key",null); // boom
    }

}
</code>
</example>
        </member>
        <member name="M:MbUnit.Framework.TypeFixtureAttribute.#ctor(System.Type)">
            <summary>
            Creates a fixture for the <paramref name="testedType"/> type.
            </summary>
            <remarks>
            Initializes the attribute with <paramref name="testedType"/>.
            </remarks>
            <param name="testedType">type to apply the fixture to</param>
            <exception cref="T:System.ArgumentNullException">testedType is a null reference</exception>
        </member>
        <member name="M:MbUnit.Framework.TypeFixtureAttribute.#ctor(System.Type,System.String)">
            <summary>
            Creates a fixture for the <paramref name="testedType"/> type 
            and a description
            </summary>
            <remarks>
            Initializes the attribute with <paramref name="testedType"/>.
            </remarks>
            <param name="testedType">type to apply the fixture to</param>
            <param name="description">description of the fixture</param>
            <exception cref="T:System.ArgumentNullException">testedType is a null reference</exception>
        </member>
        <member name="M:MbUnit.Framework.TypeFixtureAttribute.GetRun">
            <summary>
            Creates the execution logic
            </summary>
            <remarks>
            See summary.
            </remarks>
            <returns>A <see cref="T:MbUnit.Core.Runs.IRun"/> instance that represent the type
            test logic.
            </returns>
            <example name="IDictionary">
<para>
This example shows the squeleton of a fixture tests the <b>IDictionary</b> interface,
the fixture implements the <b>Type Test</b> pattern.
</para>
<para>
The tested instances are feeded by the methods tagged with the <see cref="T:MbUnit.Framework.ProviderAttribute"/>.
These methods must return an instance that is assignable with <see cref="T:System.Collections.IDictionary"/>.
Subsequent will receive the created instance as parameter.
</para>
<code id="ex_dictionary" compilable="true">
[TypeFixture(typeof(IDictionary),"IDictionary interface fixture")]
public void DictionaryTest
{
    [Provider(typeof(Hashtable))]
    public Hashtable ProvideHashtable()
    {
    	return  new Hashtable();
    }

    [Provider(typeof(SortedList))]
    public SortedList ProvideSortedList()
    {
    	return  new SortedList();
    }
    
    // tests
    [Test]
    [ExpectedException(typeof(ArgumentException))]
    public void AddDuplicate(IDictionary dic) // dic comes from a provider class
    {
		dic.Add("key",null);
		dic.Add("key",null); // boom
    }

}
</code>
</example>
        </member>
        <member name="P:MbUnit.Framework.UsingFactoriesAttribute.MemberNames">
            <summary>
            Gets a list of member names separated by ;
            </summary>
            <value></value>
        </member>
        <member name="T:MbUnit.Framework.VerifiedTestCase">
            <summary>
            A <see cref="T:MbUnit.Framework.TestCase"/> with verified result.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.WebAssert">
            <summary>
            Web related assertions.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.WebAssert.IsEnableViewState(System.Web.UI.Control)">
            <summary>
            Verifies that <paramref name="ctrl"/> has ViewState enabled.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.WebAssert.IsNotEnableViewState(System.Web.UI.Control)">
            <summary>
            Verifies that <paramref name="ctrl"/> has <strong>not</strong> ViewState enabled.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.WebAssert.IsVisible(System.Web.UI.Control)">
            <summary>
            Verifies that <paramref name="ctrl"/> is visible.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.WebAssert.IsNotVisible(System.Web.UI.Control)">
            <summary>
            Verifies that <paramref name="ctrl"/> is not visible.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.WebAssert.IsIDEqual(System.Web.UI.Control,System.String)">
            <summary>
            Verifies that <paramref name="ctrl"/> ID is equal to <paramref name="id"/>.
            </summary>		
        </member>
        <member name="M:MbUnit.Framework.WebAssert.HasControls(System.Web.UI.Control)">
            <summary>
            Verifies that <paramref name="ctrl"/> has child controls.
            </summary>		
        </member>
        <member name="M:MbUnit.Framework.WebAssert.HasNoControls(System.Web.UI.Control)">
            <summary>
            Verifies that <paramref name="ctrl"/> has no child controls.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.WebAssert.AreTemplateSourceDirectoryEqual(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Verifies that the <see cref="P:System.Web.UI.Control.TemplateSourceDirectory"/>
            property of <paramref name="expected"/> and <paramref name="actual"/>
            are equal.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.WebAssert.AreTemplateSourceDirectoryEqual(System.String,System.Web.UI.Control)">
            <summary>
            Verifies that the <see cref="P:System.Web.UI.Control.TemplateSourceDirectory"/>
            property of <paramref name="actual"/> is equal to <paramref name="expected"/>
            are equal.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.WebAssert.IsChild(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Verifies that <paramref name="child"/> is a child control 
            of <paramref name="parent"/>
            </summary>
        </member>
        <member name="M:MbUnit.Framework.WebAssert.IsChild(System.Web.UI.Control,System.String)">
            <summary>
            Verifies that <paramref name="childID"/> is the ID of a child control 
            of <paramref name="parent"/>
            </summary>
        </member>
        <member name="M:MbUnit.Framework.WebAssert.IsNotChild(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Verifies that <paramref name="child"/> is a not child control 
            of <paramref name="parent"/>
            </summary>
        </member>
        <member name="M:MbUnit.Framework.WebAssert.IsNotChild(System.Web.UI.Control,System.String)">
            <summary>
            Verifies that <paramref name="childID"/> is the not ID of a child control 
            of <paramref name="parent"/>
            </summary>		
        </member>
        <member name="M:MbUnit.Framework.WebAssert.AreErrorPageEqual(System.String,System.Web.UI.Page)">
            <summary>
            Verifies that the <see cref="P:System.Web.UI.Page.ErrorPage"/> property of <paramref name="page"/>
            is equal to <paramref name="expected"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.WebAssert.AreClientTargetEqual(System.String,System.Web.UI.Page)">
            <summary>
            Verifies that the <see cref="P:System.Web.UI.Page.ClientTarget"/> property of <paramref name="page"/>
            is equal to <paramref name="expected"/>.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.WebAssert.IsPostBack(System.Web.UI.Page)">
            <summary>
            Verifies that the <see cref="P:System.Web.UI.Page.IsPostBack"/> property of <paramref name="page"/>
            is true.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.WebAssert.IsNotPostBack(System.Web.UI.Page)">
            <summary>
            Verifies that the <see cref="P:System.Web.UI.Page.IsPostBack"/> property of <paramref name="page"/>
            is false.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.WebAssert.IsValid(System.Web.UI.Page)">
            <summary>
            Verifies that the <see cref="P:System.Web.UI.Page.IsValid"/> property of <paramref name="page"/>
            is true.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.WebAssert.IsNotValid(System.Web.UI.Page)">
            <summary>
            Verifies that the <see cref="P:System.Web.UI.Page.IsValid"/> property of <paramref name="page"/>
            is false.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.WebAssert.IsSmartNavigation(System.Web.UI.Page)">
            <summary>
            Verifies that the <see cref="P:System.Web.UI.Page.SmartNavigation"/> property of <paramref name="page"/>
            is true.
            </summary>
        </member>
        <member name="M:MbUnit.Framework.WebAssert.IsNotSmartNavigation(System.Web.UI.Page)">
            <summary>
            Verifies that the <see cref="P:System.Web.UI.Page.SmartNavigation"/> property of <paramref name="page"/>
            is false.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.WriteAttribute">
            <summary>
            Tag use to mark a method that writes data to a device.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="MbUnit.Framework.Doc.xml" path="doc/remarkss/remarks[@name='WriteAttribute']"/>		
        </member>
        <member name="F:MbUnit.Framework.Xml.DifferenceType.AttributeValue">
            <summary>
            Comparing 2 attributes with the same name but different values 
            </summary>
        </member>
        <member name="F:MbUnit.Framework.Xml.DifferenceType.AttributeSequence">
            <summary>
             Comparing 2 attribute lists with the same attributes in different sequence
            </summary>
        </member>
        <member name="T:MbUnit.Framework.Xml.FlowControlException">
            <summary>
            Summary description for FlowControlException.
            </summary>
        </member>
        <member name="T:MbUnit.Framework.Xml.NamespaceDoc">
            <summary>
            <para>
            The <b>MbUnit.Framework.Xml</b> contains Xml-specific assertion.
            The classes of this namespace are extracted from the XmlUnit project. 
            </para>
            <code>
            /*
            ******************************************************************
            Copyright (c) 2001, Jeff Martin, Tim Bacon
            All rights reserved.
            
            Redistribution and use in source and binary forms, with or without
            modification, are permitted provided that the following conditions
            are met:
            
            	* Redistributions of source code must retain the above copyright
            	  notice, this list of conditions and the following disclaimer.
            	* Redistributions in binary form must reproduce the above
            	  copyright notice, this list of conditions and the following
            	  disclaimer in the documentation and/or other materials provided
            	  with the distribution.
            	* Neither the name of the xmlunit.sourceforge.net nor the names
            	  of its contributors may be used to endorse or promote products
            	  derived from this software without specific prior written
            	  permission.
            
            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
            "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
            LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
            FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
            COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
            INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
            BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
            LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
            ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
            POSSIBILITY OF SUCH DAMAGE.
            
            ******************************************************************
            */
            </code>
            </summary>
        </member>
    </members>
</doc>
