<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NCoverExplorer.MSBuildTasks</name>
    </assembly>
    <members>
        <member name="T:NCoverExplorer.Common.NCoverLogLevel">
            <summary>
            Logging levels to use within NCover task.
            </summary>
        </member>
        <member name="F:NCoverExplorer.Common.NCoverLogLevel.Quiet">
            <summary>No logging.</summary>
        </member>
        <member name="F:NCoverExplorer.Common.NCoverLogLevel.Normal">
            <summary>Writes standard log output (Default).</summary>
        </member>
        <member name="F:NCoverExplorer.Common.NCoverLogLevel.Verbose">
            <summary>Writes verbose log output.</summary>
        </member>
        <member name="T:NCoverExplorer.Common.TreeSortStyle">
            <summary>
            Sort order for displaying the coverage results in the tree.
            </summary>
        </member>
        <member name="F:NCoverExplorer.Common.TreeSortStyle.Name">
            <summary>Sort by name (default). (0)</summary>
        </member>
        <member name="F:NCoverExplorer.Common.TreeSortStyle.ClassLine">
            <summary>Sort by name( down to class level) then by line within the class. (1)</summary>
        </member>
        <member name="F:NCoverExplorer.Common.TreeSortStyle.CoveragePercentageAscending">
            <summary>Sort by coverage percentage ascending. (2)</summary>
        </member>
        <member name="F:NCoverExplorer.Common.TreeSortStyle.CoveragePercentageDescending">
            <summary>Sort by coverage percentage descending. (3)</summary>
        </member>
        <member name="F:NCoverExplorer.Common.TreeSortStyle.UnvisitedSequencePointsAscending">
            <summary>Sort by unvisited lines ascending. (4)</summary>
        </member>
        <member name="F:NCoverExplorer.Common.TreeSortStyle.UnvisitedSequencePointsDescending">
            <summary>Sort by unvisited lines descending. (5)</summary>
        </member>
        <member name="F:NCoverExplorer.Common.TreeSortStyle.VisitCountAscending">
            <summary>Sort by visit count ascending. (6)</summary>
        </member>
        <member name="F:NCoverExplorer.Common.TreeSortStyle.VisitCountDescending">
            <summary>Sort by visit count descending. (7)</summary>
        </member>
        <member name="F:NCoverExplorer.Common.TreeSortStyle.FunctionCoverageAscending">
            <summary>Sort by function coverage ascending. (8)</summary>
        </member>
        <member name="F:NCoverExplorer.Common.TreeSortStyle.FunctionCoverageDescending">
            <summary>Sort by function coverage descending. (9)</summary>
        </member>
        <member name="T:NCoverExplorer.Common.TreeFilterStyle">
            <summary>
            Filter styles that can be applied to the results. Filtered nodes are not excluded from the coverage
            statistics.
            </summary>
        </member>
        <member name="F:NCoverExplorer.Common.TreeFilterStyle.None">
            <summary>No filter applied. (0)</summary>
        </member>
        <member name="F:NCoverExplorer.Common.TreeFilterStyle.HideUnvisited">
            <summary>Hide unvisited nodes. (1)</summary>
        </member>
        <member name="F:NCoverExplorer.Common.TreeFilterStyle.HideFullyCovered">
            <summary>Hide 100% fully covered nodes. (2)</summary>
        </member>
        <member name="F:NCoverExplorer.Common.TreeFilterStyle.HideThresholdCovered">
            <summary>Hide nodes exceeding coverage threshold. (3)</summary>
        </member>
        <member name="T:NCoverExplorer.Common.CoverageReportType">
            <summary>
            Potential report types.
            </summary>
        </member>
        <member name="F:NCoverExplorer.Common.CoverageReportType.None">
            <summary>None. (0)</summary>
        </member>
        <member name="F:NCoverExplorer.Common.CoverageReportType.ModuleSummary">
            <summary>Modules summary only. (1)</summary>
        </member>
        <member name="F:NCoverExplorer.Common.CoverageReportType.NamespaceSummary">
            <summary>Namespaces summary only. (2)</summary>
        </member>
        <member name="F:NCoverExplorer.Common.CoverageReportType.ModuleNamespaceSummary">
            <summary>Modules summary followed with a namespaces by module summary. (3)</summary>
        </member>
        <member name="F:NCoverExplorer.Common.CoverageReportType.ModuleClassSummary">
            <summary>Modules summary followed with a classes by namespace summary. (4)</summary>
        </member>
        <member name="F:NCoverExplorer.Common.CoverageReportType.ModuleClassFunctionSummary">
            <summary>Modules summary followed with a classes by namespace summary showing function coverage. (5)</summary>
        </member>
        <member name="T:NCoverExplorer.Common.NCoverUtilities">
            <summary>
            Common utility functions for working with NCover.
            </summary>
        </member>
        <member name="F:NCoverExplorer.Common.NCoverUtilities.NCOVER_PROFILER_CLSID">
            <summary>
            Registry key for registering NCover manually - this will all become unnecessary in future versions of NCover (post 1.5.5) hopefully.
            </summary>
        </member>
        <member name="M:NCoverExplorer.Common.NCoverUtilities.BuildTempSettingsXmlFileForNCover(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String[],System.String,NCoverExplorer.Common.NCoverLogLevel,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Builds the temp settings XML file for N cover.
            </summary>
            <param name="version">The version.</param>
            <param name="ncoverPath">The ncover path.</param>
            <param name="settingsFile">The settings file.</param>
            <param name="commandLineExe">The command line exe.</param>
            <param name="commandLineArgs">The command line args.</param>
            <param name="workingDirectory">The working directory.</param>
            <param name="assemblyList">The assembly list.</param>
            <param name="assemblyFiles">The assembly files.</param>
            <param name="coverageFile">The coverage file.</param>
            <param name="logLevel">The log level.</param>
            <param name="logFile">The log file.</param>
            <param name="excludeAttributes">The exclude attributes.</param>
            <param name="profileIIS">If set to <c>true</c> profile IIS.</param>
            <param name="profileService">The profile service.</param>
            <returns>Command line switch necessary for passing as an argument.</returns>
        </member>
        <member name="M:NCoverExplorer.Common.NCoverUtilities.CreateCommandLineArguments(System.String,System.String,System.String,System.String,System.String,System.String,System.String,NCoverExplorer.Common.NCoverLogLevel,System.String,System.String,System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
            Creates the command line arguments.
            </summary>
            <param name="version">The version.</param>
            <param name="ncoverPath">The ncover path.</param>
            <param name="commandLineExe">The command line exe.</param>
            <param name="commandLineArgs">The command line args.</param>
            <param name="workingDirectory">The working directory.</param>
            <param name="assemblyList">The assembly list.</param>
            <param name="coverageFile">The coverage file.</param>
            <param name="logLevel">The log level.</param>
            <param name="logFile">The log file.</param>
            <param name="excludeAttributes">The exclude attributes.</param>
            <param name="profileIIS">if set to <c>true</c> [profile IIS].</param>
            <param name="profileService">The profile service.</param>
            <param name="includeFormatting">if set to <c>true</c> include formatting.</param>
            <param name="commandLineFormatToken">The command line format token.</param>
            <returns></returns>
        </member>
        <member name="M:NCoverExplorer.Common.NCoverUtilities.RegisterNCover(System.String)">
            <summary>
            Registers the NCover coverlib.dll by writing directly into the registry under HKCU
            </summary>
        </member>
        <member name="M:NCoverExplorer.Common.NCoverUtilities.UnregisterNCover">
            <summary>
            Unregisters the NCover coverlib.dll
            </summary>
        </member>
        <member name="M:NCoverExplorer.Common.NCoverUtilities._ReadNCoverConsoleVersion(System.String)">
            <summary>
            Find path to NCover console and retrieve the version info.
            </summary>
        </member>
        <member name="M:NCoverExplorer.Common.NCoverUtilities.GetFileContents(System.String)">
            <summary>
            Reads the file contents and returns as a string.
            </summary>
        </member>
        <member name="M:NCoverExplorer.Common.NCoverUtilities._BuildTempSettingsXmlFileForNCover133(System.String,System.String,System.String,System.String,System.String,System.String[],System.String,NCoverExplorer.Common.NCoverLogLevel,System.String)">
            <summary>
            Build the Xml .ncoversettings file to pass to the NCover.Console executable using NCover 1.3.3 syntax.
            </summary>
        </member>
        <member name="M:NCoverExplorer.Common.NCoverUtilities._WriteAssemblyNamesForNCover133(System.String,System.String[],System.Xml.XmlTextWriter)">
            <summary>
            Write assembly names as a semi-colon delimited unique assembly name list.
            Assembly names do not have extensions (how NCover requires them) to match how the
            CLR identifies them when being profiled.
            </summary>
        </member>
        <member name="M:NCoverExplorer.Common.NCoverUtilities._BuildTempSettingsXmlFileForNCover15(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String[],System.String,NCoverExplorer.Common.NCoverLogLevel,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Build the Xml .ncoversettings file to pass to the NCover.Console executable using NCover 1.5 syntax.
            </summary>
        </member>
        <member name="M:NCoverExplorer.Common.NCoverUtilities._WriteAssemblyNodes(System.String,System.String[],System.Xml.XmlTextWriter)">
            <summary>
            Writes assembly names as separate Assembly nodes in the settings file. Seems to be a 
            difference in how NCover 1.5.4 handles from previous in the xml.
            </summary>
        </member>
        <member name="M:NCoverExplorer.Common.NCoverUtilities._BuildCommandLineForNCover133(System.String,System.String,System.String,System.String,System.String,NCoverExplorer.Common.NCoverLogLevel,System.String,System.String)">
            <summary>
            Build a command line using NCover 1.3.3 syntax.
            </summary>
        </member>
        <member name="M:NCoverExplorer.Common.NCoverUtilities._BuildCommandLineForNCover15(System.String,System.String,System.String,System.String,System.String,NCoverExplorer.Common.NCoverLogLevel,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Build a command line using NCover 1.5.x syntax.
            </summary>
        </member>
        <member name="T:NCoverExplorer.Common.PathSearch">
            <summary>
            Utility class to scan for an executable in all available paths.
            Based on CodeProject article at: http://www.codeproject.com/csharp/winwhich.asp
            </summary>
        </member>
        <member name="M:NCoverExplorer.Common.PathSearch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NCoverExplorer.Common.PathSearch"/> class.
            </summary>
        </member>
        <member name="M:NCoverExplorer.Common.PathSearch.Search(System.String)">
            <summary>
            Searches for the specified executable name in all available paths.
            </summary>
            <param name="executableName">Name of the executable.</param>
            <returns></returns>
        </member>
        <member name="M:NCoverExplorer.Common.PathSearch._GetRegExString(System.String)">
            <summary>
            Form the regular expression string for the matching file.
            </summary>
            <param name="executableName">The name of the executable</param>
            <returns>string that is the regex pattern.</returns>
        </member>
        <member name="T:NCoverExplorer.MSBuildTasks.NCoverExplorer">
            <summary>
            MSBuild task for automating NCoverExplorer.Console.
            Using this task you can merge coverage files from NCover, produce xml coverage reports for use
            with CruiseControl.Net, produce html report files directly, fail automated builds if coverage
            thresholds are not met and apply a range of detail to the reports produced such as sorting, 
            filtering and coverage exclusions.
            </summary>
            <example>
            This example shows producing an xml coverage report at Module/Namespace/Class detail level for
            inclusion on a CC.Net build server. You would add a merge file task in the publishers section
            of your CC.Net project file to merge in this "CoverageSummary.xml" file so that it can be 
            transformed by the NCoverExplorer xsl stylesheets you have copied into the CC.Net folder. Here
            we have set a satisfactory coverage threshold at 80%.
                   <code>
                       <![CDATA[
            		   <ItemGroup>
            			   <CoverageFile Include="$(MSBuildProjectDirectory)\Coverage\Coverage.xml" />
            		   </ItemGroup>
            
                       <NCoverExplorer ToolPath="Tools\NCoverExplorer\"
            						   ProjectName="My Project"
            						   OutputDir="$(MSBuildProjectDirectory)\Coverage"
            						   CoverageFiles="@(CoverageFile)"
            						   SatisfactoryCoverage="80"
                                       ReportType="4"
            						   XmlReportName="CoverageSummary.xml"
            		   />
                       ]]>
                   </code>
            </example>
            <example>
            This example shows producing an html function coverage report, excluding the test assemblies. The
            assemblies excluded are being displayed at the bottom of the report. Note also that this time
            the ReportType is specified by its enum name rather than numeric value - they are interchangable.
            We have also "inlined" the "CoverageFiles" from the ItemGroup above to show this can be done.
                   <code>
                       <![CDATA[
                       <PropertyGroup> 
                           <CoverageExclusions> 
                              <CoverageExclusion ExclusionType="Assembly" Pattern="*.Tests" /> 
                           </CoverageExclusions> 
                       </PropertyGroup>
            
                       <NCoverExplorer ProjectName="My Project"
            						   OutputDir="$(MSBuildProjectDirectory)\Coverage"
            						   CoverageFiles="$(MSBuildProjectDirectory)\Coverage\Coverage.xml"
            						   SatisfactoryCoverage="80"
                                       ReportType="ModuleClassFunctionSummary"
            						   HtmlReportName="CoverageSummary.html"
            						   Exclusions="$(CoverageExclusions)"
            						   ShowExcluded="True"
            		   />
                       ]]>
                   </code>
            </example>
            <example>
            This example shows producing an html module class summary coverage report with exclusions as above.
            This time we have added applying specific sorting and filtering criteria. This report will show all
            classes that do not have 100% coverage, sorted within their namespaces by descending coverage %. We
            have also "inlined" the exclusions
                   <code>
                       <![CDATA[
                       <NCoverExplorer ProjectName="My Project"
            						   OutputDir="$(MSBuildProjectDirectory)\Coverage"
            						   CoverageFiles="$(MSBuildProjectDirectory)\Coverage\Coverage.xml"
            						   SatisfactoryCoverage="80"
                                       ReportType="ModuleClassSummary"
            						   HtmlReportName="CoverageSummary.html"
            						   Exclusions="Assembly=*.Tests;"
            						   ShowExcluded="True"
            						   Sort="CoveragePercentageDescending"
            						   Filter="HideFullyCovered"
            		   />
                       ]]>
                   </code>
            </example>
            <example>
            This example shows the merging capability to produce a consolidated merge file from multiple
            coverage test runs. The results are being stored in a single "MyApp.CoverageMerged.xml" file.
            Note that you could additionally apply coverage exclusions at this point. Merging files can
            be useful if your testing process requires multiple coverage runs and you want a single archive
            which consolidates the results.
                   <code>
                       <![CDATA[
            		   <ItemGroup>
            			   <CoverageFile Include="$(MSBuildProjectDirectory)\Coverage\MyApp*.Coverage.xml" />
            		   </ItemGroup>
            
                       <NCoverExplorer OutputDir="$(MSBuildProjectDirectory)\Coverage"
            						   ReportType="None"
            						   CoverageFiles="@(CoverageFile)"
            						   MergeFileName="MyApp.CoverageMerged.xml"
            		   />
                       ]]>
                   </code>
            </example>
            <example>
            This example shows failing a build if the overall coverage % does not meet our threshold, without
            producing a coverage report.
                   <code>
                       <![CDATA[
                       <NCoverExplorer ProjectName="My Project"
            						   ReportType="None"
            						   CoverageFiles="$(MSBuildProjectDirectory)\Coverage\Coverage.xml"
            						   SatisfactoryCoverage="80"
            						   FailMinimum="True"
            		   />
                       ]]>
                   </code>
            </example>
            <example>
            This example shows failing a build if either the overall coverage % does not meet our threshold, or
            if one of the individual module thresholds is not met. Note that the ModuleThresholds
            could have been "inlined" (just showing the MSBuild flexibility to place in a separate group).
                   <code>
                       <![CDATA[
            		   <ItemGroup>
            			   <ModuleThreshold Include="MyProject.1.dll=75" />
            			   <ModuleThreshold Include="MyProject.2.dll=85" />
            		   </ItemGroup>
            
                       <NCoverExplorer ProjectName="My Project"
            						   ReportType="None"
            						   CoverageFiles="$(MSBuildProjectDirectory)\Coverage\Coverage.xml"
            						   SatisfactoryCoverage="80"
            						   FailMinimum="True"
            						   ModuleThresholds="@(ModuleThreshold)"
            		   />
                       ]]>
                   </code>
            </example>
            <example>
            This example shows using virtually the whole range of attributes. Shown below is failing a build 
            if not reaching the overall or module level coverage thresholds. The results of merging multiple 
            NCover files together are stored as a separate file. We are producing xml and html Namespace per
            module summary reports (with the exclusions show in the footer). Note that the module thresholds 
            will also be used in the reports. The reports are sorted by name with no filter applied.
            We are excluding test assemblies and anything in a presentation layer namespace.
                   <code>
                       <![CDATA[
            		   <ItemGroup>
            			   <CoverageFile Include="$(MSBuildProjectDirectory)\Test\Coverage\*.Coverage.xml" />
            		   </ItemGroup>
            
                       <PropertyGroup> 
                           <CoverageExclusions> 
                              <CoverageExclusion ExclusionType="Class" Pattern="MyApp.SomeNamespace.SomeClass" /> 
                              <CoverageExclusion ExclusionType="Namespace" Pattern="MyApp\.(\w*\.)?" IsRegex="true" /> 
                           </CoverageExclusions> 
                       </PropertyGroup>
            
                       <NCoverExplorer ProjectName="My Project" 
            						   ReportType="ModuleNamespaceSummary"
            						   Sort="Name"
            						   Filter="None"
            						   OutputDir="$(MSBuildProjectDirectory)\Test\Coverage"
            						   XmlReportName="CoverageSummary.xml"
            						   HtmlReportName="CoverageSummary.html"
            						   MergeFileName="CoverageMerge.xml"
            						   ShowExcluded="True"
            						   SatisfactoryCoverage="80"
            						   FailMinimum="True"
            						   CoverageFiles="@(CoverageFile)"
            						   Exclusions="$(CoverageExclusions)"
            						   ModuleThresholds="MyProject.1.dll=75;MyProject.2.dll=85"
            		   />
                       ]]>
                   </code>
            </example>
        </member>
        <member name="M:NCoverExplorer.MSBuildTasks.NCoverExplorer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NCoverExplorer.MSBuildTasks.NCoverExplorer"/> class.
            </summary>
        </member>
        <member name="M:NCoverExplorer.MSBuildTasks.NCoverExplorer.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns><see langword="true"/> if the task ran successfully; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:NCoverExplorer.MSBuildTasks.NCoverExplorer.GenerateCommandLineCommands">
            <summary>
            Returns a string value containing the command line arguments to pass directly to the executable file.
            </summary>
            <returns>
            A string value containing the command line arguments to pass directly to the executable file.
            </returns>
        </member>
        <member name="M:NCoverExplorer.MSBuildTasks.NCoverExplorer.LogToolCommand(System.String)">
            <summary>
            Logs the starting point of the run to all registered loggers.
            </summary>
            <param name="message">A descriptive message to provide loggers, usually the command line and switches.</param>
        </member>
        <member name="M:NCoverExplorer.MSBuildTasks.NCoverExplorer.GenerateFullPathToTool">
            <summary>
            Returns the fully qualified path to the executable file.
            </summary>
            <returns>
            The fully qualified path to the executable file.
            </returns>
        </member>
        <member name="M:NCoverExplorer.MSBuildTasks.NCoverExplorer._CheckToolPath">
            <summary>
            Determine the path to NCoverExplorer. Either the user can specify it in the arguments to the task,
            or we look in the registry, program files and finally just assume it is in the path.
            </summary>
        </member>
        <member name="M:NCoverExplorer.MSBuildTasks.NCoverExplorer._GetConfigFilename">
            <summary>
            Determine the name fo rthe temp config file we will write settings into for passing to
            NCoverExplorer.Console.exe. Creates directory if it does not exist.
            </summary>
            <returns>Name of the config file with output directory prepended if specified.</returns>
        </member>
        <member name="M:NCoverExplorer.MSBuildTasks.NCoverExplorer._BuildTempConfigXmlFile">
            <summary>
            Builds a temporary NCoverExplorer configuration file which we can pass in the command line.
            We require this as the command line itself does not directly support all the argument combinations.
            </summary>
        </member>
        <member name="M:NCoverExplorer.MSBuildTasks.NCoverExplorer._WriteCoverExclusionsFromPairsToTempConfigFile(System.Xml.XmlTextWriter)">
            <summary>
            The coverage exclusions have been inlined as type=pattern semi-colon delimited pairs.
            Break apart and write to the temp config file.
            </summary>
            <param name="xmlTextWriter"></param>
        </member>
        <member name="M:NCoverExplorer.MSBuildTasks.NCoverExplorer._WriteCoverExclusionsFromXmlToTempConfigFile(System.Xml.XmlTextWriter)">
            <summary>
            The coverage exclusions have been inlined as type=pattern semi-colon delimited pairs.
            Break apart and write to the temp config file.
            </summary>
            <param name="xmlTextWriter"></param>
        </member>
        <member name="M:NCoverExplorer.MSBuildTasks.NCoverExplorer._WriteModuleThresholdsToTempConfigFile(System.Xml.XmlTextWriter)">
            <summary>
            Iterate through the module thresholds and write their values into the configuration file.
            </summary>
            <param name="xmlTextWriter">Current xml output stream.</param>
        </member>
        <member name="M:NCoverExplorer.MSBuildTasks.NCoverExplorer._CleanupConfigFile">
            <summary>
            Removes generated config file after process has run.
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCoverExplorer.OutputDir">
            <summary>
            Gets or sets the output directory for the reports.
            </summary>
            <value>The output dir.</value>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCoverExplorer.FailMinimum">
            <summary>
            Whether to fail the task if the satisfactory coverage threshold is not reached. 
            NCoverExplorer console application will return exit code 3.
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCoverExplorer.ConfigName">
            <summary>
            Gets or sets the name of the temporary XML config file being generated for coverage.
            </summary>
            <value>The name of the XML config.</value>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCoverExplorer.SatisfactoryCoverage">
            <summary>
            The satisfactory coverage percentage for display in the reports.
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCoverExplorer.ProjectName">
            <summary>
            The .config filename for containing any custom exclusions and parameters.
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCoverExplorer.ReportType">
            <summary>
            The type of report to produce (use numeric value or string name). 
            0 / None, 1 / ModuleSummary, 2 / NamespaceSummary, 
            3 / ModuleNamespaceSummary, 4 / ModuleClassSummary, 5 / ModuleClassFunctionSummary
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCoverExplorer.Sort">
            <summary>
            The sorting if any to apply (use numeric value or string name).
            0 / Name, 1 / ClassLine, 
            2 / CoveragePercentageAscending, 3 / CoveragePercentageDescending,
            4 / UnvisitedSequencePointsAscending, 5 / UnvisitedSequencePointsDescending,
            6 / VisitCountAscending, 7 / VisitCountDescending,
            8 / FunctionCoverageAscending, 9 / FunctionCoverageDescending
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCoverExplorer.Filter">
            <summary>
            The filtering if any to apply (use numeric value or string name).
            0 / None, 1 / HideUnvisited, 2 / HideFullyCovered, 3 / HideThresholdCovered
            </summary>
            <value>The string or textual enum value.</value>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCoverExplorer.XmlReportName">
            <summary>
            The filename for generating an xml report.
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCoverExplorer.HtmlReportName">
            <summary>
            The filename for generating an html report.
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCoverExplorer.MergeFileName">
            <summary>
            The filename for the merge of the coverage xml files.
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCoverExplorer.ShowExcluded">
            <summary>
            Determines whether to include the coverage exclusions in the report. The default is 
            <see langword="true" />.
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCoverExplorer.CoverageFiles">
            <summary>
            Used to select the coverage xml files to merge into the report.
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCoverExplorer.Exclusions">
            <summary>
            Coverage exclusions to apply, in one of two formats:
            They can be semi-colon delimited "Type=Pattern" pairs, e.g. "Assembly=*.Tests;Class=My.*".
            Alternatively they can be defined in a property group as a series of &lt;Exclusion&gt; nodes.
            See the examples for both formats. If you want to use regular expressions then you must
            use the &lt;PropertyGroup&gt; approach.
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCoverExplorer.ModuleThresholds">
            <summary>
            Module thresholds to apply, in format "AssemblyName=Percentage", e.g. "MyApp.Core=75"
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCoverExplorer.ToolName">
            <summary>
            Gets the name of the executable file to run.
            </summary>
            <value></value>
            <returns>The name of the executable file to run.</returns>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCoverExplorer.StandardOutputLoggingImportance">
            <summary>
            Gets the <see cref="T:Microsoft.Build.Framework.MessageImportance"></see> with which to log errors.
            </summary>
            <value></value>
            <returns>The <see cref="T:Microsoft.Build.Framework.MessageImportance"></see> with which to log errors.</returns>
        </member>
        <member name="T:NCoverExplorer.MSBuildTasks.NCover">
            <summary>
            MSBuild task for automating NCover.Console.exe, with NCover 1.5.x support. Note that this task
            will self register CoverLib.dll using the registry (does not require local admin).
            </summary>
            <example>
            This example shows the standard profiling using NCover for standard nunit tests with minimal arguments.
            Defaults are with logging to coverage.log, profiling all assemblies, output filename of coverage.xml and this 
            example specifies a path to where to find ncover.console.exe.
                   <code>
                       <![CDATA[
                       <NCover  ToolPath="Tool\NCover\"
                                CommandLineExe="$(nunit.path)\nunit-console.exe" 
            					CommandLineArgs="$(MSBuildProjectDirectory)\myapp.tests.dll" />
                       ]]>
                   </code>
            </example>
            <example>
            This example shows using an assembly list as ; delimited names rather than using the ability
            of the NCover task to dynamically build from a list of files (shown in following example).
                   <code>
                       <![CDATA[
            
                       <NCover  ToolPath="Tool\NCover\"
                                CommandLineExe="$(nunit.path)\nunit-console.exe" 
            					CommandLineArgs="$(MSBuildProjectDirectory)\myapp.tests.dll"
            					AssemblyList="MyApp.Core;MyApp.Tests" />
                       ]]>
                   </code>
            </example>
            <example>
            This example shows the standard profiling using NCover 1.5.x for a Windows application, specifying a coverage
            exclusion, verbose logging to a named file, specifically named log and output xml files. It also shows
            coverage exclusion attributes, overriding the NCover location to run from and a way of listing assemblies
            to be included in the profiled NCover results.
                   <code>
                       <![CDATA[
            		   <ItemGroup>
            			   <Assembly Include="$(MSBuildProjectDirectory)\MyApp.MyCode.dll" />
            		   </ItemGroup>
            
                       <NCover  ToolPath="Tool\NCover\"
                                CommandLineExe="$(nunit.path)\nunit-console.exe" 
            					CommandLineArgs="myapp.tests.dll"
            					CoverageFile="myapp.coverage.xml"
            					LogLevel="Verbose"
            					LogFile="myapp.coverage.log"
            					WorkingDirectory="$(MSBuildProjectDirectory)"
            					ExcludeAttributes="CoverageExcludeAttribute"
                                Assemblies="@(Assembly)" />
                       ]]>
                   </code>
            </example>
        </member>
        <member name="M:NCoverExplorer.MSBuildTasks.NCover.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NCoverExplorer.MSBuildTasks.NCover"/> class.
            </summary>
        </member>
        <member name="M:NCoverExplorer.MSBuildTasks.NCover.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns><see langword="true"/> if the task ran successfully; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:NCoverExplorer.MSBuildTasks.NCover.GenerateCommandLineCommands">
            <summary>
            Returns a string value containing the command line arguments to pass directly to the executable file.
            </summary>
            <returns>
            A string value containing the command line arguments to pass directly to the executable file.
            </returns>
        </member>
        <member name="M:NCoverExplorer.MSBuildTasks.NCover.GenerateFullPathToTool">
            <summary>
            Returns the fully qualified path to the executable file.
            </summary>
            <returns>
            The fully qualified path to the executable file.
            </returns>
        </member>
        <member name="M:NCoverExplorer.MSBuildTasks.NCover.LogToolCommand(System.String)">
            <summary>
            Logs the starting point of the run to all registered loggers.
            </summary>
            <param name="message">A descriptive message to provide loggers, usually the command line and switches.</param>
        </member>
        <member name="M:NCoverExplorer.MSBuildTasks.NCover._CheckToolPath">
            <summary>
            Check that we have a valid path to NCover.
            </summary>
        </member>
        <member name="M:NCoverExplorer.MSBuildTasks.NCover._CleanupSettingsFile">
            <summary>
            Removes generated settings file after process has run.
            </summary>
        </member>
        <member name="M:NCoverExplorer.MSBuildTasks.NCover._ConvertTaskItemsToArray(Microsoft.Build.Framework.ITaskItem[])">
            <summary>
            Convert the MSBuild specific ITaskItem[] to a string array for use by NCoverUtilities.
            </summary>
            <param name="files"></param>
            <returns></returns>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCover.Version">
            <summary>
            Gets or sets the NCover version this task runs against. Different NCover versions have different command
            line arguments. If not specified will identify the version from the NCover.Console assembly. If specified,
            version should be in format such as "1.3.3" or "1.5.4".
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCover.CommandLineExe">
            <summary>
            The command line executable to be launched by NCover (such as nunit-console.exe).
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCover.CommandLineArgs">
            <summary>
            The arguments to pass to the command line executable to be launched by NCover (such as nunit-console.exe).
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCover.CoverageFile">
            <summary>
            The filename for the output coverage.xml file (default).
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCover.LogLevel">
            <summary>
            What level of NCover logging to provide. Values are "Normal" (default) and "Verbose".
            Due to a bug in NCover 1.5.4 "Quiet" will result in NCover stopping abnormally - hence has been
            defaulted to be "Normal" until the bug is fixed.
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCover.LogFile">
            <summary>
            Gets or sets the logfile name to write to if logLevel is set to anything other than "Quiet". The default
            is "coverage.log".
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCover.WorkingDirectory">
            <summary>
            Gets or sets the working directory for the command line executable.
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCover.ExcludeAttributes">
            <summary>
            If coverage exclusion attributes have been applied (NCover 1.5.4 onwards) specify the attribute.
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCover.ProfileIIS">
            <summary>
            Determines whether to profile under IIS. Default value is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCover.ProfileService">
            <summary>
            The service name if profiling a windows service.
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCover.AssemblyList">
            <summary>
            Alternative to specifying assembly names - you can instead list them as you would on the
            command line as a semi-colon delimited list without any suffixes or paths.
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCover.Assemblies">
            <summary>
            Used to specify the assemblies to be profiled. Alternative to the AssemblyList property,
            where instead you wat the list to be dynamically built using an itemgroup, for instance
            to match all assemblies against a wildcard. The NCover task will take care of stripping
            off the suffixes etc.
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCover.ToolName">
            <summary>
            Gets the name of the executable file to run.
            </summary>
            <value></value>
            <returns>The name of the executable file to run.</returns>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.NCover.StandardOutputLoggingImportance">
            <summary>
            Gets the <see cref="T:Microsoft.Build.Framework.MessageImportance"></see> with which to log errors.
            </summary>
            <value></value>
            <returns>The <see cref="T:Microsoft.Build.Framework.MessageImportance"></see> with which to log errors.</returns>
        </member>
        <member name="T:NCoverExplorer.MSBuildTasks.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.Properties.Resources.NCoverExplorerDeletingConfig">
            <summary>
              Looks up a localized string similar to Deleting config file: {0}.
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.Properties.Resources.NCoverExplorerInvalidExclusion">
            <summary>
              Looks up a localized string similar to This line cannot be parsed: &apos;{0}&apos;. Coverage exclusions should be in format: Type=Pattern (e.g. &apos;Assembly=*.Tests&apos;).
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.Properties.Resources.NCoverExplorerNotFound">
            <summary>
              Looks up a localized string similar to Could not find the registry key for NCoverExplorer indicating the program location (set by installing with TestDriven.Net). Please specify the full path to NCoverExplorer.Console.exe using the ToolPath attribute..
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.Properties.Resources.NCoverNotFound">
            <summary>
              Looks up a localized string similar to Could not find NCover.Console.exe in C:\Program Files\NCover\. Specify an alternate path using the ToolPath attribute on your NCover target..
            </summary>
        </member>
        <member name="P:NCoverExplorer.MSBuildTasks.Properties.Resources.NCoverVersionFound">
            <summary>
              Looks up a localized string similar to Detected NCover.Console v{0} in {1}.
            </summary>
        </member>
    </members>
</doc>
