<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".generated.cs" #>
<#@ include file="..\..\General.ttinclude" #>

using System;
using System.Collections.Generic;

using iSynaptic.Commons.Collections.Generic;

namespace iSynaptic.Commons
{
    public static partial class FuncExtensions
    {
        <# foreach(var i in Enumerable.Range(1, 16))
        {
            string typeArgs = Delimit(Enumerable.Range(1, i), ", ", x => "T" + x.ToString());
            string args = Delimit(Enumerable.Range(1, i), ", ", x => "t" + x.ToString());
            
            string reverseTypeArgs = Delimit(Enumerable.Range(1, i).Reverse(), ", ", x => "T" + x.ToString());
            string reverseArgs = Delimit(Enumerable.Range(1, i).Reverse(), ", ", x => "t" + x.ToString());

            string curriedTypeArgs = Delimit(Enumerable.Range(1, i).Skip(1), ", ", x => "T" + x.ToString());
            string curriedArgs = Delimit(Enumerable.Range(1, i).Skip(1), ", ", x => "t" + x.ToString());
        #>

        <# if(i > 1) { #>

        public static Func<<#= reverseTypeArgs #>, TRet> Flip<<#= typeArgs #>, TRet>(this Func<<#= typeArgs #>, TRet> @this)
        {
            Guard.NotNull(@this, "@this");
            return (<#= reverseArgs #>) => @this(<#= args #>);
        }

        public static Func<<#= curriedTypeArgs #>, TRet> Curry<<#= typeArgs #>, TRet>(this Func<<#= typeArgs #>, TRet> @this, T1 t1)
        {
            Guard.NotNull(@this, "@this");
            return (<#= curriedArgs #>) => @this(t1, <#= curriedArgs #>);
        }

        <# } #>

        public static Action<<#= typeArgs #>> ToAction<<#= typeArgs #>, TRet>(this Func<<#= typeArgs #>, TRet> @this)
        {
            Guard.NotNull(@this, "@this");
            return (<#= args #>) => @this(<#= args #>);
        }

        public static Func<<#= typeArgs #>, bool> And<<#= typeArgs #>>(this Func<<#= typeArgs #>, bool> @this, Func<<#= typeArgs #>, bool> right)
        {
            Guard.NotNull(@this, "@this");
            Guard.NotNull(right, "right");

            return (<#= args #>) => @this(<#= args #>) && right(<#= args #>);
        }

        public static Func<<#= typeArgs #>, bool> Or<<#= typeArgs #>>(this Func<<#= typeArgs #>, bool> @this, Func<<#= typeArgs #>, bool> right)
        {
            Guard.NotNull(@this, "@this");
            Guard.NotNull(right, "right");
            
            return (<#= args #>) => @this(<#= args #>) || right(<#= args #>);
        }

        public static Func<<#= typeArgs #>, bool> XOr<<#= typeArgs #>>(this Func<<#= typeArgs #>, bool> @this, Func<<#= typeArgs #>, bool> right)
        {
            Guard.NotNull(@this, "@this");
            Guard.NotNull(right, "right");

            return (<#= args #>) => @this(<#= args #>) ^ right(<#= args #>);
        }

        public static Func<<#= typeArgs #>, TResult> MakeConditional<<#= typeArgs #>, TResult>(this Func<<#= typeArgs #>, TResult> @this, Func<<#= typeArgs #>, bool> condition)
        {
            return MakeConditional(@this, condition, null);
        }

        public static Func<<#= typeArgs #>, TResult> MakeConditional<<#= typeArgs #>, TResult>(this Func<<#= typeArgs #>, TResult> @this, Func<<#= typeArgs #>, bool> condition, TResult defaultValue)
        {
            return MakeConditional(@this, condition, (<#= args #>) => defaultValue);
        }

        public static Func<<#= typeArgs #>, TResult> MakeConditional<<#= typeArgs #>, TResult>(this Func<<#= typeArgs #>, TResult> @this, Func<<#= typeArgs #>, bool> condition, Func<<#= typeArgs #>, TResult> falseFunc)
        {
            Guard.NotNull(@this, "@this");
            Guard.NotNull(condition, "condition");

            return (<#= args #>) =>
            {
                if (condition(<#= args #>))
                    return @this(<#= args #>);

                if (falseFunc != null)
                    return falseFunc(<#= args #>);
                
                return default(TResult);
            };
        }

        public static Func<<#= typeArgs #>, Maybe<TResult>> Or<<#= typeArgs #>, TResult>(this Func<<#= typeArgs #>, Maybe<TResult>> @this, Func<<#= typeArgs #>, Maybe<TResult>> orFunc)
        {
            if (@this == null || orFunc == null)
                return @this ?? orFunc;

            return (<#= args #>) =>
            {
                var results = @this(<#= args #>);

                if(results.HasValue != true && results.Exception == null)
                    return orFunc(<#= args #>);

                return results;
            };
        }

        public static Func<<#= typeArgs #>, TResult> Synchronize<<#= typeArgs #>, TResult>(this Func<<#= typeArgs #>, TResult> @this)
        {
            return @this.Synchronize((<#= args #>) => true);
        }

        public static Func<<#= typeArgs #>, TResult> Synchronize<<#= typeArgs #>, TResult>(this Func<<#= typeArgs #>, TResult> @this, Func<<#= typeArgs #>, bool> needsSynchronizationPredicate)
        {
            Guard.NotNull(@this, "@this");
            Guard.NotNull(needsSynchronizationPredicate, "needsSynchronizationPredicate");

            return Synchronize(@this, needsSynchronizationPredicate, new object());
        }

        public static Func<<#= typeArgs #>, TResult> Synchronize<<#= typeArgs #>, TResult>(this Func<<#= typeArgs #>, TResult> @this, Func<<#= typeArgs #>, bool> needsSynchronizationPredicate, object gate)
        {
            Guard.NotNull(@this, "@this");
            Guard.NotNull(needsSynchronizationPredicate, "needsSynchronizationPredicate");
            Guard.NotNull(gate, "gate");

            return (<#= args #>) =>
            {
                if(needsSynchronizationPredicate(<#= args #>))
                {
                    lock (gate)
                    {
                        return @this(<#= args #>);
                    }
                }

                return @this(<#= args #>);
            };
        }

        <# } #>

        <# foreach(var i in Enumerable.Range(1, 16))
        {
            string fullTypeArgs = Delimit(Enumerable.Range(1, i), ", ", x => "T" + x.ToString());
            string fullArgs = Delimit(Enumerable.Range(1, i), ", ", x => "t" + x.ToString());

            string nestedTupleType = "";
            string nestedTupleCreate = "";
            string nestedArgs = "";

            foreach(var batch in Batch(Enumerable.Range(1, i), 7).Reverse())
            {
                string typePrefix = "Tuple<" + Delimit(batch, ", ", x => "T" + x.ToString());

                string createPrefix = "new Tuple<" + Delimit(batch, ", ", x => "T" + x.ToString());
                string argCreatePrefix = ">(" + Delimit(batch, ", ", x => "t" + x.ToString());
                string argsList = "x" + string.Join("", Enumerable.Repeat(".Rest", batch.Index)) + Delimit(batch.Select(x => ((x - 1) % 7) + 1), ", x" + string.Join("", Enumerable.Repeat(".Rest", batch.Index)), x => ".Item" + x.ToString());


                if(string.IsNullOrWhiteSpace(nestedTupleType))
                {
                    nestedTupleType = typePrefix + ">";
                    nestedTupleCreate = createPrefix + argCreatePrefix + ")";
                    nestedArgs = argsList;
                }
                else
                {
                    nestedTupleCreate = createPrefix + ", " + nestedTupleType + argCreatePrefix + ", " + nestedTupleCreate + ")";
                    nestedTupleType = typePrefix + ", " + nestedTupleType + ">";
                    nestedArgs = argsList + ", " + nestedArgs;

                }
            }
        #>

        public static Func<<#= fullTypeArgs #>, TResult> Memoize<<#= fullTypeArgs #>, TResult>(this Func<<#= fullTypeArgs #>, TResult> @this)
        {
            Guard.NotNull(@this, "@this");
            var dictionary = new LazySelectionDictionary<<#= nestedTupleType #>, TResult>(x => @this(<#= nestedArgs #>).ToMaybe());

            return (<#= fullArgs #>) => dictionary[<#= nestedTupleCreate #>];
        }
        <# } #>
    }
}
